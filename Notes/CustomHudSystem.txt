Data:
	-From idWeaponManager::getCurWeaponSlot() we get the currently equipped weapon slot
	-From idHUD_AbilityIndicators
		-This seems better than other hud to get data like:
			bloodPunchCharge,  chainsawCharge, flameBelchCharge....it even has a grenadeCharge AND A iceGrenadeCharge
	-From the idHUD_WeaponInfo we can get:
		-Weapon mod 
		-current weapon ammo  + max ammo  + ammo per shot
		-is infinite ammo 	
		-chainsawAmmo + max ammo
		-float chainsawRecharge
		-crucibleCharge + crucibleMaxCharges
		-There is a int equipmentNumUses; but the problem is we want to have both equipment shown so we may find another way to get thoses. However in the idSWFWidget_EquipmentItem there are data we should use like the cooldownValue which could be used to set the timer on the equipment like if it's .60f we display 100 - 60 "time left"
		- flameBelchNumUses + flameBelchMaxUses + flameBelchPulse;
		- hammerShown + hammerRecharge + hammerSupercharge + hammerPulse
	-From idHUD_HealthInfo:
		-Health + max + low
		-Armor + max + low
		-radShield + max + low
		-oxygen + max + low
	-From idHUD_LowWarning:
		-isDemonPlayer: which could be a flag for us to disable the hud and show the orginal hud?
		-health/Armor/Ammo (prct): current, max, lowHealthThreshold, criticalHealthThreshold	
	-From idHUD_Dash:
		-current dash pips
		-radShieldOrOxygenEquipped: which could be used to move elements around?
		-cursed: could be used to set hud color?
	-From idHUD_BloodPunch: (need to investigate this, never realized we had that....)
		-currentCharge
		-maxCharge
		-ACTUALLY WE NEED TO DISPLAY THE VALUE OF THE BLOODPUNCH CHARGE AS TEXT VAL. FUCK.
	-idHUD_TargetStrike:
		float currentCharge; I'm not sure what that is actually, is it the glory kill or bp related
	-idHUD_Powerup:
		-idDeclStatusEffect which should be the current power up 
		-powerupPercentage
	-idHUD_ExtraLives:
		-count + isInfinite

	-idHUD_RuneInfo:
		-Hopefully we don't have to deal with that
	-idHUD_Score: all info about the top right bar but hopefully we won't have to deal with those
	-idHUD_Keycard: hopefully we won't have to deal with those, just have to check where there are displayed on the hud currently
	

Data Transform:
	-We need a class that will, in the main loop constantly transform the data we get from those Huds_ objects and put them in a struct the hook can access to render each element.
	-We also have to constantly check the resolution of the screen to compute those.
	-the idea is to transform the data into a DrawStretchPic(x, y, w, h, color, mapPtr) or a DrawString(guiPtr, x, y, text, Color, scale)
	-the way the anchor system could work is that we have 9 (bl, bm, br, ml, mm, mr, tl, tm, tr) and each element has a anchor priority number, if for ex something if health is anchored bl, and a icon is anchored bl, if health as priority it get drawn first, the size of the health text is computed and the icon will be drawn on the same y as health but at healthX + healthwidth + default separator length and so on. 
	
	-health pips:
		-we use the ComponentDescriptor floats to know the ammount of pips in the pip bar, + the lowHealthThreshold, criticalHealthThreshold info to set their color.

		-if the anchor system is true, it means the position will be computed so, as this element is the one that is the most bottom left we start with it, so the x start will be a % of the screen width (health pipbar offset prtc x) and same for y (health pipbar offset prtc y). The scale will also be a % of the width (health pipbar scale) as we could just use a string or underscores or dots to show those pips (with and outline ofc) like 10 _ and even if user has 2 pips we show 2 reds and the rest in black (?)...But about the scale, if the user can set the scale he wants, how do we make sure that a big health bar will not overwrite a very small armor bar (?)

		-for text, we could use the infoTxt who knows but the ComponentDescriptor floats should be good enough as we can int them. using the health text offset prtc for x and y start and an arbitrary value for scale based on resolution. But what happens if 
	
	-For Armor: same.
	
	-For rad/oxygen icons:
		-we change the color/text depending on the idHUD_HealthInfo ComponentDescriptor vals
		for the text if we have a prct we just display that. we have to compute the scale/pos of the text based on the icon scale/pos obviously but we did something similar for the ice nade and even ammo in the past.
	-

Elements:
	Huds Elements we will use/show: (left to right) We assume all elements have dynamic color change based on their status.
	-health Text or/and health bars pips. (user color + flash red when low/critical)
	-armor Text or/and armor bars pips (user color)
	-rad or oxygen suit (dynamic user color, flash orange below mid and flash red when less than 25 prtc) + optional text value in icon

	-bloodpunch (dynamic user colors + optional charge text in or under icon)
	-dash (dynamic user color + optinal text val)

	-power ups (user color + optional charge text in or under icon)
	-extra life (user color + text inside or next to it?) or we don't handle this !!!!!

	-hammer/crucible (dynamic user color + optional charge text in or under icon)
	-chainsaw (dynamic user color + optional charge text in or under icon)
	-flamebelch (dynamic user color + optional charge text in or under icon)
	-frag nade (dynamic user color + optional charge text in or under icon)
	-ice nade (dynamic user color + optional charge text in or under icon)

	-ammo Text and/or ammo bars pips. Text has option to show max ammo and an option to show how many shots you have instead of the pool(?). Still not sure if we give an option for ammo pool...

	-crosshair:
		-option to show health as color (from green -> blue -> orange -> red)
		-option to show nades/cooldown status as color (this is not compatible with health color)
		-option to set crosshair color (not compatible with other modes)
		


Elements positions/scales:
	-All elements should have a default positions in the default hud, this could/should be computed so that it works at any resolution for pos and scale (glhf)
	-There will be a way when user creates his own hud to set the position of each elements in an absolute manner which could be a percentage of the screen W/H values.
	-The scale is going to be a bit tricky to figure out even though we did that in the past so there is surely work we can reuse.


Display:
	-Disable the whole custom hud if player is demon which is data from idHUD_LowWarning: isDemonPlayer + reenable the game hud elements if those are set to 1 and if the hud mode is not reticle only. Should we disable the crosshair as well? not sure.
	-