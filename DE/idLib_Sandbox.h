#pragma once
#include "idLib_Static.h"

//? these are generated enums for DE_VERSION_SANDBOX

#include <cstdint>


enum idDeclWeapon_weaponCategory_t : int32_t {
	WEAPON_CATEGORY_MELEE = 0,
	WEAPON_CATEGORY_SIDE_ARMS = 1,
	WEAPON_CATEGORY_SMG = 2,
	WEAPON_CATEGORY_RIFLE = 3,
	WEAPON_CATEGORY_MACHINE_GUN = 4,
	WEAPON_CATEGORY_SHOTGUN = 5,
	WEAPON_CATEGORY_SNIPER = 6,
	WEAPON_CATEGORY_THROWN = 7,
	WEAPON_CATEGORY_LAUNCHER = 8,
	WEAPON_CATEGORY_SPECIAL = 9,
	WEAPON_CATEGORY_LAUNCHER_PARABOLIC = 10,
	WEAPON_CATEGORY_DBL_BARREL_SHOTGUN = 11,
	WEAPON_CATEGORY_PLASMA_RIFLE = 12,
	WEAPON_CATEGORY_BEAM = 13,
	WEAPON_CATEGORY_AOE = 14,
	WEAPON_CATEGORY_CURRENT = 15,
	WEAPON_CATEGORY_MAX = 16
};


enum hudMenuID_t : int32_t {
	HUD_MENU_INVALID = -1,
	HUD_MENU_PAUSE = 0,
	HUD_MENU_DEATH = 1,
	HUD_MENU_TUTORIAL = 2,
	HUD_MENU_TUTORIAL_CINEMATIC = 3,
	HUD_MENU_UI_WALKTHROUGH = 4,
	HUD_MENU_DOSSIER = 5,
	HUD_MENU_ARGENT_SELECTION = 6,
	HUD_MENU_MODBOT = 7,
	HUD_MENU_RUNE = 8,
	HUD_MENU_END_OF_LEVEL = 9,
	HUD_MENU_END_OF_LEVEL_DEMO = 10,
	HUD_MENU_INVASION = 11,
	HUD_MENU_INVASION_SETTINGS = 12,
	HUD_MENU_DEMON_END_OF_INVASION = 13,
	HUD_MENU_CURRENCY_CONFIRMATION = 14,
	HUD_MENU_WEAPON_WHEEL = 15,
	HUD_MENU_PHOTO_MODE = 16,
	HUD_MENU_COLLECTIBLE_ALBUM_VIEWER = 17,
	HUD_MENU_COLLECTIBLE_VIEWER = 18,
	HUD_MENU_JUKEBOX = 19,
	HUD_MENU_RESPEC = 20,
	HUD_MENU_CURRENCYEXCHANGE = 21,
	HUD_MENU_BATTLEARENA_LOBBY = 22,
	HUD_MENU_BATTLEARENA_LOBBY_OPTIONS = 23,
	HUD_MENU_BATTLEARENA_LOBBY_PLAYER_SETUP = 24,
	HUD_MENU_BATTLEARENA_ROUND_UPGRADES = 25,
	HUD_MENU_BATTLEARENA_ROUND_UPGRADES_DEMON = 26,
	HUD_MENU_BATTLEARENA_WAITING_FOR_PLAYERS = 27,
	HUD_MENU_BATTLEARENA_PVP_INTRO = 28,
	HUD_MENU_E3_LATER_IN_THE_MISSION = 29,
	HUD_MENU_GAME_MISSION_SELECT = 30,
	HUD_MENU_GAME_MASTER_LEVELS = 31,
	HUD_MENU_BOSS_DEFEATED = 32,
	HUD_MENU_GAME_EXTRA_LIFE_EXCHANGE = 33,
	HUD_MENU_GAME_MASTER_LEVELS_MILESTONES = 34,
	HUD_MENU_INVASION_DEMON_STORY_TIME = 35,
	HUD_MENU_INGAME_REWARDS = 36,
	HUD_MENU_ESCALATION_REWARDS = 37,
	HUD_MENU_HORDE_ROUND_START = 38,
	HUD_MENU_HORDE_SUMMARY = 39,
	HUD_MENU_TEXT_CHAT = 40,
	HUD_MENU_MAX = 41
};


enum idPlayer_playerUseState_t : int32_t {
	USE_STATE_NONE = 0,
	USE_STATE_WAITING_FOR_RELOAD_OR_USE = 1,
	USE_STATE_CONTINUALLY_USING = 2,
	USE_STATE_WAITING_FOR_FINISH_FOCUS = 3,
	USE_STATE_WAITING_FOR_RELOAD = 4,
	USE_STATE_WAITING_FOR_USE_RELEASE = 5
};


enum eventFlags_t : int32_t {
	EVENTFLAG_CANSKIP = 1,
	EVENTFLAG_CLIENTSAFE = 4,
	EVENTFLAG_NOSCRIPT = 8,
	EVENTFLAG_PASSIVEMARKER = 16,
	EVENTFLAG_NOHANDLER = 32,
	EVENTFLAG_SCOPED = 64
};


enum eventArgType_t : int32_t {
	D_EVENT_VOID = 0,
	D_EVENT_INTEGER = 105,
	D_EVENT_UNSIGNED_INTEGER = 117,
	D_EVENT_FLOAT = 102,
	D_EVENT_VECTOR = 118,
	D_EVENT_COLOR = 99,
	D_EVENT_ANGLES = 97,
	D_EVENT_QUAT = 113,
	D_EVENT_STRING = 115,
	D_EVENT_ENTITY = 101,
	D_EVENT_DECL = 100,
	D_EVENT_ANIMWEBPATH = 49,
	D_EVENT_JOINTNAME = 50,
	D_EVENT_ANIMALIAS = 51,
	D_EVENT_ANIM = 52,
	D_EVENT_JOINTTAG = 53,
	D_EVENT_TRACE = 116,
	D_EVENT_VARIABLEARGS = 120,
	D_EVENT_BOOLEAN = 98,
	D_EVENT_RECEIVER = 114,
	D_EVENT_MDNTINSTHANDLE = 109,
	D_EVENT_GAMETIME = 103,
	D_EVENT_ANIMEVENTINFO = 121,
	D_EVENT_WRAPMODE = 119,
	D_EVENT_GAME_CLASS = 56,
	D_EVENT_FSM = 54,
	D_EVENT_DAMAGE_PARMS = 55
};


enum hudEventID_t : int32_t {
	HUD_EVENT_INVALID = -1,
	HUD_EVENT_ACTIVATE_MENU = 0,
	HUD_EVENT_DEACTIVATE_MENU = 1,
	HUD_EVENT_PLAYER_HEALTHCHANGE = 2,
	HUD_EVENT_PLAYER_HEALTH_ABSOLUTE = 3,
	HUD_EVENT_PLAYER_HEALTH_UPGRADE = 4,
	HUD_EVENT_PLAYER_HEALTH_FLOURISH = 5,
	HUD_EVENT_PLAYER_AMMOCHANGE = 6,
	HUD_EVENT_PLAYER_AMMO_PICKUP = 7,
	HUD_EVENT_PLAYER_SET_INFINITE_AMMO = 8,
	HUD_EVENT_PLAYER_SET_INFINITE_AMMO_BFG = 9,
	HUD_EVENT_PLAYER_SET_OVERAMMO = 10,
	HUD_EVENT_PLAYER_CHANGE_WEAPON = 11,
	HUD_EVENT_PLAYER_CHANGE_MOD = 12,
	HUD_EVENT_PLAYER_GAIN_MOD = 13,
	HUD_EVENT_PLAYER_EQUIPMENT_UPDATE = 14,
	HUD_EVENT_PLAYER_EQUIPMENT_UPDATE_ALT = 15,
	HUD_EVENT_PLAYER_EQUIPMENT_RACECAR_UPDATE = 16,
	HUD_EVENT_PLAYER_FLAME_BELCH_UPDATE = 17,
	HUD_EVENT_PLAYER_EQUIPMENT_FLASH_FAIL = 18,
	HUD_EVENT_PLAYER_FLAME_BELCH_FLASH_FAIL = 19,
	HUD_EVENT_PLAYER_QUICK_CHAINSAW_FLASH_FAIL = 20,
	HUD_EVENT_PLAYER_CRUCIBLE_FLASH_FAIL = 21,
	HUD_EVENT_INPUT = 22,
	HUD_EVENT_PLAYER_SPAWNED = 23,
	HUD_EVENT_PLAYER_POST_SPAWN = 24,
	HUD_EVENT_PLAYER_KILLED = 25,
	HUD_EVENT_PLAYER_DASH_INIT = 26,
	HUD_EVENT_PLAYER_WEAPONWHEEL_OPEN = 27,
	HUD_EVENT_PLAYER_WEAPONWHEEL_CLOSE = 28,
	HUD_EVENT_PLAYER_WEAPONWHEEL_FORCE_CLOSE = 29,
	HUD_EVENT_PLAYER_COMBAT_STATE_UPDATE = 30,
	HUD_EVENT_PLAYER_RETICLE_UPDATE = 31,
	HUD_EVENT_PLAYER_RADAR_UPDATE = 32,
	HUD_EVENT_PLAYER_DIAGNOSTICS_UPDATE = 33,
	HUD_EVENT_PLAYER_DIAGNOSTICS_ONLINE_UPDATE = 34,
	HUD_EVENT_PLAYER_TARGETSTRIKE_UPDATE = 35,
	HUD_EVENT_PLAYER_DASHBOARD_UPDATE = 36,
	HUD_EVENT_PLAYER_DEMON_KILL = 37,
	HUD_EVENT_PLAYER_NOTIFICATION = 38,
	HUD_EVENT_PLAYER_NOTIFICATION_CODEX = 39,
	HUD_EVENT_PLAYER_NOTIFICATION_CODEX_END = 40,
	HUD_EVENT_PLAYER_NOTIFICATION_FAST_TRAVEL = 41,
	HUD_EVENT_PLAYER_NOTIFICATION_CHECKPOINT = 42,
	HUD_EVENT_PLAYER_NOTIFICATION_KEYCARD = 43,
	HUD_EVENT_PLAYER_NOTIFICATION_SLAYER_KEY = 44,
	HUD_EVENT_PLAYER_NOTIFICATION_OBJECTIVE_UPDATE = 45,
	HUD_EVENT_PLAYER_NOTIFICATION_OBJECTIVE_COMPLETE = 46,
	HUD_EVENT_PLAYER_NOTIFICATION_OBJECTIVE_SHOW_LAST = 47,
	HUD_EVENT_PLAYER_NOTIFICATION_MISSION_CHALLENGE_UPDATE = 48,
	HUD_EVENT_PLAYER_NOTIFICATION_MISSION_CHALLENGE_COMPLETE = 49,
	HUD_EVENT_PLAYER_NOTIFICATION_WEEKLY_CHALLENGE_UPDATE = 50,
	HUD_EVENT_PLAYER_NOTIFICATION_WEEKLY_CHALLENGE_COMPLETE = 51,
	HUD_EVENT_PLAYER_NOTIFICATION_WEAPON_MASTERY_UPDATE = 52,
	HUD_EVENT_PLAYER_NOTIFICATION_RUNE_ACQUIRED = 53,
	HUD_EVENT_PLAYER_NOTIFICATION_RUNE_MASTERY_ACQUIRED = 54,
	HUD_EVENT_PLAYER_NOTIFICATION_MOD_ACQUIRED = 55,
	HUD_EVENT_PLAYER_NOTIFICATION_PRAETOR_ACQUIRED = 56,
	HUD_EVENT_PLAYER_NOTIFICATION_SENTINEL_BATTERY_ACQUIRED = 57,
	HUD_EVENT_PLAYER_NOTIFICATION_SLAYER_BATTERY_ACQUIRED = 58,
	HUD_EVENT_PLAYER_NOTIFICATION_EQUIPMENT_POINT_ACQUIRED = 59,
	HUD_EVENT_PLAYER_NOTIFICATION_ARGENTUPGRADE_ACQUIRED = 60,
	HUD_EVENT_PLAYER_NOTIFICATION_COLLECTIBLE_ACQUIRED = 61,
	HUD_EVENT_PLAYER_NOTIFICATION_WEAPON_POINT_ACQUIRED = 62,
	HUD_EVENT_PLAYER_NOTIFICATION_WEAPON_MASTERY_ACQUIRED = 63,
	HUD_EVENT_PLAYER_NOTIFICATION_WEAPON_BROKEN = 64,
	HUD_EVENT_PLAYER_NOTIFICATION_CALLOUT = 65,
	HUD_EVENT_PLAYER_NOTIFICATION_TICKER = 66,
	HUD_EVENT_PLAYER_NOTIFICATION_INVASION_CALLOUT = 67,
	HUD_EVENT_PLAYER_NOTIFICATION_INVASION_INCOMING = 68,
	HUD_EVENT_PLAYER_NOTIFICATION_SECRET_HINT = 69,
	HUD_EVENT_PLAYER_NOTIFICATION_SECRET_FOUND = 70,
	HUD_EVENT_PLAYER_NOTIFICATION_COMBAT_POINT = 71,
	HUD_EVENT_PLAYER_NOTIFICATION_BOUNTY_ACTIVE = 72,
	HUD_EVENT_PLAYER_NOTIFICATION_BOUNTY_COMPLETE = 73,
	HUD_EVENT_PLAYER_NOTIFICATION_DOOM_EVENT = 74,
	HUD_EVENT_PLAYER_NOTIFICATION_MILESTONE_COMPLETE = 75,
	HUD_EVENT_PLAYER_NOTIFICATION_GAME_HINT = 76,
	HUD_EVENT_PLAYER_NOTIFICATION_HIDE = 77,
	HUD_EVENT_PLAYER_NOTIFICATION_LEVEL_UP = 78,
	HUD_EVENT_PLAYER_NOTIFICATION_SEASON_LEVEL_UP = 79,
	HUD_EVENT_PLAYER_NOTIFICATION_LATER_IN_THE_MISSION_E3 = 80,
	HUD_EVENT_PLAYER_NOTIFICATION_BUFF_POD_NEARBY = 81,
	HUD_EVENT_PLAYER_NOTIFICATION_UPGRADE_REMINDER = 82,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_INTRO = 83,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_TIMER = 84,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_TIMER_BONUS_TIME = 85,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_FAIL = 86,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_SUCCESS = 87,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_TIMER_FAIL = 88,
	HUD_EVENT_PLAYER_NOTIFICATION_PLAYER_CURSED = 89,
	HUD_EVENT_PLAYER_NOTIFICATION_PLAYER_UNCURSED = 90,
	HUD_EVENT_PLAYER_TIME_ATTACK_TIMER = 91,
	HUD_EVENT_PLAYER_TIME_ATTACK_TIMER_UPDATE = 92,
	HUD_EVENT_PLAYER_TIME_ATTACK_TIMER_BONUS_TIME = 93,
	HUD_EVENT_PLAYER_TIME_ATTACK_TIMER_END = 94,
	HUD_EVENT_PLAYER_COMBAT_POINT_INITIALIZE = 95,
	HUD_EVENT_PLAYER_SLAYER_GATE_INITIALIZE = 96,
	HUD_EVENT_PLAYER_SECRET_ENCOUNTER_INITIALIZE = 97,
	HUD_EVENT_PLAYER_BOSS_COMBAT_INITIALIZE = 98,
	HUD_EVENT_PLAYER_COMBAT_POINT_UPDATE = 99,
	HUD_EVENT_PLAYER_SLAYER_GATE_UPDATE = 100,
	HUD_EVENT_PLAYER_ESCALATION_ENCOUNTER_UPDATE = 101,
	HUD_EVENT_PLAYER_SECRET_ENCOUNTER_UPDATE = 102,
	HUD_EVENT_PLAYER_BOSS_COMBAT_POINT_UPDATE = 103,
	HUD_EVENT_PLAYER_COMBAT_WEAPON_POINT = 104,
	HUD_EVENT_PLAYER_SLAYER_GATE_WEAPON_POINT = 105,
	HUD_EVENT_PLAYER_SECRET_ENCOUNTER_WEAPON_POINT = 106,
	HUD_EVENT_PLAYER_ESCALATION_ENCOUNTER_WEAPON_POINT = 107,
	HUD_EVENT_PLAYER_BOSS_COMBAT_WEAPON_POINT = 108,
	HUD_EVENT_PLAYER_BOSS_COMBAT_COMPLETE = 109,
	HUD_EVENT_PLAYER_KEYCARD_UPDATE = 110,
	HUD_EVENT_PLAYER_REMOVE_KEYCARD = 111,
	HUD_EVENT_PLAYER_ACTIVATE_SENTINEL_ARMOR = 112,
	HUD_EVENT_PLAYER_DEACTIVATE_SENTINEL_ARMOR = 113,
	HUD_EVENT_PLAYER_SET_EXTRA_LIVES = 114,
	HUD_EVENT_PLAYER_ENABLE_INFINITE_EXTRA_LIVES = 115,
	HUD_EVENT_PLAYER_DISABLE_INFINITE_EXTRA_LIVES = 116,
	HUD_EVENT_PLAYER_EXTRA_LIFE_ACTIVATED = 117,
	HUD_EVENT_PLAYER_EXTRA_LIFE_ACQUIRED = 118,
	HUD_EVENT_PLAYER_CHEAT_CODE_ACQUIRED = 119,
	HUD_EVENT_PLAYER_CHAINSAW_INIT = 120,
	HUD_EVENT_PLAYER_CHAINSAW_REMOVED = 121,
	HUD_EVENT_PLAYER_CHAINSAW_FAIL = 122,
	HUD_EVENT_PLAYER_CHAINSAW_RECHARGE = 123,
	HUD_EVENT_PLAYER_HAMMER_INIT = 124,
	HUD_EVENT_PLAYER_HAMMER_REMOVED = 125,
	HUD_EVENT_PLAYER_HAMMER_FAIL = 126,
	HUD_EVENT_PLAYER_HAMMER_RECHARGE = 127,
	HUD_EVENT_PLAYER_HAMMER_SUPERCHARGE = 128,
	HUD_EVENT_PLAYER_CRUCIBLE_FAIL = 129,
	HUD_EVENT_PLAYER_NO_WEAPON_MOD = 130,
	HUD_EVENT_PLAYER_BFG_INIT = 131,
	HUD_EVENT_PLAYER_BFG_REMOVED = 132,
	HUD_EVENT_PLAYER_CRUCIBLE_UPDATE_INVENTORY = 133,
	HUD_EVENT_PLAYER_CRUCIBLE_UPDATE_CHARGE = 134,
	HUD_EVENT_PLAYER_ACQUIRE_RAD_SHIELD = 135,
	HUD_EVENT_PLAYER_ACTIVATE_RAD_SHIELD = 136,
	HUD_EVENT_PLAYER_DEACTIVATE_RAD_SHIELD = 137,
	HUD_EVENT_PLAYER_RAD_SHIELD_CHANGE = 138,
	HUD_EVENT_PLAYER_RAD_SHIELD_UPGRADE = 139,
	HUD_EVENT_PLAYER_ACQUIRE_OXYGEN = 140,
	HUD_EVENT_PLAYER_ACTIVATE_OXYGEN = 141,
	HUD_EVENT_PLAYER_DEACTIVATE_OXYGEN = 142,
	HUD_EVENT_PLAYER_OXYGEN_CHANGE = 143,
	HUD_EVENT_PLAYER_OXYGEN_UPGRADE = 144,
	HUD_EVENT_PLAYER_HIDDEN = 145,
	HUD_EVENT_OPEN_DOSSIER = 146,
	HUD_EVENT_UPDATE_DOSSIER = 147,
	HUD_EVENT_DOSSIER_WEAPON_UPDATE = 148,
	HUD_EVENT_DOSSIER_MOD_UPDATE = 149,
	HUD_EVENT_DOSSIER_UPGRADE_UPDATE = 150,
	HUD_EVENT_DOSSIER_WEAPON_WHEEL_SIZE_AND_ORDER_UPDATE = 151,
	HUD_EVENT_DOSSIER_RUNE_SLOT = 152,
	HUD_EVENT_DOSSIER_RUNE_UPDATE = 153,
	HUD_EVENT_DOSSIER_SUIT_UPDATE = 154,
	HUD_EVENT_DOSSIER_CELL_ROUTING_UPDATE = 155,
	HUD_EVENT_DOSSIER_CODEX_INITIALIZE = 156,
	HUD_EVENT_DOSSIER_MAP_UPDATE = 157,
	HUD_EVENT_DOSSIER_MAP_CHALLENGE_UPDATE = 158,
	HUD_EVENT_DOSSIER_MAP_PROGRESSION_UPDATE = 159,
	HUD_EVENT_DOSSIER_MISSION_CHALLENGES_UPDATE = 160,
	HUD_EVENT_DOSSIER_WEEKLY_CHALLENGES_UPDATE = 161,
	HUD_EVENT_DOSSIER_WEAPON_MASTERY_CHALLENGE_UPDATE = 162,
	HUD_EVENT_RUNE_UPDATE_AMMO_BOOST = 163,
	HUD_SONIC_BOOST_HELD = 164,
	HUD_EVENT_RAD_SHIELD = 165,
	HUD_EVENT_JET_PACK = 166,
	HUD_EVENT_INVASION_STATUS_UPDATE = 167,
	HUD_EVENT_INVASION_COOLDOWN = 168,
	HUD_EVENT_INVASION_FLASH_WAITING = 169,
	HUD_EVENT_DEMON_ABILITY_BUTTON_HOLD = 170,
	HUD_EVENT_DEBUG_ELEMENT = 171,
	HUD_EVENT_DEBUG_NOTIFICATION = 172,
	HUD_EVENT_DEMONPLAYER_SPAWNED = 173,
	HUD_EVENT_DEMONPLAYER_HEALTHCHANGE = 174,
	HUD_EVENT_DEMONPLAYER_HEALTH_UPGRADED = 175,
	HUD_EVENT_DEMONPLAYER_HEALTH_ABSOLUTE = 176,
	HUD_EVENT_DEMONPLAYER_CARDWHEEL_OPEN = 177,
	HUD_EVENT_DEMONPLAYER_CARDWHEEL_CLOSE = 178,
	HUD_EVENT_BOSS_HEALTH_BAR_SHOW = 179,
	HUD_EVENT_BOSS_HEALTH_BAR_HIDE = 180,
	HUD_EVENT_SLOW_MO_TIMER = 181,
	HUD_EVENT_BLOOD_PUNCH_UPDATE = 182,
	HUD_EVENT_RUNE_UPDATE_EQUIPPED = 183,
	HUD_EVENT_RUNE_UPDATE_USE_COUNT = 184,
	HUD_EVENT_RUNE_UPDATE_PULSE = 185,
	HUD_EVENT_RUNE_UPDATE_TIMER = 186,
	HUD_EVENT_RUNE_UPDATE_CHARGE_PERCENT = 187,
	HUD_EVENT_DEMON_BOUNTY_CREATED = 188,
	HUD_EVENT_DEMON_BOUNTY_ACTIVE = 189,
	HUD_EVENT_DEMON_CARD_UPDATE = 190,
	HUD_EVENT_DEMON_CARD_DECK_UPDATE = 191,
	HUD_EVENT_POI_UPDATE = 192,
	HUD_EVENT_POI_FLOURISH = 193,
	HUD_EVENT_POI_FADE = 194,
	HUD_EVENT_POI_COMPASS_POSITION_UPDATE = 195,
	HUD_EVENT_LOCKON_UPDATE = 196,
	HUD_EVENT_MODBOT_UPDATE = 197,
	HUD_EVENT_MODBOT_WEAPON_UPDATE = 198,
	HUD_EVENT_MODBOT_MOD_UPDATE = 199,
	HUD_EVENT_MODBOT_CHOOSE = 200,
	HUD_EVENT_MODBOT_CANCEL = 201,
	HUD_EVENT_DEBUG_METER = 202,
	HUD_EVENT_POWERUP_METER = 203,
	HUD_EVENT_POWERUP_EXTENSION = 204,
	HUD_EVENT_POWERUP_REMOVED = 205,
	HUD_EVENT_RUNE_TRIAL_UPDATE = 206,
	HUD_EVENT_RUNE_TRIAL_START = 207,
	HUD_EVENT_RUNE_TRIAL_CANCEL = 208,
	HUD_EVENT_RUNE_TRIAL_CHALLENGE_UPDATE = 209,
	HUD_EVENT_RUNE_INTERACT_RUNE_UPDATE = 210,
	HUD_EVENT_RUNE_INTERACT_CHOOSE = 211,
	HUD_EVENT_RUNE_INTERACT_CANCEL = 212,
	HUD_EVENT_ARGENT_UPGRADES_UPDATE = 213,
	HUD_EVENT_ARGENT_WEB_LINK_UPDATE = 214,
	HUD_EVENT_ROUND_SCORE = 215,
	HUD_EVENT_PVP_MATCH_UPDATE = 216,
	HUD_EVENT_TEAM_SUPER = 217,
	HUD_EVENT_DAMAGE_TO_PLAYER = 218,
	HUD_EVENT_DAMAGE_TO_ENEMY = 219,
	HUD_EVENT_UPDATE_DAMAGE_TO_ENEMY = 220,
	HUD_EVENT_CHARACTER_STATUS_EVENT = 221,
	HUD_EVENT_PVP_ROUND_UPGRADE_CHOSEN = 222,
	HUD_EVENT_PVP_SHOW_ROUND_UPGRADES_SCREEN = 223,
	HUD_EVENT_INVASION_MATCH_UPDATE = 224,
	HUD_EVENT_INVASION_SHOW_INTRO = 225,
	HUD_EVENT_INVASION_MENU_DEMON_SELECT_UPDATE = 226,
	HUD_EVENT_DEBUG_INVASION_MENU_DEMON_SELECT = 227,
	HUD_EVENT_INVASION_SHOW_OUTRO_SCREEN = 228,
	HUD_EVENT_INVASION_END = 229,
	HUD_EVENT_SUBTITLE_ADDED_BY_TEXT = 230,
	HUD_EVENT_SUBTITLE_ADDED_BY_SOUND = 231,
	HUD_EVENT_SUBTITLE_ADDED_BY_VO = 232,
	HUD_EVENT_SUBTITLE_REMOVED_BY_SOURCE = 233,
	HUD_EVENT_SUBTITLE_REMOVED_BY_SOUND = 234,
	HUD_EVENT_SPEAKER_SHOW = 235,
	HUD_EVENT_SPEAKER_HIDE = 236,
	HUD_EVENT_DEMON_INVASION_STATE_UPDATE = 237,
	HUD_EVENT_DEMON_INVASION_DISGUISE_MOVE = 238,
	HUD_EVENT_SCORE_UPDATE = 239,
	HUD_EVENT_DEMON_SHOW_END_OF_INVASION_SCREEN = 240,
	HUD_EVENT_CAMPAIGN_MAP_START = 241,
	HUD_EVENT_CAMPAIGN_MAP_PLAYABLE = 242,
	HUD_EVENT_PVP_LOBBY_START = 243,
	HUD_EVENT_PVP_START_INTRO = 244,
	HUD_EVENT_PVP_VERSUS_VIDEO = 245,
	HUD_EVENT_PVP_PLAYERCARD_ANIMATION = 246,
	HUD_EVENT_PVP_MATCH_START = 247,
	HUD_EVENT_PVP_DEATH = 248,
	HUD_EVENT_PVP_RESPAWN = 249,
	HUD_EVENT_PVP_RESPAWNED_MIDMATCH = 250,
	HUD_EVENT_PVP_ROUND_END = 251,
	HUD_EVENT_PVP_MATCH_END_RESULT = 252,
	HUD_EVENT_PVP_MATCH_END_OUTRO = 253,
	HUD_EVENT_PVP_MATCH_END_REWARDS = 254,
	HUD_EVENT_PVP_MATCH_END_SEASON_REFRESH = 255,
	HUD_EVENT_PVP_VICTORY_ANIMATION = 256,
	HUD_EVENT_PVP_REWARDS_ANIMATION = 257,
	HUD_EVENT_PLAY_BOOT_SEQUENCE = 258,
	HUD_EVENT_SHOW_TUTORIAL = 259,
	HUD_EVENT_SHOW_TUTORIAL_OBJECTIVES_ONLY = 260,
	HUD_EVENT_SHOW_TUTORIAL_CINEMATIC = 261,
	HUD_EVENT_CLEAR_ACTIVE_OBJECTIVES = 262,
	HUD_EVENT_UPDATE_UI_WALKTHROUGH = 263,
	HUD_EVENT_START_CINEMATIC = 264,
	HUD_EVENT_STOP_CINEMATIC = 265,
	HUD_EVENT_SECRET_HINT_START = 266,
	HUD_EVENT_SECRET_HINT_STOP = 267,
	HUD_EVENT_OPEN_END_OF_LEVEL = 268,
	HUD_EVENT_MASTER_LEVEL_COMPLETE = 269,
	HUD_EVENT_MASTER_LEVEL_EARNED_REWARD = 270,
	HUD_EVENT_SHOW_INGAME_REWARDS = 271,
	HUD_EVENT_SHOW_ESCALATION_REWARDS = 272,
	HUD_EVENT_SHOW_ESCALATION_PERKS = 273,
	HUD_EVENT_ESCALATION_SUMMARY = 274,
	HUD_EVENT_SHOW_CAMPAIGN_REWARDS = 275,
	HUD_EVENT_CAMPAIGN_REWARDS_SKIPPED = 276,
	HUD_EVENT_CAMPAIGN_REWARDS_COMPLETE = 277,
	HUD_EVENT_CURRENCY_CONFIRMATION_CURRENCY_UPDATE = 278,
	HUD_EVENT_CURRENCY_CONFIRM = 279,
	HUD_EVENT_CURRENCY_CANCEL = 280,
	HUD_EVENT_PLAYER_MISSION_CHALLENGE_TIMER_END = 281,
	HUD_EVENT_PIN_CHALLENGE = 282,
	HUD_EVENT_UNPIN_CHALLENGE = 283,
	HUD_EVENT_PINNED_CHALLENGES_UPDATE = 284,
	HUD_EVENT_RETURN_TO_LEVEL = 285,
	HUD_EVENT_UPDATE_USER_CURRENCIES = 286,
	HUD_EVENT_COLLECTIBLE_SELECTION_CHANGE = 287,
	HUD_EVENT_COLLECTIBLE_EXTERNAL_CHANGE = 288,
	HUD_EVENT_UPDATE_AVAILABLE_UPGRADES = 289,
	HUD_EVENT_UPDATE_JUKEBOX = 290,
	HUD_EVENT_UPDATE_RESPEC_STATION = 291,
	HUD_EVENT_UPDATE_CURRENCY_EXCHANGE = 292,
	HUD_EVENT_SPECTATE_BEGIN = 293,
	HUD_EVENT_SPECTATOR_UPDATE = 294,
	HUD_EVENT_SPECTATE_END = 295,
	HUD_EVENT_INNATE_DEMON_ABILITY_UPDATE = 296,
	HUD_EVENT_INVASION_DEMON_ABILITY_UPDATE = 297,
	HUD_EVENT_DEMON_DASH_INIT = 298,
	HUD_EVENT_DEMON_DASH_UPDATE = 299,
	HUD_EVENT_PLAYER_NOTIFICATION_SKYBOX_UNLOCK_EVENT = 300,
	HUD_EVENT_PLAY_VIDEO = 301,
	HUD_EVENT_STOP_VIDEO = 302,
	HUD_EVENT_TUTORIAL_DAMAGE_EVENT = 303,
	HUD_EVENT_COLLECTIBLE_SINGLE_TOY_VIEW = 304,
	HUD_EVENT_COLLECTIBLE_SINGLE_TOY_REAL_VIEW = 305,
	HUD_EVENT_COLLECTIBLE_MULTI_TOY_VIEW = 306,
	HUD_EVENT_COLLECTIBLE_MULTI_TOY_REAL_VIEW = 307,
	HUD_EVENT_COLLECTIBLE_WEAPON_VIEW = 308,
	HUD_EVENT_COLLECTIBLE_RECORD_VIEW = 309,
	HUD_EVENT_COLLECTIBLE_RECORD_PLAY = 310,
	HUD_EVENT_COLLECTIBLE_RECORD_PAUSE = 311,
	HUD_EVENT_PLAYER_KEY_BINDS_CHANGED = 312,
	HUD_EVENT_CRYO_GRENADE_ADDED = 313,
	HUD_EVENT_COLLECTIBLE_WEAPON_MOD_SWAP = 314,
	HUD_EVENT_PVP_SHOW_PLAYER_DAMAGE_REPORT = 315,
	HUD_EVENT_PVP_HIDE_PLAYER_DAMAGE_REPORT = 316,
	HUD_EVENT_NETWORK_STATUS_HIGH_LATENCY = 317,
	HUD_EVENT_NETWORK_STATUS_LATENCY_VARIATION = 318,
	HUD_EVENT_NETWORK_STATUS_PACKET_LOSS = 319,
	HUD_EVENT_INVASION_STORYTIME_CUTSCENE_START = 320,
	HUD_EVENT_SHOW_TEXT_CRAWL = 321,
	HUD_EVENT_SHOW_OUTRO_TEXT_CRAWL = 322,
	HUD_EVENT_HIDE_TEXT_CRAWL = 323,
	HUD_EVENT_TEXT_CRAWL = 324,
	HUD_EVENT_TEXT_CRAWL_END = 325,
	HUD_EVENT_ENABLE_PAUSE = 326,
	HUD_EVENT_DISABLE_PAUSE = 327,
	HUD_EVENT_PLAYER_MODS_DISABLED = 328,
	HUD_EVENT_MORTAR_SOUND_UPDATE = 329,
	HUD_EVENT_BOSS_HEALTH_GAIN = 330,
	HUD_EVENT_ROLL_CREDITS = 331,
	HUD_EVENT_CREDITS_WATCHED = 332,
	HUD_EVENT_CREDITS_SKIPPED = 333,
	HUD_EVENT_MENU_ACTIVATED = 334,
	HUD_EVENT_HORDE_GAIN_SCORE = 335,
	HUD_EVENT_HORDE_SET_SCORE = 336,
	HUD_EVENT_HORDE_SET_PREVIOUS_BEST = 337,
	HUD_EVENT_HORDE_SCORE_MULTIPLIER_START = 338,
	HUD_EVENT_HORDE_SCORE_MULTIPLIER_END = 339,
	HUD_EVENT_HORDE_LEVEL_COMPLETE = 340,
	HUD_EVENT_HORDE_ROUND_START = 341,
	HUD_EVENT_HORDE_ROUND_END = 342,
	HUD_EVENT_HORDE_WAVE_START = 343,
	HUD_EVENT_HORDE_WAVE_END = 344,
	HUD_EVENT_HORDE_BLITZ_SCORE = 345,
	HUD_EVENT_HORDE_BLITZ_START = 346,
	HUD_EVENT_HORDE_BLITZ_END = 347,
	HUD_EVENT_HORDE_BLITZ_TARGET_REACHED = 348,
	HUD_EVENT_HORDE_BOUNTY_TARGET_REACHED = 349,
	HUD_EVENT_HORDE_COIN_TARGET_REACHED = 350,
	HUD_EVENT_HORDE_GET_COIN = 351,
	HUD_EVENT_HORDE_COIN_ROUND_START = 352,
	HUD_EVENT_HORDE_COIN_ROUND_END = 353,
	HUD_EVENT_HORDE_MATCH_COMPLETE = 354,
	HUD_EVENT_HORDE_BOUNTY_ROUND_START = 355,
	HUD_EVENT_HORDE_BOUNTY_ROUND_END = 356,
	HUD_EVENT_HORDE_BOUNTY_ROUND_KILL = 357,
	HUD_EVENT_HORDE_TOTAL_UPDATE = 358,
	HUD_EVENT_HORDE_BLITZ_ROUND_SETUP = 359,
	HUD_EVENT_HORDE_STAGED_TIMER_START = 360,
	HUD_EVENT_HORDE_STAGED_TIMER_UPDATE = 361,
	HUD_EVENT_HORDE_STAGED_TIMER_END_AND_HIDE = 362,
	HUD_EVENT_HORDE_STAGED_TIMER_END_NO_HIDE = 363,
	HUD_EVENT_HORDE_STAGED_TIMER_HIDE = 364,
	HUD_EVENT_HORDE_STAGED_TIMER_PULSE = 365,
	HUD_EVENT_HORDE_STAGED_TIMER_STAGE_CHANGE = 366,
	HUD_EVENT_HORDE_TIMELINE_UPDATE = 367,
	HUD_EVENT_HORDE_TIMELINE_ARENA_WAVE_UPDATE = 368,
	HUD_EVENT_HORDE_ARENA_WAVE_UPDATE = 369,
	HUD_EVENT_HORDE_ROUND_TRANSITION = 370,
	HUD_EVENT_HORDE_SHOW_HORDE_SUMMARY = 371,
	HUD_EVENT_HORDE_CLOSE_HORDE_SUMMARY = 372,
	HUD_EVENT_HORDE_VICTORY_SHOW = 373,
	HUD_EVENT_HORDE_VICTORY_HIDE = 374,
	HUD_EVENT_HORDE_SUMMARY_TIMELINE_UPDATE = 375,
	HUD_EVENT_HORDE_SUMMARY_ARENA_WAVE_UPDATE = 376,
	HUD_EVENT_HORDE_MEDAL_UPDATE = 377,
	HUD_EVENT_POWERUP_CHANGED = 378,
	HUD_EVENT_TEXT_CHAT_INIT = 379,
	HUD_EVENT_TEXT_CHAT_MARK_READ = 380,
	HUD_EVENT_TEXT_CHAT_MARK_UNREAD = 381,
	HUD_EVENT_MAX = 382
};


enum idHandsCustomWeaponAnimSelect : int32_t {
	HANDS_CUSTOM_WEAPON_ANIM_DEFAULT = 0,
	HANDS_CUSTOM_WEAPON_ANIM_COLLECTIBLE_FIRST_PICKUP = 0,
	HANDS_CUSTOM_WEAPON_ANIM_COLLECTIBLE_STANDARD = 1,
	HANDS_CUSTOM_WEAPON_ANIM_COLLECTIBLE_FIST_BUMP = 2,
	HANDS_CUSTOM_WEAPON_ANIM_MAX = 3
};


enum idHandsFailedChainsawSelect : int32_t {
	HANDS_CHAINSAW_FAILED_NONE = -1,
	HANDS_CHAINSAW_FAILED_SWIPE_LEFT = 0,
	HANDS_CHAINSAW_FAILED_SWIPE_RIGHT = 1,
	HANDS_CHAINSAW_FAILED_PULL_CORD = 2,
	HANDS_CHAINSAW_FAILED_DEFLECT = 3
};


enum idHands_handsAction_t : int32_t {
	HANDSACTION_NONE = 0,
	HANDSACTION_IDLE = 1,
	HANDSACTION_FORCE_IDLE = 2,
	HANDSACTION_FIRE = 3,
	HANDSACTION_CEASEFIRE = 4,
	HANDSACTION_DRYFIRE = 5,
	HANDSACTION_RELOAD = 6,
	HANDSACTION_MELEE = 7,
	HANDSACTION_MELEE_RIGHT = 8,
	HANDSACTION_MELEE_LEFT = 9,
	HANDSACTION_BRINGDOWN = 10,
	HANDSACTION_BRINGUP = 11,
	HANDSACTION_THROWATTACH = 12,
	HANDSACTION_THROWITEM = 13,
	HANDSACTION_JUMP = 14,
	HANDSACTION_FALL = 15,
	HANDSACTION_CUSTOM_ANIM = 16,
	HANDSACTION_LAND_NO_ANIM = 17,
	HANDSACTION_LAND_SM = 18,
	HANDSACTION_LAND_MED = 19,
	HANDSACTION_LAND_LG = 20,
	HANDSACTION_LAND_XLG = 21,
	HANDSACTION_GENERIC_HIDE_INSTANT = 22,
	HANDSACTION_GENERIC_HIDE_ANIMATED = 23,
	HANDSACTION_GENERIC_HIDE_MOD_SWITCH = 24,
	HANDSACTION_GENERIC_UNHIDE = 25,
	HANDSACTION_CHAINSAW_FAILED_GK = 26,
	HANDSACTION_CHAINSAW_PULL_CORD = 27,
	HANDSACTION_CHAINSAW_REV = 28,
	HANDSACTION_CHAINSAW_STOP_CUTTING = 29,
	HANDSACTION_CHAINSAW_STAB = 30,
	HANDSACTION_CHAINSAW_STAB_FAIL = 31,
	HANDSACTION_HAMMER_THROW = 32,
	HANDSACTION_HAMMER_SLAM = 33,
	HANDSACTION_ENTER_WATER = 34,
	HANDSACTION_SWIM_BACKWARD = 35,
	HANDSACTION_SWIM_DOWN = 36,
	HANDSACTION_SWIM_FORWARD = 37,
	HANDSACTION_SWIM_LEFT = 38,
	HANDSACTION_SWIM_RIGHT = 39,
	HANDSACTION_SWIM_UP = 40,
	HANDSACTION_EXIT_WATER = 41,
	HANDSACTION_CHARGE = 42,
	HANDSACTION_MAX = 43
};


enum idHandsCustomAnimSelect : int32_t {
	HANDS_CUSTOM_ANIM_NONE = -1,
	HANDS_CUSTOM_ANIM_VIEW_EQUIPMENT_FRAG = 0,
	HANDS_CUSTOM_ANIM_COLLECTABLE_FIRST = 1,
	HANDS_CUSTOM_ANIM_COLLECTABLE_STANDARD = 2,
	HANDS_CUSTOM_ANIM_COLLECTABLE_FIST_BUMP = 3,
	HANDS_CUSTOM_ANIM_GROUNDSLAM = 4,
	HANDS_CUSTOM_ANIM_INSPECT_BARON_TOY = 5,
	HANDS_CUSTOM_ANIM_INSPECT_CACODEMON_TOY = 6,
	HANDS_CUSTOM_ANIM_INSPECT_CARCASS_TOY = 7,
	HANDS_CUSTOM_ANIM_INSPECT_CUEBALL_TOY = 8,
	HANDS_CUSTOM_ANIM_INSPECT_DOOMHUNTER_TOY = 9,
	HANDS_CUSTOM_ANIM_INSPECT_DREADKNIGHT_TOY = 10,
	HANDS_CUSTOM_ANIM_INSPECT_FLAMECUBUS_TOY = 11,
	HANDS_CUSTOM_ANIM_INSPECT_GLADIATOR_TOY = 12,
	HANDS_CUSTOM_ANIM_INSPECT_HELLKNIGHT_TOY = 13,
	HANDS_CUSTOM_ANIM_INSPECT_IMP_TOY = 14,
	HANDS_CUSTOM_ANIM_INSPECT_KHAN_MAYKR_TOY = 15,
	HANDS_CUSTOM_ANIM_INSPECT_MANCUBUS_GOO_TOY = 16,
	HANDS_CUSTOM_ANIM_INSPECT_MAYKR_ZOMBIE_TOY = 17,
	HANDS_CUSTOM_ANIM_INSPECT_PAIN_ELEMENTAL_TOY = 18,
	HANDS_CUSTOM_ANIM_INSPECT_PINKY_TOY = 19,
	HANDS_CUSTOM_ANIM_INSPECT_PROWLER_TOY = 20,
	HANDS_CUSTOM_ANIM_INSPECT_SOLDIER_SHIELD_TOY = 21,
	HANDS_CUSTOM_ANIM_INSPECT_SPECTRE_TOY = 22,
	HANDS_CUSTOM_ANIM_INSPECT_ZOMBIE_TIER3_TOY = 23,
	HANDS_CUSTOM_ANIM_INSPECT_CHEAT_CODE = 24,
	HANDS_CUSTOM_ANIM_INSPECT_ZOMBIE_TIER1_TOY = 25,
	HANDS_CUSTOM_ANIM_INSPECT_MECH_BATTERY = 26,
	HANDS_CUSTOM_ANIM_INSPECT_VINYL_ALBUM = 27,
	HANDS_CUSTOM_ANIM_INSPECT_EQUIPMENT_ICE = 28,
	HANDS_CUSTOM_ANIM_INSPECT_EQUIPMENT_FLAME = 29,
	HANDS_CUSTOM_ANIM_INSPECT_EQUIPMENT_FRAG = 30,
	HANDS_CUSTOM_ANIM_INSPECT_GARGOYLE_TOY = 31,
	HANDS_CUSTOM_ANIM_INSPECT_SOLDIER_TOY = 32,
	HANDS_CUSTOM_ANIM_INSPECT_DOOMSLAYER_TOY = 33,
	HANDS_CUSTOM_ANIM_INSPECT_MANCUBUS_TOY = 34,
	HANDS_CUSTOM_ANIM_INSPECT_ICONOFSIN_TOY = 35,
	HANDS_CUSTOM_ANIM_INSPECT_LOST_SOUL_TOY = 36,
	HANDS_CUSTOM_ANIM_INSPECT_TYRANT_TOY = 37,
	HANDS_CUSTOM_ANIM_INSPECT_ARCHVILE_TOY = 38,
	HANDS_CUSTOM_ANIM_INSPECT_ARACHNOTRON_TOY = 39,
	HANDS_CUSTOM_ANIM_INSPECT_MARAUDER_TOY = 40,
	HANDS_CUSTOM_ANIM_INSPECT_REVENANT_TOY = 41,
	HANDS_CUSTOM_ANIM_INSPECT_WHIPLASH_TOY = 42,
	HANDS_CUSTOM_ANIM_VIEW_HAMMER = 43,
	HANDS_CUSTOM_ANIM_MAX = 44
};


enum playerBodyReactionNumDirs_t : int32_t {
	PLAYER_BODY_REACTION_NUMDIRS_1 = 0,
	PLAYER_BODY_REACTION_NUMDIRS_4 = 1,
	PLAYER_BODY_REACTION_NUMDIRS_8 = 2
};


enum idUCmdTracker_inhibitFlags_t : int32_t {
	UCMD_INHIBIT_NONE = 0,
	UCMD_INHIBIT_MOVEMENT_FWD = 1,
	UCMD_INHIBIT_MOVEMENT_RT = 2,
	UCMD_INHIBIT_MOVEMENT_UP = 4,
	UCMD_INHIBIT_VIEW = 8,
	UCMD_INHIBIT_BUTTONS = 16,
	UCMD_INHIBIT_CHANGE_WEAPON = 32,
	UCMD_INHIBIT_DASH = 64,
	UCMD_INHIBIT_MOVEMENT_ONCE = 128,
	UCMD_INHIBIT_VIEW_ONCE = 256,
	UCMD_INHIBIT_BUTTONS_ONCE = 512,
	UCMD_INHIBIT_VIEW_PROFILE = 1024,
	UCMD_INHIBIT_PRIMARY_ATTACK = 2048,
	UCMD_INHIBIT_SECONDARY_ATTACK = 4096,
	UCMD_INHIBIT_TERTIARY_ATTACK = 8192,
	UCMD_INHIBIT_JUMP = 16384,
	UCMD_INHIBIT_QUICK_INPUT = 32768,
	UCMD_INHIBIT_CHAINSAW = 65536,
	UCMD_INHIBIT_MOVEMENT = 7,
	UCMD_INHIBIT_ATTACK = 112640,
	UCMD_INHIBIT_ALL = 129151,
	UCMD_INHIBIT_ALL_ONCE = 896,
	UCMD_INHIBIT_ALL_BUT_VIEW_ONCE = 640
};


enum equipmentType_t : int32_t {
	EQUIPMENT_NONE = -1,
	EQUIPMENT_FRAG_GRENADE = 0,
	EQUIPMENT_ICE_BOMB = 1,
	EQUIPMENT_FLAME_BELCH = 2,
	EQUIPMENT_HAMMER = 3,
	EQUIPMENT_MAX = 4
};


enum hudElementFlags_t : int32_t {
	HUD_ELEMENT_MODE_NONE = 0,
	HUD_ELEMENT_MODE_INPUT_ONLY = 1,
	HUD_ELEMENT_MODE_COMBAT = 2,
	HUD_ELEMENT_MODE_NON_COMBAT = 4,
	HUD_ELEMENT_MODE_CINEMATIC = 8,
	HUD_ELEMENT_MODE_DEMON = 16,
	HUD_ELEMENT_MODE_RADAR = 32,
	HUD_ELEMENT_MODE_DIAGNOSTICS = 64,
	HUD_ELEMENT_MODE_INVASION = 128,
	HUD_ELEMENT_MODE_PVP = 256,
	HUD_ELEMENT_MODE_EXTRA_LIFE = 512,
	HUD_ELEMENT_MODE_PVP_SPECTATOR = 1024,
	HUD_ELEMENT_MODE_PVP_ROUND_TRANSITION = 2048,
	HUD_ELEMENT_MODE_TARGETSTRIKE = 4096,
	HUD_ELEMENT_MODE_DEAD = 8192,
	HUD_ELEMENT_MODE_TUTORIAL = 16384,
	HUD_ELEMENT_MODE_PVP_END_OF_MATCH = 32768,
	HUD_ELEMENT_MODE_BACKDROP = 65536,
	HUD_ELEMENT_MODE_IN_WORLD_MENU = 131072,
	HUD_ELEMENT_MODE_MASTER_LEVEL = 262144,
	HUD_ELEMENT_MODE_DISABLE_PAUSE = 524288,
	HUD_ELEMENT_MODE_PVP_DEAD = 1048576,
	HUD_ELEMENT_MODE_TUTORIAL_POPUP = 2097152,
	HUD_ELEMENT_MODE_SLAYER_VERSUS = 4194304,
	HUD_ELEMENT_MODE_HORDE = 8388608,
	HUD_ELEMENT_MODE_TEXT_CHAT = 16777216,
	HUD_ELEMENT_MODE_ANY = 2147483647
};


enum fxCondition_t : int32_t {
	FX_NONE = 0,
	FX_EXPLOSIVE_ARMED = 1,
	FX_EXPLOSIVE_UNARMED = 2,
	FX_VEH_START_BOOST = 3,
	FX_VEH_STOP_BOOST = 4,
	FX_VEH_START_BOOST2 = 5,
	FX_VEH_STOP_BOOST2 = 6,
	FX_VEH_START_BOOST3 = 7,
	FX_VEH_STOP_BOOST3 = 8,
	FX_VEH_START_PUSH = 9,
	FX_VEH_STOP_PUSH = 10,
	FX_VEH_START_MONSTERBASHER = 11,
	FX_VEH_STOP_MONSTERBASHER = 12,
	FX_CAPTURE_SKULL = 13,
	FX_START_DAMAGE_LEVEL_1 = 14,
	FX_STOP_DAMAGE_LEVEL_1 = 15,
	FX_START_DAMAGE_LEVEL_2 = 16,
	FX_STOP_DAMAGE_LEVEL_2 = 17,
	FX_START_DAMAGE_LEVEL_3 = 18,
	FX_STOP_DAMAGE_LEVEL_3 = 19,
	FX_START_DAMAGE_LEVEL_4 = 20,
	FX_STOP_DAMAGE_LEVEL_4 = 21,
	FX_EXTRA_DAMAGE = 22,
	FX_PAIN_INTERUPT = 23,
	FX_PAIN_INTERRUPT_END = 24,
	FX_WEAPON_FIREMODE_PRIMARY = 25,
	FX_WEAPON_FIREMODE_SECONDARY = 26,
	FX_WEAPON_TRIGGER_PULL = 27,
	FX_WEAPON_TRIGGER_RELEASE = 28,
	FX_WEAPON_START_FIRE = 29,
	FX_WEAPON_START_FIRE_CHARGED = 30,
	FX_WEAPON_START_FIRE_LEFT = 31,
	FX_WEAPON_START_FIRE_RIGHT = 32,
	FX_WEAPON_START_FIRE_LEFT_ALT = 33,
	FX_WEAPON_START_FIRE_RIGHT_ALT = 34,
	FX_WEAPON_START_FIRE_LEFT_DAMAGED = 35,
	FX_WEAPON_START_FIRE_RIGHT_DAMAGED = 36,
	FX_WEAPON_START_THIRD_PERSON_FIRE = 37,
	FX_WEAPON_START_FIRE_QUAD = 38,
	FX_WEAPON_START_FIRE_QUAD_LEFT = 39,
	FX_WEAPON_STOP_FIRE = 40,
	FX_WEAPON_STOP_FIRE_LEFT = 41,
	FX_WEAPON_STOP_FIRE_RIGHT = 42,
	FX_WEAPON_STOP_FIRE_LEFT_ALT = 43,
	FX_WEAPON_STOP_FIRE_RIGHT_ALT = 44,
	FX_WEAPON_STOP_FIRE_LEFT_DAMAGED = 45,
	FX_WEAPON_STOP_FIRE_RIGHT_DAMAGED = 46,
	FX_WEAPON_START_RIBBON = 47,
	FX_WEAPON_STOP_RIBBON = 48,
	FX_WEAPON_FIRE_HIT = 49,
	FX_WEAPON_FIRE_MISS = 50,
	FX_WEAPON_START_SHELL_EJECT = 51,
	FX_WEAPON_DRYFIRE = 52,
	FX_WEAPON_BEGIN_RAISE = 53,
	FX_WEAPON_BEGIN_LOWER = 54,
	FX_WEAPON_RELOAD = 55,
	FX_WEAPON_UNLOAD_AMMO = 56,
	FX_WEAPON_CHAMBER_AMMO = 57,
	FX_WEAPON_HAS_AMMO = 58,
	FX_WEAPON_LOW_AMMO = 59,
	FX_WEAPON_NO_AMMO = 60,
	FX_WEAPON_BURST_FIRE_1 = 61,
	FX_WEAPON_BURST_FIRE_2 = 62,
	FX_WEAPON_BURST_FIRE_3 = 63,
	FX_WEAPON_BURST_FIRE_4 = 64,
	FX_WEAPON_BURST_FIRE_5 = 65,
	FX_WEAPON_BURST_FIRE_6 = 66,
	FX_WEAPON_BURST_FIRE_7 = 67,
	FX_WEAPON_BURST_FIRE_8 = 68,
	FX_WEAPON_BURST_FIRE_9 = 69,
	FX_WEAPON_BURST_FIRE_10 = 70,
	FX_WEAPON_BURST_FIRE_11 = 71,
	FX_WEAPON_BURST_FIRE_12 = 72,
	FX_WEAPON_START_ZOOM = 73,
	FX_WEAPON_END_ZOOM = 74,
	FX_WEAPON_CHARGE_READY = 75,
	FX_WEAPON_CHARGE_START = 76,
	FX_WEAPON_CHARGE_STOP = 77,
	FX_WEAPON_CHARGE_FULL = 78,
	FX_WEAPON_CHARGE_FULL_ONCE = 79,
	FX_WEAPON_CHARGE_PARM = 80,
	FX_WEAPON_CHARGE_CHARGING = 81,
	FX_WEAPON_CHARGE_ITEM_VALUE_INT = 82,
	FX_WEAPON_CHARGE_ITEM_VALUE_0 = 83,
	FX_WEAPON_CHARGE_ITEM_VALUE_1 = 84,
	FX_WEAPON_CHARGE_ITEM_VALUE_2 = 85,
	FX_WEAPON_CHARGE_ITEM_VALUE_3 = 86,
	FX_WEAPON_CHARGE_ITEM_VALUE_4 = 87,
	FX_WEAPON_CHARGE_ITEM_VALUE_5 = 88,
	FX_WEAPON_CHARGE_ITEM_VALUE_6 = 89,
	FX_WEAPON_CHARGE_ITEM_VALUE_7 = 90,
	FX_WEAPON_CHARGE_ITEM_VALUE_8 = 91,
	FX_WEAPON_CHARGE_ITEM_VALUE_9 = 92,
	FX_WEAPON_CHARGE_ITEM_VALUE_10 = 93,
	FX_WEAPON_CHARGE_ITEM_VALUE_11 = 94,
	FX_WEAPON_CHARGE_ITEM_VALUE_12 = 95,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_0 = 96,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_1 = 97,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_2 = 98,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_3 = 99,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_4 = 100,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_5 = 101,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_6 = 102,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_7 = 103,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_8 = 104,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_9 = 105,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_10 = 106,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_11 = 107,
	FX_WEAPON_CHARGE_FULL_ITEM_VALUE_12 = 108,
	FX_WEAPON_CHARGE_PERCENT_0 = 109,
	FX_WEAPON_CHARGE_PERCENT_10 = 110,
	FX_WEAPON_CHARGE_PERCENT_20 = 111,
	FX_WEAPON_CHARGE_PERCENT_30 = 112,
	FX_WEAPON_CHARGE_PERCENT_40 = 113,
	FX_WEAPON_CHARGE_PERCENT_50 = 114,
	FX_WEAPON_CHARGE_PERCENT_60 = 115,
	FX_WEAPON_CHARGE_PERCENT_70 = 116,
	FX_WEAPON_CHARGE_PERCENT_80 = 117,
	FX_WEAPON_CHARGE_PERCENT_90 = 118,
	FX_WEAPON_CHARGE_PERCENT_100 = 119,
	FX_WEAPON_CHARGE_PERCENT_25 = 120,
	FX_WEAPON_CHARGE_PERCENT_75 = 121,
	FX_WEAPON_CHARGE_DISCHARGE = 122,
	FX_WEAPON_CHARGE_DISCHARGE_FULL = 123,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_0 = 124,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_10 = 125,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_20 = 126,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_30 = 127,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_40 = 128,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_50 = 129,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_60 = 130,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_70 = 131,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_80 = 132,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_90 = 133,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_100 = 134,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_25 = 135,
	FX_WEAPON_CHARGE_COOLDOWN_PERCENT_75 = 136,
	FX_WEAPON_MOD_ACTIVATE = 137,
	FX_WEAPON_MOD_DEACTIVATE = 138,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_1 = 139,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_2 = 140,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_3 = 141,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_4 = 142,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_5 = 143,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_6 = 144,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_7 = 145,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_8 = 146,
	FX_WEAPON_MASTERED_BURST_FIRE_REFILL_9 = 147,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_1 = 148,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_2 = 149,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_3 = 150,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_4 = 151,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_5 = 152,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_6 = 153,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_7 = 154,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_8 = 155,
	FX_WEAPON_MASTERED_BURST_FIRE_EMPTY_9 = 156,
	FX_WEAPON_BARREL_SPIN = 157,
	FX_WEAPON_TARGET_ACQUIRING = 158,
	FX_WEAPON_TARGET_LOCKED = 159,
	FX_WEAPON_TARGET_LOCK_RELEASED = 160,
	FX_WEAPON_TARGET_LOCK_BROKEN = 161,
	FX_WEAPON_NO_MICROWAVE_TARGET = 162,
	FX_WEAPON_NO_MICROWAVE_TARGET_STOP = 163,
	FX_WEAPON_WARNING_START = 164,
	FX_WEAPON_WARNING_STOP = 165,
	FX_WEAPON_SEARCHING_START = 166,
	FX_WEAPON_SEARCHING_STOP = 167,
	FX_WEAPON_MEATHOOK_RETURN = 168,
	FX_WEAPON_SUPERCHARGE_START = 169,
	FX_WEAPON_SUPERCHARGE_STOP = 170,
	FX_HOLOGRAM_START = 171,
	FX_LASER_ON = 172,
	FX_LASER_OFF = 173,
	FX_SAVING_THROW_START = 174,
	FX_SAVING_THROW_END = 175,
	FX_BFG_POWER_DOWN = 176,
	FX_PROJECTILE_LAUNCH = 177,
	FX_PROJECTILE_TRAIL = 178,
	FX_PROJECTILE_BREAK = 179,
	FX_PROJECTILE_STOP = 180,
	FX_PROJECTILE_STUCK = 181,
	FX_PROJECTILE_STUCK_WEAK_POINT = 182,
	FX_PROJECTILE_EXPLODE = 183,
	FX_PROJECTILE_EXPLODE_LOCAL = 184,
	FX_PROJECTILE_EXPLODE_ALT = 185,
	FX_PROJECTILE_EXPLODE_ALT_2 = 186,
	FX_PROJECTILE_EXPLODE_PIECE_1 = 187,
	FX_PROJECTILE_EXPLODE_PIECE_2 = 188,
	FX_PROJECTILE_EXPLODE_PIECE_3 = 189,
	FX_PROJECTILE_EXPLODE_PIECE_4 = 190,
	FX_PROJECTILE_EXPLODE_DEFAULT = 191,
	FX_PROJECTILE_EXPLODE_BLOOD_POOL = 192,
	FX_PROJECTILE_EXPLODE_SLUDGE = 193,
	FX_PROJECTILE_EXPLODE_DIRT = 194,
	FX_PROJECTILE_EXPLODE_PLASTIC = 195,
	FX_PROJECTILE_EXPLODE_GLASS = 196,
	FX_PROJECTILE_EXPLODE_WATER = 197,
	FX_PROJECTILE_EXPLODE_WOOD = 198,
	FX_PROJECTILE_EXPLODE_STONE = 199,
	FX_PROJECTILE_EXPLODE_METAL = 200,
	FX_PROJECTILE_EXPLODE_AIR = 201,
	FX_PROJECTILE_EXPLODE_ASPHALT = 202,
	FX_PROJECTILE_EXPLODE_FROM_DETONATE_SURF = 203,
	FX_PROJECTILE_EXPLODE_BOSS = 204,
	FX_PROJECTILE_EXPLODE_WEAK_POINT = 205,
	FX_PROJECTILE_COLLIDE = 206,
	FX_PROJECTILE_DEPLOY = 207,
	FX_PROJECTILE_DIRECT_DAMAGE = 208,
	FX_PROJECTILE_PROXIMITY_FLARE_START = 209,
	FX_PROJECTILE_PROXIMITY_FLARE_END = 210,
	FX_PROJECTILE_ENTER_SOLID = 211,
	FX_PROJECTILE_EXIT_SOLID = 212,
	FX_PROJECTILE_AI_FALTER = 213,
	FX_AI_HEADSHOT = 214,
	FX_AI_HEADSHOT_BONUS = 215,
	FX_AI_DMG_BLOOD = 216,
	FX_AI_DMG_TANK = 217,
	FX_AI_START_DMG_ELECTROCUTE = 218,
	FX_AI_STOP_DMG_ELECTROCUTE = 219,
	FX_AI_IMPALED = 220,
	FX_AI_BFG_EXPLODE = 221,
	FX_AI_FREEZE = 222,
	FX_AI_UNFREEZE = 223,
	FX_PENETRATING_SHOT = 224,
	FX_PENETRATING_SHOT_2 = 225,
	FX_PENETRATING_SHOT_3 = 226,
	FX_PENETRATING_SHOT_4 = 227,
	FX_PENETRATING_SHOT_5 = 228,
	FX_PROP_SPAWN = 229,
	FX_PROP_PICKUP = 230,
	FX_PROP_USE = 231,
	FX_PROP_STOP_USE = 232,
	FX_PROP_ACTIVATE = 233,
	FX_PROP_BREAK = 234,
	FX_PROP_EXPLODE = 235,
	FX_PROP_DAMAGE = 236,
	FX_ZIPLINE_SPEED_SLOW = 237,
	FX_ZIPLINE_SPEED_MED = 238,
	FX_ZIPLINE_SPEED_FAST = 239,
	FX_ZIPLINE_SPEED_LUDICROUS = 240,
	FX_ZIPLINE_SPEED_SLOW_REVERSE = 241,
	FX_ZIPLINE_SPEED_MED_REVERSE = 242,
	FX_ZIPLINE_SPEED_FAST_REVERSE = 243,
	FX_ZIPLINE_SPEED_LUDICROUS_REVERSE = 244,
	FX_START_ON_FIRE = 245,
	FX_STOP_ON_FIRE = 246,
	FX_START_DEATH_1 = 247,
	FX_START_DEATH_2 = 248,
	FX_START_DEATH_3 = 249,
	FX_START_DEATH_4 = 250,
	FX_START_DEATH_BFG = 251,
	FX_START_DEATH_SIGNATURE = 252,
	FX_START_DEATH_LAVA = 253,
	FX_START_DEATH_EXPLODE = 254,
	FX_PARRY_ACTIVE = 255,
	FX_PARRY_ACTIVE_UPGRADED = 256,
	FX_PARRY_SUCCESS = 257,
	FX_PARRY_SUCCESS_UPGRADED = 258,
	FX_HAZMAT_OFF = 259,
	FX_HAZMAT_0_25 = 260,
	FX_HAZMAT_26_50 = 261,
	FX_HAZMAT_51_75 = 262,
	FX_HAZMAT_76_100 = 263,
	FX_OXYGEN_OFF = 264,
	FX_OXYGEN_0_25 = 265,
	FX_OXYGEN_26_50 = 266,
	FX_OXYGEN_51_75 = 267,
	FX_OXYGEN_76_100 = 268,
	FX_MODEL_SHOW_01 = 269,
	FX_MODEL_SHOW_02 = 270,
	FX_MODEL_SHOW_03 = 271,
	FX_MODEL_SHOW_04 = 272,
	FX_MODEL_SHOW_05 = 273,
	FX_MODEL_SHOW_06 = 274,
	FX_MODEL_SHOW_07 = 275,
	FX_MODEL_SHOW_08 = 276,
	FX_MODEL_SHOW_09 = 277,
	FX_MODEL_HIDE_01 = 278,
	FX_MODEL_HIDE_02 = 279,
	FX_MODEL_HIDE_03 = 280,
	FX_MODEL_HIDE_04 = 281,
	FX_MODEL_HIDE_05 = 282,
	FX_MODEL_HIDE_06 = 283,
	FX_MODEL_HIDE_07 = 284,
	FX_MODEL_HIDE_08 = 285,
	FX_MODEL_HIDE_09 = 286,
	FX_CINEMATIC_1 = 287,
	FX_CINEMATIC_2 = 288,
	FX_CINEMATIC_3 = 289,
	FX_CINEMATIC_4 = 290,
	FX_CINEMATIC_5 = 291,
	FX_CINEMATIC_6 = 292,
	FX_CINEMATIC_7 = 293,
	FX_CINEMATIC_8 = 294,
	FX_CINEMATIC_9 = 295,
	FX_CINEMATIC_10 = 296,
	FX_CINEMATIC_11 = 297,
	FX_CINEMATIC_12 = 298,
	FX_CINEMATIC_13 = 299,
	FX_CINEMATIC_14 = 300,
	FX_CINEMATIC_15 = 301,
	FX_CINEMATIC_16 = 302,
	FX_CINEMATIC_17 = 303,
	FX_CINEMATIC_18 = 304,
	FX_CINEMATIC_19 = 305,
	FX_CINEMATIC_20 = 306,
	FX_CINEMATIC_MP_1 = 307,
	FX_CINEMATIC_MP_2 = 308,
	FX_CINEMATIC_MP_3 = 309,
	FX_CINEMATIC_MP_4 = 310,
	FX_CINEMATIC_MP_5 = 311,
	FX_CINEMATIC_MP_6 = 312,
	FX_CINEMATIC_MP_7 = 313,
	FX_CINEMATIC_MP_8 = 314,
	FX_CINEMATIC_MP_9 = 315,
	FX_CINEMATIC_MP_10 = 316,
	FX_CINEMATIC_MP_11 = 317,
	FX_CINEMATIC_MP_12 = 318,
	FX_CINEMATIC_MP_13 = 319,
	FX_CINEMATIC_MP_14 = 320,
	FX_CINEMATIC_MP_15 = 321,
	FX_CINEMATIC_MP_16 = 322,
	FX_CINEMATIC_MP_17 = 323,
	FX_CINEMATIC_MP_18 = 324,
	FX_CINEMATIC_MP_19 = 325,
	FX_CINEMATIC_MP_20 = 326,
	FX_MELEE_1_START = 327,
	FX_MELEE_2_START = 328,
	FX_MELEE_3_START = 329,
	FX_MELEE_1_STOP = 330,
	FX_MELEE_2_STOP = 331,
	FX_MELEE_3_STOP = 332,
	FX_STOP_LEFT_HAND_FX = 333,
	FX_STOP_RIGHT_HAND_FX = 334,
	FX_PLAYER_VIEW_HIT = 335,
	FX_ECHO_SCAN_START = 336,
	FX_POSSESSED = 337,
	FX_POSSESSED_CANCEL = 338,
	FX_PLASMA_STUN = 339,
	FX_ICE_BOMB_STUN = 340,
	FX_ICE_BOMB_STUN_STOP = 341,
	FX_ICE_BOMB_STUN_UPGRADED_START = 342,
	FX_ICE_BOMB_STUN_UPGRADED_STOP = 343,
	FX_ICE_BOMB_STUN_OVER = 344,
	FX_ICE_BOMB_STUN_OVER_UPGRADED = 345,
	FX_BFG_STUN = 346,
	FX_EQUIPMENT_PULL_STUN = 347,
	FX_HEAD_SHOT = 348,
	FX_HEAD_SHOT_MASTERY_SHOCKWAVE = 349,
	FX_DAMAGE_TAKEN = 350,
	FX_DAMAGE_SHRAPNEL = 351,
	FX_DAMAGE_SPLASH = 352,
	FX_PAIN_STAGGER_STARTED = 353,
	FX_PAIN_FALTER_STARTED = 354,
	FX_START_SLOWED_FALTER_PAIN = 355,
	FX_STOP_SLOWED_FALTER_PAIN = 356,
	FX_WEAPON_CHAINSAW_START = 357,
	FX_WEAPON_CHAINSAW_RUN = 358,
	FX_WEAPON_CHAINSAW_REV = 359,
	FX_WEAPON_CHAINSAW_CUT = 360,
	FX_WEAPON_CHAINSAW_SURGE = 361,
	FX_WEAPON_CHAINSAW_CUT_ENDED = 362,
	FX_WEAPON_CHAINSAW_CUTTING_FLESH = 363,
	FX_WEAPON_CHAINSAW_CUTTING_FLESH_ENDED = 364,
	FX_WEAPON_OVERHEAT_PERCENT_0 = 365,
	FX_WEAPON_OVERHEAT_PERCENT_25 = 366,
	FX_WEAPON_OVERHEAT_PERCENT_50 = 367,
	FX_WEAPON_OVERHEAT_PERCENT_75 = 368,
	FX_WEAPON_OVERHEAT_PERCENT_100 = 369,
	FX_MANCUBUS_STEAM_BLAST_START = 370,
	FX_MANCUBUS_FLAMES_START = 371,
	FX_MANCUBUS_FLAMES_STOP = 372,
	FX_MANCUBUS_FLAMES_ROLLOFF_START = 373,
	FX_MANCUBUS_FLAMES_ROLLOFF_STOP = 374,
	FX_DISSOLVE_IN = 375,
	FX_DISSOLVE_OUT = 376,
	FX_DISSOLVE_OUT_FOREVER = 377,
	FX_SYNCED_MELEE_START = 378,
	FX_SYNCED_MELEE_END = 379,
	FX_SYNCED_MELEE_FOCAL_ON = 380,
	FX_SYNCED_MELEE_FOCAL_OFF = 381,
	FX_SYNCED_MELEE_ATTACK_PROMPT_ON = 382,
	FX_SYNCED_MELEE_ATTACK_PROMPT_OFF = 383,
	FX_OUTLINE_ON = 384,
	FX_OUTLINE_OFF = 385,
	FX_ABILITY_ACTIVATION_SUCCESS = 386,
	FX_ABILITY_ACTIVATION_END = 387,
	FX_ABILITY_ACTIVATION_SUCCESS_LOCAL = 388,
	FX_ABILITY_ACTIVATION_END_LOCAL = 389,
	FX_SUMMON_DEMON_IMP = 390,
	FX_PLAYER_WATER_ENTER = 391,
	FX_PLAYER_WATER_SWIM = 392,
	FX_PLAYER_WATER_EXIT = 393,
	FX_PLAYER_MOVEMENT_STARTED_SPRINTING = 394,
	FX_PLAYER_MOVEMENT_STOPPED_SPRINTING = 395,
	FX_PLAYER_MOVEMENT_JUMPED = 396,
	FX_PLAYER_MOVEMENT_LANDED = 397,
	FX_PLAYER_MOVEMENT_CROUCHED = 398,
	FX_PLAYER_MOVEMENT_UNCROUCHED = 399,
	FX_PLAYER_BERSERK_START = 400,
	FX_PLAYER_BERSERK_STOP = 401,
	FX_PORTAL_OPEN = 402,
	FX_PORTAL_CLOSE = 403,
	FX_GORE_SPRAY_1 = 404,
	FX_DESTROYER_BLADE_GORE_SPRAY_1 = 405,
	FX_MELEE_TRACE_IMPACT_START = 406,
	FX_MELEE_TRACE_IMPACT_END = 407,
	FX_PLAYERDAMAGE_BULLET_CENTER = 408,
	FX_PLAYERDAMAGE_BULLET_SIDE = 409,
	FX_PLAYERDAMAGE_MELEE_CENTER = 410,
	FX_PLAYERDAMAGE_MELEE_SIDE = 411,
	FX_PLAYERDAMAGE_EXPLOSIVE_CENTER = 412,
	FX_PLAYERDAMAGE_EXPLOSIVE_SIDE = 413,
	FX_PLAYERDAMAGE_PLASMA_CENTER = 414,
	FX_PLAYERDAMAGE_PLASMA_SIDE = 415,
	FX_PLAYERDAMAGE_FIRE_CENTER = 416,
	FX_PLAYERDAMAGE_FIRE_SIDE = 417,
	FX_PLAYERDAMAGE_ELECTRIC_CENTER = 418,
	FX_PLAYERDAMAGE_ELECTRIC_SIDE = 419,
	FX_PLAYERDAMAGE_XENON_CENTER = 420,
	FX_PLAYERDAMAGE_XENON_SIDE = 421,
	FX_PLAYERDAMAGE_RADIATION_CENTER = 422,
	FX_PLAYERDAMAGE_RADIATION_SIDE = 423,
	FX_PLAYERDAMAGE_RADIATION_WARNING = 424,
	FX_PLAYERDAMAGE_RADIATION_DAMAGE = 425,
	FX_PLAYERDAMAGE_BFG_CENTER = 426,
	FX_PLAYERDAMAGE_BFG_SIDE = 427,
	FX_PLAYERDAMAGE_WOLF_BITE_CENTER = 428,
	FX_PLAYERDAMAGE_WOLF_BITE_SIDE = 429,
	FX_PLAYERDAMAGE_BERSERK_SLASH_CENTER = 430,
	FX_PLAYERDAMAGE_BERSERK_SLASH_SIDE = 431,
	FX_PLAYER_DAMAGE_SIPHON_START = 432,
	FX_PLAYER_DAMAGE_SIPHON_STOP = 433,
	FX_PLAYER_HEAL_SIPHON_START = 434,
	FX_PLAYER_HEAL_SIPHON_STOP = 435,
	FX_PLAYER_DAMAGE_SIPHON_LOCAL_PLAYER_START = 436,
	FX_PLAYER_DAMAGE_SIPHON_LOCAL_PLAYER_STOP = 437,
	FX_PLAYER_DAMAGE_TESLA_LOCAL_PLAYER_START = 438,
	FX_PLAYER_DAMAGE_TESLA_LOCAL_PLAYER_STOP = 439,
	FX_PLAYER_DAMAGE_SLUDGE = 440,
	FX_PLAYER_DAMAGE_PLASMA_PUDDLE = 441,
	FX_PLAYER_DAMAGE_FLAMING_BARREL = 442,
	FX_PLAYER_DAMAGE_RADIATION_BARREL = 443,
	FX_PLAYER_DAMAGE_SCREENCRACK_LIGHT_START = 444,
	FX_PLAYER_DAMAGE_SCREENCRACK_MEDIUM_START = 445,
	FX_PLAYER_DAMAGE_SCREENCRACK_HEAVY_START = 446,
	FX_PLAYER_DAMAGE_SCREENCRACK_LIGHT_STOP = 447,
	FX_PLAYER_DAMAGE_SCREENCRACK_MEDIUM_STOP = 448,
	FX_PLAYER_DAMAGE_SCREENCRACK_HEAVY_STOP = 449,
	FX_PLAYER_DAMAGE_BLOOD_1 = 450,
	FX_PLAYER_DAMAGE_BLOOD_2 = 451,
	FX_PLAYER_DAMAGE_BLOOD_3 = 452,
	FX_PLAYER_DAMAGE_BLOOD_4 = 453,
	FX_PLAYER_DAMAGE_BLOOD_5 = 454,
	FX_PLAYER_DAMAGE_BLOOD_6 = 455,
	FX_PLAYER_DAMAGE_BLOOD_STOP = 456,
	FX_PLAYER_DAMAGE_BLOOD_MEDIUM_CORNERS = 457,
	FX_PLAYER_DAMAGE_BLOOD_HEAVY_CORNERS = 458,
	FX_PLAYER_DAMAGE_FLARE_START = 459,
	FX_PLAYER_DAMAGE_FLARE_STOP = 460,
	FX_PLAYER_DAMAGE_CACODEMON_BILE = 461,
	FX_PLAYER_KILLED_PINKY_BULLRUSH = 462,
	FX_PLAYER_FRIENDLY_SIPHON_START = 463,
	FX_PLAYER_HOSTILE_SIPHON_START = 464,
	FX_PLAYER_GROUND_SLAM = 465,
	FX_PLAYER_GROUND_SLAM_SUPER = 466,
	FX_HANDS_SLAM_START = 467,
	FX_HANDS_SLAM_START_SUPER = 468,
	FX_PLAYERDAMAGE_LIGHT_FROM_N = 469,
	FX_PLAYERDAMAGE_LIGHT_FROM_NE = 470,
	FX_PLAYERDAMAGE_LIGHT_FROM_E = 471,
	FX_PLAYERDAMAGE_LIGHT_FROM_SE = 472,
	FX_PLAYERDAMAGE_LIGHT_FROM_S = 473,
	FX_PLAYERDAMAGE_LIGHT_FROM_SW = 474,
	FX_PLAYERDAMAGE_LIGHT_FROM_W = 475,
	FX_PLAYERDAMAGE_LIGHT_FROM_NW = 476,
	FX_PLAYERDAMAGE_HEAVY_FROM_N = 477,
	FX_PLAYERDAMAGE_HEAVY_FROM_NE = 478,
	FX_PLAYERDAMAGE_HEAVY_FROM_E = 479,
	FX_PLAYERDAMAGE_HEAVY_FROM_SE = 480,
	FX_PLAYERDAMAGE_HEAVY_FROM_S = 481,
	FX_PLAYERDAMAGE_HEAVY_FROM_SW = 482,
	FX_PLAYERDAMAGE_HEAVY_FROM_W = 483,
	FX_PLAYERDAMAGE_HEAVY_FROM_NW = 484,
	FX_PLAYERDAMAGE_DEEP_WATER_CENTER = 485,
	FX_PLAYERDAMAGE_DEEP_WATER_SIDE = 486,
	FX_RESURRECT_START = 487,
	FX_RESURRECT_STOP = 488,
	FX_RESURRECT_FAIL = 489,
	FX_SPAWN_START = 490,
	FX_SPAWN_STOP = 491,
	FX_SUMMON_START = 492,
	FX_SUMMON_STOP = 493,
	FX_SUMMON_FAIL = 494,
	FX_DESPAWN_START = 495,
	FX_DESPAWN_STOP = 496,
	FX_STATUS_START = 497,
	FX_STATUS_END = 498,
	FX_STATUS_LOCAL_START = 499,
	FX_STATUS_LOCAL_END = 500,
	FX_PLAYER_STATUS1_START = 501,
	FX_PLAYER_STATUS1_STOP = 502,
	FX_PLAYER_STATUS2_START = 503,
	FX_PLAYER_STATUS2_ALT_1_START = 504,
	FX_PLAYER_STATUS2_ALT_2_START = 505,
	FX_PLAYER_STATUS2_ALT_3_START = 506,
	FX_PLAYER_STATUS2_STOP = 507,
	FX_PLAYER_STATUS3_START = 508,
	FX_PLAYER_STATUS3_STOP = 509,
	FX_PLAYER_STATUS4_START = 510,
	FX_PLAYER_STATUS4_STOP = 511,
	FX_PLAYER_STATUS5_START = 512,
	FX_PLAYER_STATUS5_STOP = 513,
	FX_PLAYER_SPAWN = 514,
	FX_PLAYER_ELIMINATION = 515,
	FX_PLAYER_FAST_TRAVEL_START = 516,
	FX_PLAYER_FAST_TRAVEL_LOOP = 517,
	FX_PLAYER_FAST_TRAVEL_STOP = 518,
	FX_HEALTH_LOW = 519,
	FX_HEALTH_REALLY_LOW = 520,
	FX_HEALTH_OKAY = 521,
	FX_TELEPORT_ENTER = 522,
	FX_TELEPORT_EXIT = 523,
	FX_TELEPORT_COOLDOWN_START = 524,
	FX_TELEPORT_COOLDOWN_END = 525,
	FX_DETONATE_START = 526,
	FX_DETONATE_STOP = 527,
	FX_BURN_1_START = 528,
	FX_BURN_1_STOP = 529,
	FX_BURN_2_START = 530,
	FX_BURN_2_STOP = 531,
	FX_BURN_3_START = 532,
	FX_BURN_3_STOP = 533,
	FX_BURN_ACQUIRE = 534,
	FX_BURN_LOST = 535,
	FX_SHIELD_ACTIVATE = 536,
	FX_SHIELD_SPAWN_ACTIVATE = 537,
	FX_SHIELD_LOW = 538,
	FX_SHIELD_POP = 539,
	FX_SHIELD_HIT_HEAD = 540,
	FX_SHIELD_HIT_BODY = 541,
	FX_SHIELD_HIT_LEFTARM = 542,
	FX_SHIELD_HIT_RIGHTARM = 543,
	FX_SHIELD_HIT_LEFTLEG = 544,
	FX_SHIELD_HIT_RIGHTLEG = 545,
	FX_SHIELD_DEACTIVATE = 546,
	FX_SHIELD_DEACTIVATE_MAX_DAMAGE = 547,
	FX_SHIELD_DEACTIVATE_MAX_DURATION = 548,
	FX_SHIELD_IMPACT = 549,
	FX_SHIELD_REFLECT = 550,
	FX_SHIELD_BREAK = 551,
	FX_SHIELD_BREAK_WORLD = 552,
	FX_SHIELD_EXPLODE = 553,
	FX_SHIELD_DAMAGED = 554,
	FX_SHIELD_CONTACT_DAMAGE = 555,
	FX_SHIELD_HEALTH_PARM = 556,
	FX_SHIELD_READY_TO_FIRE = 557,
	FX_SHIELD_INVULNERABLE_START = 558,
	FX_SHIELD_INVULNERABLE_STOP = 559,
	FX_REPAIR_START = 560,
	FX_REPAIR_STOP = 561,
	FX_POWER_UP_CHARGING = 562,
	FX_POWER_UP_INCOMING = 563,
	FX_POWER_UP_IDLE = 564,
	FX_POWER_UP_PICK_UP = 565,
	FX_POWER_UP_PICK_UP_DROP = 566,
	FX_POWER_UP_START = 567,
	FX_POWER_UP_STOP = 568,
	FX_POWER_DOWN_START = 569,
	FX_POWER_DOWN_STOP = 570,
	FX_LOCKED_START = 571,
	FX_LOCKED_STOP = 572,
	FX_UNLOCKED_START = 573,
	FX_UNLOCKED_STOP = 574,
	FX_DSACTIVE_START = 575,
	FX_DSACTIVE_STOP = 576,
	FX_DSINACTIVE_START = 577,
	FX_DSINACTIVE_STOP = 578,
	FX_SCAN_START = 579,
	FX_SCAN_STOP = 580,
	FX_WARNING_START = 581,
	FX_WARNING_STOP = 582,
	FX_RUNE_BLOOD_FUELED = 583,
	FX_RUNE_SEEK_DESTROY = 584,
	FX_RUNE_AMMO_START = 585,
	FX_RUNE_AMMO_STOP = 586,
	FX_FOCUS_START = 587,
	FX_FOCUS_END = 588,
	FX_FRIENDLY_LOOP_START = 589,
	FX_FRIENDLY_LOOP_STOP = 590,
	FX_HOSTILE_LOOP_START = 591,
	FX_HOSTILE_LOOP_STOP = 592,
	FX_INVISIBILITY_START = 593,
	FX_INVISIBILITY_STOP = 594,
	FX_GENERICSTATE_1_START = 595,
	FX_GENERICSTATE_1_STOP = 596,
	FX_GENERICSTATE_2_START = 597,
	FX_GENERICSTATE_2_STOP = 598,
	FX_GENERICSTATE_3_START = 599,
	FX_GENERICSTATE_3_STOP = 600,
	FX_GENERICSTATE_4_START = 601,
	FX_GENERICSTATE_4_STOP = 602,
	FX_DEMON_CRITHIT_1 = 603,
	FX_DEMON_CRITHIT_2 = 604,
	FX_DEMON_START_LIGHT = 605,
	FX_DEMON_STOP_LIGHT = 606,
	FX_DEMON_START_TIMEOUT = 607,
	FX_DEMON_TIMEOUT = 608,
	FX_DEMONPRESENCE_START = 609,
	FX_DEMONPRESENCE_STOP = 610,
	FX_PROWLER_POUNCE_ENTER = 611,
	FX_PROWLER_POUNCE_EXIT = 612,
	FX_PROWLER_ATTACH_RIGHT = 613,
	FX_PROWLER_ATTACH_LEFT = 614,
	FX_PROWLER_CURSE_START = 615,
	FX_PROWLER_CURSE_STOP = 616,
	FX_PERSONAL_TELEPORTER_ACTIVE = 617,
	FX_PERSONAL_TELEPORTER_DESTROY = 618,
	FX_PERSONAL_TELEPORTER_INCOMING = 619,
	FX_INVENTORY_BOOST_PACK_ACTIVATED = 620,
	FX_INVENTORY_BOOST_PACK_DEACTIVATED = 621,
	FX_INVENTORY_GIVE_OVER_TIME_ITEM = 622,
	FX_STEALTH_FIELD_ENTER = 623,
	FX_STEALTH_FIELD_EXIT = 624,
	FX_DOUBLE_JUMP_THIRD_PERSON = 625,
	FX_CHANGE_TEAM_NONE = 626,
	FX_CHANGE_TEAM_ONE = 627,
	FX_CHANGE_TEAM_TWO = 628,
	FX_CHANGE_TEAM_ENEMY = 629,
	FX_CHANGE_TEAM_ALLIED = 630,
	FX_CHANGE_TEAM_NEUTRAL = 631,
	FX_DESIGNSYS_STARTTOUCH = 632,
	FX_DESIGNSYS_ENDTOUCH = 633,
	FX_PICKUP_AMMO_CRATE = 634,
	FX_PICKUP_ARMOR_SMALL = 635,
	FX_PICKUP_ARMOR_MEDIUM = 636,
	FX_PICKUP_ARMOR_LARGE = 637,
	FX_PICKUP_HEALTH_SMALL = 638,
	FX_PICKUP_HEALTH_MEDIUM = 639,
	FX_PICKUP_HEALTH_LARGE = 640,
	FX_PICKUP_SOULDROP = 641,
	FX_PICKUP_GENERAL_STOP = 642,
	FX_PICKUP_RAD_SUIT = 643,
	FX_PICKUP_OXYGEN_SUIT = 644,
	FX_SOULDROP_IDLE = 645,
	FX_SOULDROP_SEEKING = 646,
	FX_FROZEN_MELEE_HIT_1 = 647,
	FX_FROZEN_MELEE_HIT_2 = 648,
	FX_FROZEN_MELEE_HIT_3 = 649,
	FX_FROZEN_MELEE_HIT_4 = 650,
	FX_FROZEN_MELEE_HIT_5 = 651,
	FX_FROZEN_MELEE_SHATTER = 652,
	FX_CHARGEBALL_SCORE_FRIENDLY = 653,
	FX_CHARGEBALL_SCORE_ENEMY = 654,
	FX_IN_DOMINATION_ZONE = 655,
	FX_GLORY_SHOCKWAVE = 656,
	FX_POWERUP_SHOCKWAVE = 657,
	FX_TELEFRAG = 658,
	FX_BOSS_START_SIDE_LASER_1 = 659,
	FX_BOSS_START_SIDE_LASER_2 = 660,
	FX_BOSS_START_SIDE_LASER_3 = 661,
	FX_BOSS_START_SIDE_LASER_4 = 662,
	FX_BOSS_START_SIDE_LASER_5 = 663,
	FX_BOSS_START_SIDE_LASER_6 = 664,
	FX_GL_SHIELD_LOAD = 665,
	FX_GL_SHIELD_SHOOT = 666,
	FX_GL_SHIELD_COLLIDE = 667,
	FX_GL_SHIELD_DESTROY = 668,
	FX_IOS_RIGHT_ARM_ARMOR_DEPLETED = 669,
	FX_IOS_RIGHT_FOREARM_ARMOR_DEPLETED = 670,
	FX_IOS_RIGHT_CHEST_ARMOR_DEPLETED = 671,
	FX_IOS_LEFT_ARM_ARMOR_DEPLETED = 672,
	FX_IOS_LEFT_FOREARM_ARMOR_DEPLETED = 673,
	FX_IOS_LEFT_CHEST_ARMOR_DEPLETED = 674,
	FX_IOS_HEAD_ARMOR_DEPLETED = 675,
	FX_IOS_TORSO_ARMOR_DEPLETED = 676,
	FX_GLORY_SPEED_BOOST = 677,
	FX_GLORY_SAVAGERY_START = 678,
	FX_GLORY_SAVAGERY_STOP = 679,
	FX_GLORY_SAVAGERY_START_END = 680,
	FX_GLORY_SAVAGERY_AOE_START_END = 681,
	FX_GLORY_SAVAGERY_AOE_LOW_HEALTH_START_END = 682,
	FX_GLORY_SAVAGERY_START_THIRD = 683,
	FX_GLORY_SAVAGERY_STOP_THIRD = 684,
	FX_GLORY_SAVAGERY_START_END_THIRD = 685,
	FX_GLORY_SAVAGERY_AOE_START_END_THIRD = 686,
	FX_GLORY_SAVAGERY_AOE_LOW_HEALTH_START_END_THIRD = 687,
	FX_CACODEMON_SNARE_REEL_IN = 688,
	FX_ARMOR_SWAP_HEAD = 689,
	FX_ARMOR_SWAP_TORSO = 690,
	FX_ARMOR_SWAP_LARM = 691,
	FX_ARMOR_SWAP_RARM = 692,
	FX_ARMOR_SWAP_LEGS = 693,
	FX_ARMOR_SWAP_FULL = 694,
	FX_DEMONPLAYER_SHIELD_START = 695,
	FX_DEMONPLAYER_SHIELD_END = 696,
	FX_DEMONPLAYER_SHIELD_BREAK = 697,
	FX_DEMONPLAYER_SHIELD_DISSIPATE = 698,
	FX_DEMONPLAYER_SHIELD_TAKE_DAMAGE = 699,
	FX_DEMONPLAYER_CACODEMON_IDLE_START = 700,
	FX_DEMONPLAYER_CACODEMON_IDLE_STOP = 701,
	FX_DEMONPLAYER_CACODEMON_CHARGE_START = 702,
	FX_DEMONPLAYER_CACODEMON_CHARGE_STOP = 703,
	FX_DEMONPLAYER_CACODEMON_SHOOT = 704,
	FX_DEMONPLAYER_CACODEMON_SNARE = 705,
	FX_DEMONPLAYER_PINKY_BULLRUSH_BEGIN = 706,
	FX_DEMONPLAYER_PINKY_BULLRUSH_END = 707,
	FX_DEMONPLAYER_PINKY_BULLRUSH_GIB = 708,
	FX_DEMONPLAYER_PINKY_CLOAK_SHIMMER_START = 709,
	FX_DEMONPLAYER_PINKY_CLOAK_SHIMMER_STOP = 710,
	FX_DEMONPLAYER_BOUNCEPAD_START = 711,
	FX_VOLUME_DOT_ENTER = 712,
	FX_VOLUME_DOT_EXIT = 713,
	FX_FIRE_MUZZLE_1 = 714,
	FX_FIRE_MUZZLE_2 = 715,
	FX_FIRE_MUZZLE_3 = 716,
	FX_FIRE_MUZZLE_4 = 717,
	FX_BUFF_GENERIC = 718,
	FX_BUFF_SPIRIT = 719,
	FX_BUFF_SCREECHER = 720,
	FX_SHOW_WEAPON_LEFT = 721,
	FX_SHOW_WEAPON_RIGHT = 722,
	FX_MAN_ON_FIRE = 723,
	FX_MAN_ON_FIRE_NAPALM = 724,
	FX_MAN_ON_FIRE_FLAME_ROUNDS = 725,
	FX_MAN_ON_FIRE_STOP = 726,
	FX_MAN_ON_FIRE_UPGRADED_START = 727,
	FX_MAN_ON_FIRE_UPGRADED_STOP = 728,
	FX_DESTRUCT_START = 729,
	FX_DESTRUCT_COLLIDE = 730,
	FX_DESTRUCT_END = 731,
	FX_DESTRUCT_SILLYGOOSE_START = 732,
	FX_DESTRUCT_SILLYGOOSE_END = 733,
	FX_DEMON_GHOSTING_FIRST_PERSON_START = 734,
	FX_DEMON_GHOSTING_FIRST_PERSON_STOP = 735,
	FX_DEMON_DISGUISED_FIRST_PERSON_START = 736,
	FX_DEMON_DISGUISED_FIRST_PERSON_STOP = 737,
	FX_DEMON_GHOSTING_THIRD_PERSON_START = 738,
	FX_DEMON_GHOSTING_THIRD_PERSON_STOP = 739,
	FX_DEMON_DISGUISED_THIRD_PERSON_START = 740,
	FX_DEMON_DISGUISED_THIRD_PERSON_STOP = 741,
	FX_REVENANT_AFTERBURNER_START = 742,
	FX_REVENANT_AFTERBURNER_END = 743,
	FX_REVENANT_BARRAGE_CHARGE = 744,
	FX_REVENANT_BARRAGE_FIRE = 745,
	FX_REVENANT_JETPACK_OVERHEAT_START = 746,
	FX_REVENANT_JETPACK_OVERHEAT_END = 747,
	FX_REVENANT_REDLINE_START = 748,
	FX_REVENANT_REDLINE_END = 749,
	FX_DASH_ACTIVATED = 750,
	FX_DASH_LOGIC_ENTITY_ACTIVATED = 751,
	FX_DASH_AI_COLLISION = 752,
	FX_CHAINGUN_DASH_SMASH = 753,
	FX_ARMORED_BARON_DEACTIVATE_GLOW = 754,
	FX_ARMORED_BARON_ARMOR_REGEN_WARNING_START = 755,
	FX_ARMORED_BARON_ARMOR_REGEN_WARNING_STOP = 756,
	FX_ARMORED_BARON_ARMOR_REGEN = 757,
	FX_ARMORED_BARON_ARMOR_REGEN_MACE = 758,
	FX_AI_HEALTH_REGEN_START = 759,
	FX_AI_HEALTH_REGEN_STOP = 760,
	FX_AI_HEALTH_GAIN = 761,
	FX_TRIGGER_ACTIVATED = 762,
	FX_TRIGGER_DEACTIVATED = 763,
	FX_TRIGGER_READY = 764,
	FX_SLAYER_PROTECTION = 765,
	FX_AI_FRIENDLY_FLAMES = 766,
	FX_AI_FRIENDLY_FLAMES_2 = 767,
	FX_AI_FRIENDLY_FLAMES_3 = 768,
	FX_AI_DESTRUCTIBLE_THRUSTER_LEFT = 769,
	FX_AI_DESTRUCTIBLE_THRUSTER_RIGHT = 770,
	FX_HAMMER_DEBUFF_START = 771,
	FX_HAMMER_DEBUFF_STOP = 772,
	FX_PLAYER_SLOWDOWN_BLOODANGEL = 773,
	FX_PLAYER_SLOWDOWN_BLOODANGEL_HAZARD = 774,
	FX_PLAYER_SLOWDOWN_SAMUR = 775,
	FX_PLAYER_SLOWDOWN_PUSPOD = 776,
	FX_PLAYER_CURSED_PROWLER_START = 777,
	FX_PLAYER_CURSED_PROWLER_STOP = 778,
	FX_STOP_PODIUM_EFFECTS = 779,
	FX_BERSERK_CHARGE_START = 780,
	FX_BERSERK_CHARGE_END = 781,
	FX_HORDE_TIMER_STAGE_0_START = 782,
	FX_HORDE_TIMER_STAGE_0_STOP = 783,
	FX_HORDE_TIMER_STAGE_1_START = 784,
	FX_HORDE_TIMER_STAGE_1_STOP = 785,
	FX_HORDE_TIMER_STAGE_2_START = 786,
	FX_HORDE_TIMER_STAGE_2_STOP = 787,
	FX_MAX_CONDITIONS = 788
};


enum idDeclWeapon_weaponSelectionGroup_t : int32_t {
	WEAPONSELECTIONGROUP_NONE = -1,
	WEAPONSELECTIONGROUP_0 = 0,
	WEAPONSELECTIONGROUP_1 = 1,
	WEAPONSELECTIONGROUP_2 = 2,
	WEAPONSELECTIONGROUP_3 = 3,
	WEAPONSELECTIONGROUP_4 = 4,
	WEAPONSELECTIONGROUP_5 = 5,
	WEAPONSELECTIONGROUP_6 = 6,
	WEAPONSELECTIONGROUP_7 = 7,
	WEAPONSELECTIONGROUP_8 = 8,
	WEAPONSELECTIONGROUP_9 = 9,
	WEAPONSELECTIONGROUP_MAX = 10
};


enum idDeclWeapon_weaponSelectionGroupSlot_t : int32_t {
	WEAPONSELECTIONGROUPSLOT_0 = 0,
	WEAPONSELECTIONGROUPSLOT_1 = 1,
	WEAPONSELECTIONGROUPSLOT_2 = 2,
	WEAPONSELECTIONGROUPSLOT_3 = 3,
	WEAPONSELECTIONGROUPSLOT_4 = 4,
	WEAPONSELECTIONGROUPSLOT_5 = 5,
	WEAPONSELECTIONGROUPSLOT_6 = 6,
	WEAPONSELECTIONGROUPSLOT_7 = 7,
	WEAPONSELECTIONGROUPSLOT_8 = 8,
	WEAPONSELECTIONGROUPSLOT_9 = 9,
	WEAPONSELECTIONGROUPSLOT_MAX = 10
};


enum idDeclWeaponReticle_reticleStyle_t : int32_t {
	RETICLE_STYLE_NONE = 0,
	RETICLE_STYLE_DOT = 1,
	RETICLE_STYLE_ROCKET_LAUNCHER = 2,
	RETICLE_STYLE_SHOTGUN = 3,
	RETICLE_STYLE_SHOTGUN_STICKY_BOMBS = 4,
	RETICLE_STYLE_SHOTGUN_STICKY_BOMBS_MASTERY = 5,
	RETICLE_STYLE_SHOTGUN_FULL_AUTO = 6,
	RETICLE_STYLE_HEAVY_CANNON = 7,
	RETICLE_STYLE_HEAVY_CANNON_BOLT = 8,
	RETICLE_STYLE_DB_SHOTGUN = 9,
	RETICLE_STYLE_DB_SHOTGUN_MEATHOOK = 10,
	RETICLE_STYLE_PLASMA = 11,
	RETICLE_STYLE_PLASMA_MICROWAVE = 12,
	RETICLE_STYLE_PLASMA_AOE = 13,
	RETICLE_STYLE_PLASMA_STUN_FASTER_RECHARGE = 14,
	RETICLE_STYLE_CHAINGUN = 15,
	RETICLE_STYLE_CHAINGUN_TURRET = 16,
	RETICLE_STYLE_CHAINGUN_TURRET_NOHEAT = 17,
	RETICLE_STYLE_BALLISTA_ARBALEST = 18,
	RETICLE_STYLE_BALLISTA_DESTROYER = 19,
	RETICLE_STYLE_BALLISTA_DESTROYER_MASTERY = 20,
	RETICLE_STYLE_CHAINSAW = 21,
	RETICLE_STYLE_ROCKET_LAUNCHER_LOCKON = 22,
	RETICLE_STYLE_BFG = 23,
	RETICLE_STYLE_CRUCIBLE = 24,
	RETICLE_STYLE_UNMAKYR = 25,
	RETICLE_STYLE_PISTOL = 26,
	RETICLE_STYLE_MP_BARON = 27,
	RETICLE_STYLE_MP_REVENANT = 28,
	RETICLE_STYLE_MP_PROWLER = 29,
	RETICLE_STYLE_MP_MANCUBUS = 30,
	RETICLE_STYLE_MP_HARVESTER = 31,
	RETICLE_STYLE_MP_CACODEMON = 32,
	RETICLE_STYLE_MP_PINKY = 33,
	RETICLE_STYLE_MP_ARCHVILE = 34,
	RETICLE_STYLE_MP_MARAUDER = 35,
	RETICLE_STYLE_MP_DREADKNIGHT = 36,
	RETICLE_STYLE_MAX = 37
};


enum idSWFWidgetState_t : int32_t {
	SWF_WIDGET_STATE_HIDDEN = 0,
	SWF_WIDGET_STATE_NORMAL = 1,
	SWF_WIDGET_STATE_SELECTING = 2,
	SWF_WIDGET_STATE_SELECTED = 3,
	SWF_WIDGET_STATE_UNSELECTING = 4,
	SWF_WIDGET_STATE_DISABLED = 5,
	SWF_WIDGET_STATE_NONSELECTABLE = 6,
	SWF_WIDGET_STATE_EXPANDED = 7,
	SWF_WIDGET_STATE_MAX = 8
};


enum idHUD_AbilityIndicators_elementState_t : int32_t {
	ELEMENT_STATE_NONE = 0,
	ELEMENT_STATE_OFF = 1,
	ELEMENT_STATE_LARGE = 2,
	ELEMENT_STATE_SMALL = 3,
	ELEMENT_STATE_LOWER_LARGE = 4,
	ELEMENT_STATE_LOWER_SMALL = 5
};


enum swfPlatform_t : int32_t {
	SWF_PLATFORM_INVALID = -1,
	SWF_PLATFORM_XBOX = 0,
	SWF_PLATFORM_PS = 1,
	SWF_PLATFORM_PC = 2,
	SWF_PLATFORM_SWITCH = 3,
	SWF_NUM_PLATFORMS = 4
};


enum idDeclHUDElement_idHudSWFInfo_t_hudElementPerspective_t : int32_t {
	PERSPECTIVE_NONE = 0,
	PERSPECTIVE_LEFT_PLANE = 1,
	PERSPECTIVE_RIGHT_PLANE = 2,
	PERSPECTIVE_CENTER_PLANE = 3
};






//? these are generated classes for DE_VERSION_SANDBOX

// forward declarations
struct fontInfo_t;
struct glyphInfo_t;
struct idActor;
struct idDeclAbility_Dash;
struct idDeclCampaign;
struct idDeclFX;
struct idDeclGlobalShell;
struct idDeclHUDElement;
struct idDeclHUDElement_idHudSWFInfo_t;
struct idDeclInventory;
struct idDeclPlayerProps;
struct idDeclPlayerProps_playerSounds_t;
struct idDeclPlayerProps_validEquipmentEntry_t;
struct idDeclUIColor;
struct idDeclUIColor_uiColorDef_t;
struct idDeclWeapon;
struct idDeclWeaponReticle;
struct idDeclWeapon_zoomInfo_t;
struct idEntity;
struct idFont;
struct idGK_UpgradeHandler;
struct idGUIComponent;
struct idGameSystemLocal;
struct idHUD;
struct idHUDElement;
struct idHUDEvent_ReticleDataUpdate_idReticleData_t;
struct idHUD_AbilityIndicators;
struct idHUD_BloodPunch;
struct idHUD_ExtraLives;
struct idHUD_HealthInfo;
struct idHUD_HealthInfo_ComponentDescriptor;
struct idHUD_LowWarning;
struct idHUD_Reticle;
struct idHUD_WeaponInfo;
struct idHUD_playerInhibitInfo_t;
struct idHands_idHandsAction;
struct idInventoryCollection;
struct idInventoryItem;
struct idMaterial2;
struct idPlayer;
struct idPlayerBodyReactionState_t;
struct idPlayerBodyReaction_t;
struct idPlayerDashboard;
struct idPlayer_equipmentInfo_t;
struct idPlayer_equipmentInfo_t_itemData_t;
struct idSWFCachedSpriteInstance;
struct idSWFSpriteInstance;
struct idSWFTextInstance;
struct idSWFWidget;
struct idSWFWidget_EquipmentItem;
struct idSWFWidget_Hud_Reticle;
struct idSWF_GameObject;
struct idSoundEvent;
struct idStr;
struct idStrId;
struct idUIElement;
struct idWeapon;
struct swfDisplayEntry_t;
struct tagData_t;



struct idStrId {
	// Offset: 0x0 (0d)  Size: 0x4 (4d)
	unsigned int id;
}; // size: 0x4 (Size Dec: 4)
static_assert(sizeof(idStrId) == 4, "Size of idStrId is wrong !");


struct alignas(8) idStr {
	// Offset: 0x0 (0d) Size: 0x8 (8d)
	char pad_0[8];
	// Offset: 0x8 (8d)  Size: 0x8 (8d)
	char* data;
	// Offset: 0x10 (16d)  Size: 0x4 (4d)
	int len;
	// Offset: 0x14 (20d)  Size: 0x4 (4d)	top bit is used to store a flag that indicates if the string data is static or not
	int allocedAndFlag;
	// Offset: 0x18 (24d)  Size: 0x14 (20d)
	char baseBuffer[20];
}; // size: 0x30 (Size Dec: 48)
static_assert(sizeof(idStr) == 48, "Size of idStr is wrong !");


// idMaterial2 : idDeclTypeInfo : idDecl : idResource
struct idMaterial2 {
	// Offset: 0x0 (0d) Size: 0x370 (880d)
	char pad_0[880];
	// Offset: 0x370 (880d)  Size: 0x2 (2d)
	unsigned short MaterialIndex;
	// Offset: 0x372 (882d) Size: 0x26 (38d)
	char pad_End[38];
}; // size: 0x398 (Size Dec: 920)
static_assert(sizeof(idMaterial2) == 920, "Size of idMaterial2 is wrong !");


struct tagData_t {
	// Offset: 0x0 (0d)  Size: 0xC (12d)	translational offset relative to the parent joint {{ units = m }}
	idVec3 trans;
	// Offset: 0xC (12d)  Size: 0x10 (16d)	rotational offset relative to the parent joint
	idQuat rot;
	// Offset: 0x1C (28d) Size: 0x4 (4d)
	char pad_End[4];
}; // size: 0x20 (Size Dec: 32)
static_assert(sizeof(tagData_t) == 32, "Size of tagData_t is wrong !");


struct idSWF_GameObject {
	// Offset: 0x0 (0d) Size: 0x20 (32d)
	char pad_0[32];
	// Offset: 0x20 (32d)  Size: 0x8 (8d)	optional custom material we can apply to the render model
	idMaterial2* customMaterial;
	// Offset: 0x28 (40d) Size: 0x50 (80d)
	char pad_End[80];
}; // size: 0x78 (Size Dec: 120)
static_assert(sizeof(idSWF_GameObject) == 120, "Size of idSWF_GameObject is wrong !");


// idDeclCampaign : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclCampaign {
	// Offset: 0x0 (0d) Size: 0x1e8 (488d)
	char pad_0[488];
	// Offset: 0x1E8 (488d)  Size: 0x18 (24d)	popups to show when creating a new save slot for this campaign    (idList < idDeclCampaign::newCampaignPopup_t , TAG_IDLIST , false >)
	idList newCampaignPopups;
}; // size: 0x200 (Size Dec: 512)
static_assert(sizeof(idDeclCampaign) == 512, "Size of idDeclCampaign is wrong !");


struct idDeclUIColor_uiColorDef_t {
	// Offset: 0x0 (0d)  Size: 0x10 (16d)	The color represented by this entry
	idColor color;
	// Offset: 0x10 (16d)  Size: 0x4 (4d)	The happy name of this color
	idStrId name;
}; // size: 0x14 (Size Dec: 20)
static_assert(sizeof(idDeclUIColor_uiColorDef_t) == 20, "Size of idDeclUIColor_uiColorDef_t is wrong !");


// idDeclGlobalShell : idDeclTypeInfo : idDecl : idResource
struct idDeclGlobalShell {
	// Offset: 0x0 (0d) Size: 0x148 (328d)
	char pad_0[328];
	// Offset: 0x148 (328d)  Size: 0x8 (8d)	The campaign decl for the main campaign
	idDeclCampaign* mainCampaignDecl;
	// Offset: 0x150 (336d) Size: 0x68 (104d)
	char pad_336[104];
	// Offset: 0x1B8 (440d)  Size: 0x18 (24d)	profile to use when coloring the UI    (idList < const idDeclUIColor * , TAG_IDLIST , false >)
	idList colorProfile;
	// Offset: 0x1D0 (464d) Size: 0x150 (336d)
	char pad_End[336];
}; // size: 0x320 (Size Dec: 800)
static_assert(sizeof(idDeclGlobalShell) == 800, "Size of idDeclGlobalShell is wrong !");


struct glyphInfo_t {
	// Offset: 0x0 (0d)  Size: 0x1 (1d)	width of glyph in pixels
	unsigned char width;
	// Offset: 0x1 (1d)  Size: 0x1 (1d)	height of glyph in pixels
	unsigned char height;
	// Offset: 0x2 (2d)  Size: 0x1 (1d)	distance in pixels from the base line to the top of the glyph
	char top;
	// Offset: 0x3 (3d)  Size: 0x1 (1d)	distance in pixels from the pen to the left edge of the glyph
	char left;
	// Offset: 0x4 (4d)  Size: 0x1 (1d)	x adjustment after rendering this glyph
	unsigned char xSkip;
	// Offset: 0x5 (5d) Size: 0x1 (1d)
	char pad_5[1];
	// Offset: 0x6 (6d)  Size: 0x2 (2d)	x offset in image where glyph starts (in pixels)
	unsigned short s;
	// Offset: 0x8 (8d)  Size: 0x2 (2d)	y offset in image where glyph starts (in pixels)
	unsigned short t;
}; // size: 0xa (Size Dec: 10)
static_assert(sizeof(glyphInfo_t) == 10, "Size of glyphInfo_t is wrong !");


struct fontInfo_t {
	// Offset: 0x0 (0d) Size: 0x18 (24d)
	char pad_0[24];
	// Offset: 0x18 (24d)  Size: 0x2 (2d)
	short imageWidth;
	// Offset: 0x1A (26d)  Size: 0x2 (2d)
	short imageHeight;
	// Offset: 0x1C (28d)  Size: 0x2 (2d)
	short pointSize;
	// Offset: 0x1E (30d)  Size: 0x2 (2d)
	short ascender;
	// Offset: 0x20 (32d)  Size: 0x2 (2d)
	short descender;
	// Offset: 0x22 (34d)  Size: 0x2 (2d)
	short edgeExpand;
	// Offset: 0x24 (36d)  Size: 0x2 (2d)	For some text input uses.
	short largestGlyphWidth;
	// Offset: 0x26 (38d)  Size: 0x2 (2d)
	short numGlyphs;
	// Offset: 0x28 (40d)  Size: 0x8 (8d)
	glyphInfo_t* glyphData;
	// Offset: 0x30 (48d) Size: 0x8 (8d)
	char pad_End[8];
}; // size: 0x38 (Size Dec: 56)
static_assert(sizeof(fontInfo_t) == 56, "Size of fontInfo_t is wrong !");


// idFont : idResource
struct idFont {
	// Offset: 0x0 (0d) Size: 0x58 (88d)
	char pad_0[88];
	// Offset: 0x58 (88d)  Size: 0x8 (8d)	Fonts can be aliases to other fonts when we remap for other locales
	idFont* alias;
	// Offset: 0x60 (96d)  Size: 0x8 (8d)	If the font is NOT an alias, this is where the font data is located
	fontInfo_t* fontInfo;
	// Offset: 0x68 (104d) Size: 0x38 (56d)
	char pad_End[56];
}; // size: 0xa0 (Size Dec: 160)
static_assert(sizeof(idFont) == 160, "Size of idFont is wrong !");


// idDeclInventory : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclInventory {
	// Offset: 0x0 (0d) Size: 0xa8 (168d)
	char pad_0[168];
	// Offset: 0xA8 (168d)  Size: 0x1 (1d)	true for weapons & hands
	bool useWeaponFOVScale;
	// Offset: 0xa9 (169d) Size: 0x77 (119d)
	char pad_169[119];
	// Offset: 0x120 (288d)  Size: 0x4 (4d)	fov scale to use when held in the player's hands
	float handsFovScale;
	// Offset: 0x124 (292d)  Size: 0x4 (4d)	human-readable name for the item (player may see this)
	idStrId displayName;
	// Offset: 0x128 (296d) Size: 0x2D0 (720d)
	char pad_End[720];
}; // size: 0x3f8 (Size Dec: 1016)
static_assert(sizeof(idDeclInventory) == 1016, "Size of idDeclInventory is wrong !");


struct idDeclWeapon_zoomInfo_t {
	// Offset: 0x0 (0d)  Size: 0x4 (4d)	if > 0, field of view in degrees when zoomed
	float zoomedFOV;
	// Offset: 0x4 (4d)  Size: 0x4 (4d)	if > 0, field of view in degrees for the hands/weapon when zoomed (otherwise, same as zoomedFOV)
	float zoomedHandsFOV;
	// Offset: 0x8 (8d) Size: 0x4 (4d)
	char pad_8[4];
	// Offset: 0xC (12d)  Size: 0x4 (4d)	scale the sensitivity for the controller
	float sensitivity_scale_controller;
	// Offset: 0x10 (16d)  Size: 0x4 (4d)	scale the sensitivity for the mouse
	float sensitivity_scale_mouse;
	// Offset: 0x14 (20d) Size: 0x74 (116d)
	char pad_End[116];
}; // size: 0x88 (Size Dec: 136)
static_assert(sizeof(idDeclWeapon_zoomInfo_t) == 136, "Size of idDeclWeapon_zoomInfo_t is wrong !");


// idDeclWeapon : idDeclInventory : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclWeapon {
	// Offset: 0x0 (0d) Size: 0x9c0 (2496d)
	char pad_0[2496];
	// Offset: 0x9C0 (2496d)  Size: 0x4 (4d)	__defintweaponSlot; which weapon slot does this occupy FIXME DOOM4 HANDS (need to hook this up for Doom4 weapons) weapons are grouped on the number keys for easy selection
	idDeclWeapon_weaponSelectionGroup_t weaponSelectionGroup;
	// Offset: 0x9C4 (2500d)  Size: 0x4 (4d)	weapons are selected in increasing order of their slot values
	idDeclWeapon_weaponSelectionGroupSlot_t weaponSelectionGroupSlot;
	// Offset: 0x9c8 (2504d) Size: 0xd38 (3384d)
	char pad_2504[3384];
	// Offset: 0x1700 (5888d)  Size: 0x88 (136d)	------------------------ Scope / Zoom Variables ------------------------ parameters for zoom mode
	idDeclWeapon_zoomInfo_t ironSightZoom;
	// Offset: 0x1788 (6024d) Size: 0x9d0 (2512d)
	char pad_6024[2512];
	// Offset: 0x2158 (8536d)  Size: 0x8 (8d)	Type of reticle to use for this weapon
	idDeclWeaponReticle* reticle;
	// Offset: 0x2160 (8544d)  Size: 0x8 (8d)	When set, type of reticle to use for this weapon when it is zoomed.
	idDeclWeaponReticle* reticleWhenZoomed;
	// Offset: 0x2168 (8552d) Size: 0x1a4 (420d)
	char pad_8552[420];
	// Offset: 0x230C (8972d)  Size: 0x4 (4d)	TODO: for ghost, all of these AI specific weapon properties should be clearly marked and grouped together ( they are being used by non-AI systems ). the high level categorization of this weapon. ( for AI ).
	idDeclWeapon_weaponCategory_t weaponCategory;
	// Offset: 0x2310 (8976d) Size: 0x18 (24d)
	char pad_End[24];
}; // size: 0x2328 (Size Dec: 9000)
static_assert(sizeof(idDeclWeapon) == 9000, "Size of idDeclWeapon is wrong !");


// idWeapon : idInventoryItem : idEventReceiver : idManagedClass : idClass : idEventArgUser
struct idWeapon {
	// Offset: 0x0 (0d) Size: 0x23d8 (9176d)
	char pad_0[9176];
	// Offset: 0x23D8 (9176d)  Size: 0x1 (1d)	NOTE that because actual equipping is triggered by animation events,  and because the bringup anim can be interrupted, this weapon might not actually get equipped if another weapon is selected before this weapon can be equipped records whether the weapon was empty when it was selected. only weapons that
	bool emptyWhenSelected;
	// Offset: 0x23D9 (9177d)  Size: 0x1 (1d)	were not empty when selected with automatically be changed when they become empty records whether this weapon has played its intro bringup yet, if applicable
	bool playedIntroBringUp;
	// Offset: 0x23DA (9178d)  Size: 0x1 (1d)	was this weapon disabled due to a game challenge ( unselectable )
	bool gameChallengeDisabled;
	// Offset: 0x23DB (9179d) Size: 0x17DD (6109d)
	char pad_End[6109];
}; // size: 0x3bb8 (Size Dec: 15288)
static_assert(sizeof(idWeapon) == 15288, "Size of idWeapon is wrong !");


// idDeclWeaponReticle : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclWeaponReticle {
	// Offset: 0x0 (0d) Size: 0x90 (144d)
	char pad_0[144];
	// Offset: 0x90 (144d)  Size: 0x4 (4d)	how the reticle should look
	idDeclWeaponReticle_reticleStyle_t style;
	// Offset: 0x94 (148d) Size: 0x64 (100d)
	char pad_148[100];
	// Offset: 0xF8 (248d)  Size: 0x4 (4d)	scale of the rendermodel for the reticle
	float reticleModelScale;
	// Offset: 0xFC (252d) Size: 0x32C (812d)
	char pad_End[812];
}; // size: 0x428 (Size Dec: 1064)
static_assert(sizeof(idDeclWeaponReticle) == 1064, "Size of idDeclWeaponReticle is wrong !");


// idDeclFX : idDeclTypeInfo : idDecl : idResource
struct idDeclFX {
	// Offset: 0x0 (0d) Size: 0xa0 (160d)
	char pad_0[160];
	// Offset: 0xA0 (160d)  Size: 0x4 (4d)	this gets incremented each time a change is made so that systems referencing the fx decl can re-initialize when changed
	int changeId;
	// Offset: 0xA4 (164d)  Size: 0x4 (4d)	the max num of items in this cycle, -1 means infinite
	int cycleConditionMax;
	// Offset: 0xA8 (168d)  Size: 0x4 (4d)	if not == FX_NONE, this decl will cycle through the cycle start conditions
	fxCondition_t cycleStartCondition;
	// Offset: 0xAC (172d)  Size: 0x1 (1d)	if true we will cycle the events from the initial condition received
	bool cycleEvents;
	// Offset: 0xAD (173d) Size: 0x4B (75d)
	char pad_End[75];
}; // size: 0xf8 (Size Dec: 248)
static_assert(sizeof(idDeclFX) == 248, "Size of idDeclFX is wrong !");


// idDeclAbility_Dash : idDeclInventory : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclAbility_Dash {
	// Offset: 0x0 (0d) Size: 0x450 (1104d)
	char pad_0[1104];
	// Offset: 0x450 (1104d)  Size: 0x8 (8d)	the FX Decl to use for the effect.
	idDeclFX* fxDecl;
	// Offset: 0x458 (1112d) Size: 0x18 (24d)
	char pad_End[24];
}; // size: 0x470 (Size Dec: 1136)
static_assert(sizeof(idDeclAbility_Dash) == 1136, "Size of idDeclAbility_Dash is wrong !");


struct idSWFSpriteInstance {
	// Offset: 0x0 (0d) Size: 0x18 (24d)
	char pad_0[24];
	// Offset: 0x18 (24d)  Size: 0x8 (8d)	name of this sprite instance
	idAtomicString name;
	// Offset: 0x20 (32d)  Size: 0x4 (4d)
	int fullPathHash;
	// Offset: 0x24 (36d) Size: 0x1c (28d)
	char pad_36[28];
	// Offset: 0x40 (64d)  Size: 0x8 (8d)	parent sprite instance (will be NULL only for the root sprite instance)
	idSWFSpriteInstance* parent;
	// Offset: 0x48 (72d) Size: 0x8 (8d)
	char pad_72[8];
	// Offset: 0x50 (80d)  Size: 0x1 (1d)
	bool isPlaying;
	// Offset: 0x51 (81d)  Size: 0x1 (1d)
	bool isVisible;
	// Offset: 0x52 (82d)  Size: 0x1 (1d)
	bool visibilityRestricted;
	// Offset: 0x53 (83d)  Size: 0x1 (1d)
	bool firstRun;
	// Offset: 0x54 (84d)  Size: 0x4 (4d)	Flags to control rendering of certain sprites
	int spriteFlags;
	// Offset: 0x58 (88d) Size: 0x8 (8d)
	char pad_88[8];
	// Offset: 0x60 (96d)  Size: 0x8 (8d)	if this is set, apply this material when rendering any child shapes
	idMaterial2* materialOverride;
	// Offset: 0x68 (104d) Size: 0x4 (4d)
	char pad_104[4];
	// Offset: 0x6C (108d)  Size: 0x4 (4d)	have to cache this in the sprite instance in case the color profile changes
	int namedColorId;
	// Offset: 0x70 (112d)  Size: 0x18 (24d)	children display entries    (idList < swfDisplayEntry_t , TAG_SWF , false >)
	idList displayList;
	// Offset: 0x88 (136d) Size: 0x20 (32d)
	char pad_136[32];
	// Offset: 0xA8 (168d)  Size: 0x10 (16d)
	swfRect_t bounds;
	// Offset: 0xB8 (184d) Size: 0x78 (120d)
	char pad_End[120];
}; // size: 0x130 (Size Dec: 304)
static_assert(sizeof(idSWFSpriteInstance) == 304, "Size of idSWFSpriteInstance is wrong !");


struct idSWFCachedSpriteInstance {
	// Offset: 0x0 (0d) Size: 0x10 (16d)
	char pad_0[16];
	// Offset: 0x10 (16d)  Size: 0x8 (8d)
	idSWFSpriteInstance* SpriteInstance;
	// Offset: 0x18 (24d) Size: 0x18 (24d)
	char pad_End[24];
}; // size: 0x30 (Size Dec: 48)
static_assert(sizeof(idSWFCachedSpriteInstance) == 48, "Size of idSWFCachedSpriteInstance is wrong !");


struct idSWFTextInstance {
	// Offset: 0x0 (0d) Size: 0x40 (64d)
	char pad_0[64];
	// Offset: 0x40 (64d)  Size: 0x30 (48d)
	idStr text;
	// Offset: 0x70 (112d) Size: 0x60 (96d)
	char pad_112[96];
	// Offset: 0xD0 (208d)  Size: 0x4 (4d)
	swfColorRGBA_t color;
	// Offset: 0xD4 (212d) Size: 0x1A4 (420d)
	char pad_End[420];
}; // size: 0x278 (Size Dec: 632)
static_assert(sizeof(idSWFTextInstance) == 632, "Size of idSWFTextInstance is wrong !");


struct idHUD_HealthInfo_ComponentDescriptor {
	// Offset: 0x0 (0d)  Size: 0x4 (4d)
	float maxValue;
	// Offset: 0x4 (4d)  Size: 0x4 (4d)
	float previousValue;
	// Offset: 0x8 (8d)  Size: 0x4 (4d)
	float currentValue;
	// Offset: 0xC (12d)  Size: 0x4 (4d)
	float warningLevel;
	// Offset: 0x10 (16d)  Size: 0x4 (4d)
	float changeValue;
	// Offset: 0x14 (20d)  Size: 0x4 (4d)
	float fillRateSpeed;
	// Offset: 0x18 (24d)  Size: 0x1 (1d)
	bool manualFillControl;
	// Offset: 0x19 (25d)  Size: 0x1 (1d)
	bool isLowHealthState;
	// Offset: 0x1a (26d) Size: 0x6 (6d)
	char pad_26[6];
	// Offset: 0x20 (32d)  Size: 0x8 (8d)    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long lastUpdateTime;
	// Offset: 0x28 (40d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance componentSpr;
	// Offset: 0x58 (88d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance fillBarSpr;
	// Offset: 0x88 (136d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance fillPulseSpr;
	// Offset: 0xB8 (184d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance addAmountPopupSpr;
	// Offset: 0xE8 (232d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance infoSpr;
	// Offset: 0x118 (280d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance infoPulseSpr;
	// Offset: 0x148 (328d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance backSpr;
	// Offset: 0x178 (376d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance backPulseSpr;
	// Offset: 0x1A8 (424d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance backIconSpr;
	// Offset: 0x1D8 (472d)  Size: 0x8 (8d)
	idSWFTextInstance* infoTxt;
	// Offset: 0x1E0 (480d)  Size: 0x8 (8d)
	idSWFTextInstance* infoPulseTxt;
}; // size: 0x1e8 (Size Dec: 488)
static_assert(sizeof(idHUD_HealthInfo_ComponentDescriptor) == 488, "Size of idHUD_HealthInfo_ComponentDescriptor is wrong !");


// idHUD_HealthInfo : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_HealthInfo {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x1E8 (488d)	Health store off.
	idHUD_HealthInfo_ComponentDescriptor healthDesc;
	// Offset: 0x2E0 (736d)  Size: 0x1E8 (488d)
	idHUD_HealthInfo_ComponentDescriptor armorDesc;
	// Offset: 0x4C8 (1224d)  Size: 0x1E8 (488d)
	idHUD_HealthInfo_ComponentDescriptor radShieldDesc;
	// Offset: 0x6B0 (1712d)  Size: 0x1E8 (488d)
	idHUD_HealthInfo_ComponentDescriptor oxygenDesc;
	// Offset: 0x898 (2200d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance mainSpr;
	// Offset: 0x8C8 (2248d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance topAdornmentSpr;
	// Offset: 0x8F8 (2296d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance bottomAdornmentSpr;
	// Offset: 0x928 (2344d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance sentinelArmorSpr;
	// Offset: 0x958 (2392d)  Size: 0x1 (1d)	Flag for when we have to heal the normal health before showing the overhealth anim
	bool waitForOverflowAnimation;
	// Offset: 0x959 (2393d)  Size: 0x1 (1d)	The the radiation suit equipped for this player
	bool radShieldEquipped;
	// Offset: 0x95A (2394d)  Size: 0x1 (1d)	Is the Radiation suit actively blocking damage
	bool radShieldActive;
	// Offset: 0x95B (2395d)  Size: 0x1 (1d)	The the oxygen suit equipped for this player
	bool oxygenEquipped;
	// Offset: 0x95C (2396d)  Size: 0x1 (1d)	Is the oxygen suit actively blocking damage
	bool oxygenActive;
	// Offset: 0x95D (2397d)  Size: 0x1 (1d)	Does the player have the ability to dash and see it on the UI
	bool dashUnlockedAndVisible;
	// Offset: 0x95E (2398d)  Size: 0x1 (1d)	Does the player have the ability to use blood punch and see it on the UI
	bool bloodPunchUnlockedAndVisible;
	// Offset: 0x95F (2399d)  Size: 0x1 (1d)
	bool sentinelArmorActive;
}; // size: 0x960 (Size Dec: 2400)
static_assert(sizeof(idHUD_HealthInfo) == 2400, "Size of idHUD_HealthInfo is wrong !");


// idUIElement : idClass : idEventArgUser
struct idUIElement {
	// Offset: 0x0 (0d) Size: 0x10 (16d)
	char pad_0[16];
	// Offset: 0x10 (16d)  Size: 0x78 (120d)
	idSWF_GameObject swfObject;
	// Offset: 0x88 (136d)  Size: 0x8 (8d)
	idSWFWidget* rootWidget;
	// Offset: 0x90 (144d)  Size: 0x18 (24d)    (idList < idUIElement * , TAG_IDLIST , false >)
	idList childElements;
	// Offset: 0xA8 (168d)  Size: 0x8 (8d)
	idVec3* viewOrigin;
	// Offset: 0xB0 (176d)  Size: 0x8 (8d)
	idMat3* viewAxis;
	// Offset: 0xB8 (184d)  Size: 0x1 (1d)
	bool isActive;
	// Offset: 0xb9 (185d) Size: 0x3 (3d)
	char pad_185[3];
	// Offset: 0xBC (188d)  Size: 0x4 (4d)
	int focusedChildElementIndex;
	// Offset: 0xC0 (192d)  Size: 0x1 (1d)
	bool queuedActivate;
	// Offset: 0xC1 (193d)  Size: 0x1 (1d)
	bool queuedDeactivate;
}; // size: 0xc8 (Size Dec: 200)
static_assert(sizeof(idUIElement) == 200, "Size of idUIElement is wrong !");


// idHUD_BloodPunch : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_BloodPunch {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x4 (4d)
	float currentCharge;
	// Offset: 0xFC (252d)  Size: 0x4 (4d)
	float maxCharge;
	// Offset: 0x100 (256d)  Size: 0x4 (4d)
	float previousCharge;
	// Offset: 0x104 (260d)  Size: 0x4 (4d)
	float healthCurrent;
	// Offset: 0x108 (264d)  Size: 0x4 (4d)
	float healthMax;
	// Offset: 0x10C (268d)  Size: 0x4 (4d)
	float lowHealthThreshold;
	// Offset: 0x110 (272d)  Size: 0x8 (8d)
	idSWFWidget* chargedAnim;
	// Offset: 0x118 (280d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance ctaSpr;
	// Offset: 0x148 (328d)  Size: 0x4 (4d)
	swfPlatform_t swfPlatform;
	// Offset: 0x14C (332d)  Size: 0x1 (1d)
	bool showCta;
	// Offset: 0x14D (333d)  Size: 0x1 (1d)
	bool radShieldOrOxygenEquipped;
	// Offset: 0x14E (334d)  Size: 0x1 (1d)
	bool dashEquipped;
}; // size: 0x150 (Size Dec: 336)
static_assert(sizeof(idHUD_BloodPunch) == 336, "Size of idHUD_BloodPunch is wrong !");


// idHUD_LowWarning : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_LowWarning {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x8 (8d)
	idSWFWidget* wgtDemonHidden;
	// Offset: 0x100 (256d)  Size: 0x4 (4d)
	float healthCurrent;
	// Offset: 0x104 (260d)  Size: 0x4 (4d)
	float healthMax;
	// Offset: 0x108 (264d)  Size: 0x4 (4d)
	float lowHealthThreshold;
	// Offset: 0x10C (268d)  Size: 0x4 (4d)
	float criticalHealthThreshold;
	// Offset: 0x110 (272d)  Size: 0x4 (4d)
	float armorCurrent;
	// Offset: 0x114 (276d)  Size: 0x4 (4d)
	float armorMax;
	// Offset: 0x118 (280d)  Size: 0x4 (4d)
	int currentAmmoCount;
	// Offset: 0x11C (284d)  Size: 0x4 (4d)
	int maxAmmoCount;
	// Offset: 0x120 (288d)  Size: 0x4 (4d)
	int lowAmmoThreshold;
	// Offset: 0x124 (292d)  Size: 0x4 (4d)
	int ammoPerShot;
	// Offset: 0x128 (296d)  Size: 0x1 (1d)
	bool overammoActive;
	// Offset: 0x129 (297d)  Size: 0x1 (1d)
	bool infinite;
	// Offset: 0x12A (298d)  Size: 0x1 (1d)
	bool bfgInfinite;
	// Offset: 0x12B (299d)  Size: 0x1 (1d)
	bool isBFG;
	// Offset: 0x12C (300d)  Size: 0x1 (1d)	false == no mod, true == mod disabled
	bool modStringFlag;
	// Offset: 0x12d (301d) Size: 0x3 (3d)
	char pad_301[3];
	// Offset: 0x130 (304d)  Size: 0x8 (8d)    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long chainsawShowTime;
	// Offset: 0x138 (312d)  Size: 0x10 (16d)    (idHUDEvent_ChainsawFail::chainsawData_t)
	char chainsawFailData[16];
	// Offset: 0x148 (328d)  Size: 0x8 (8d)    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long noModShowTime;
	// Offset: 0x150 (336d)  Size: 0x1 (1d)
	bool isDemonPlayer;
	// Offset: 0x151 (337d)  Size: 0x1 (1d)
	bool showingChainsawWarning;
	// Offset: 0x152 (338d) Size: 0x2 (2d)
	char pad_338[2];
	// Offset: 0x154 (340d)  Size: 0x4 (4d)
	int lockonStatus;
	// Offset: 0x158 (344d)  Size: 0x10 (16d)    (idHUDEvent_DemonInvasionStateUpdate::demonInvasionStateData_t)
	char demonInvasionStateData[16];
}; // size: 0x168 (Size Dec: 360)
static_assert(sizeof(idHUD_LowWarning) == 360, "Size of idHUD_LowWarning is wrong !");


// idHUD_ExtraLives : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_ExtraLives {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x4 (4d)
	int currentExtraLives;
	// Offset: 0xFC (252d)  Size: 0x1 (1d)
	bool infiniteExtraLives;
	// Offset: 0xFD (253d)  Size: 0x1 (1d)
	bool waitingToUpdateCount;
}; // size: 0x100 (Size Dec: 256)
static_assert(sizeof(idHUD_ExtraLives) == 256, "Size of idHUD_ExtraLives is wrong !");


// idHUD_AbilityIndicators : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_AbilityIndicators {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x8 (8d)
	idSWFWidget* bloodPunchWidget;
	// Offset: 0x100 (256d)  Size: 0x8 (8d)
	idSWFWidget* bloodPunchPipWidget;
	// Offset: 0x108 (264d)  Size: 0x8 (8d)
	idSWFWidget* hammerWidget;
	// Offset: 0x110 (272d)  Size: 0x8 (8d)
	idSWFWidget* chainsawWidget;
	// Offset: 0x118 (280d)  Size: 0x8 (8d)
	idSWFWidget* chainsawHighPipWidget;
	// Offset: 0x120 (288d)  Size: 0x8 (8d)
	idSWFWidget* chainsawMidPipWidget;
	// Offset: 0x128 (296d)  Size: 0x8 (8d)
	idSWFWidget* chainsawLowPipWidget;
	// Offset: 0x130 (304d)  Size: 0x8 (8d)
	idSWFWidget* flameBelchWidget;
	// Offset: 0x138 (312d)  Size: 0x8 (8d)
	idSWFWidget* grenadeWidget;
	// Offset: 0x140 (320d)  Size: 0x8 (8d)
	idSWFWidget* grenadeHighPipWidget;
	// Offset: 0x148 (328d)  Size: 0x8 (8d)
	idSWFWidget* grenadeLowPipWidget;
	// Offset: 0x150 (336d)  Size: 0x8 (8d)
	idSWFWidget* grenadeHighHollowPipWidget;
	// Offset: 0x158 (344d)  Size: 0x8 (8d)
	idSWFWidget* grenadeLowHollowPipWidget;
	// Offset: 0x160 (352d)  Size: 0x8 (8d)
	idSWFWidget* iceGrenadeWidget;
	// Offset: 0x168 (360d)  Size: 0x8 (8d)
	idSWFWidget* iceGrenadePipWidget;
	// Offset: 0x170 (368d)  Size: 0x8 (8d)
	idSWFWidget* iceGrenadeHollowPipWidget;
	// Offset: 0x178 (376d)  Size: 0x4 (4d)
	idHUD_AbilityIndicators_elementState_t elementState;
	// Offset: 0x17C (380d)  Size: 0x4 (4d)
	int updateFlags;
	// Offset: 0x180 (384d)  Size: 0x4 (4d)
	float bloodPunchCharge;
	// Offset: 0x184 (388d)  Size: 0x4 (4d)
	float chainsawCharge;
	// Offset: 0x188 (392d)  Size: 0x4 (4d)
	float flameBelchCharge;
	// Offset: 0x18C (396d)  Size: 0x1 (1d)
	bool hammerShown;
	// Offset: 0x18d (397d) Size: 0x3 (3d)
	char pad_397[3];
	// Offset: 0x190 (400d)  Size: 0x4 (4d)
	float hammerRecharge;
	// Offset: 0x194 (404d)  Size: 0x4 (4d)
	float hammerSupercharge;
	// Offset: 0x198 (408d)  Size: 0x4 (4d)
	float grenadeCharge;
	// Offset: 0x19C (412d)  Size: 0x4 (4d)
	float iceGrenadeCharge;
	// Offset: 0x1A0 (416d)  Size: 0x1 (1d)
	bool bloodPunchShowing;
	// Offset: 0x1A1 (417d)  Size: 0x1 (1d)
	bool bloodPunchPipShowing;
	// Offset: 0x1A2 (418d)  Size: 0x1 (1d)
	bool chainsawShowing;
	// Offset: 0x1A3 (419d)  Size: 0x1 (1d)
	bool chainsawHighPipShowing;
	// Offset: 0x1A4 (420d)  Size: 0x1 (1d)
	bool chainsawMidPipShowing;
	// Offset: 0x1A5 (421d)  Size: 0x1 (1d)
	bool hammerShowing;
	// Offset: 0x1A6 (422d)  Size: 0x1 (1d)
	bool flameBelchShowing;
	// Offset: 0x1A7 (423d)  Size: 0x1 (1d)
	bool grenadeShowing;
	// Offset: 0x1A8 (424d)  Size: 0x1 (1d)
	bool iceGrenadeShowing;
	// Offset: 0x1A9 (425d)  Size: 0x1 (1d)
	bool grenadeHighPipShowing;
	// Offset: 0x1AA (426d)  Size: 0x1 (1d)
	bool grenadeHighHollowPipShowing;
	// Offset: 0x1AB (427d)  Size: 0x1 (1d)
	bool grenadeLowPipShowing;
	// Offset: 0x1AC (428d)  Size: 0x1 (1d)
	bool grenadeLowHollowPipShowing;
	// Offset: 0x1AD (429d)  Size: 0x1 (1d)
	bool icegrenadePipShowing;
	// Offset: 0x1AE (430d)  Size: 0x1 (1d)
	bool icegrenadeHollowPipShowing;
	// Offset: 0x1AF (431d)  Size: 0x1 (1d)	Probably grenade pips right here
	bool swimming;
	// Offset: 0x1B0 (432d)  Size: 0x1 (1d)
	bool inCampaign;
	// Offset: 0x1B1 (433d)  Size: 0x1 (1d)
	bool fragEquipped;
}; // size: 0x1b8 (Size Dec: 440)
static_assert(sizeof(idHUD_AbilityIndicators) == 440, "Size of idHUD_AbilityIndicators is wrong !");


struct alignas(8) idHUD_playerInhibitInfo_t {
	// Offset: 0x0 (0d)  Size: 0x4 (4d)
	idUCmdTracker_inhibitFlags_t inhibitFlags;
	// Offset: 0x4 (4d) Size: 0x4 (4d)
	char pad_4[4];
	// Offset: 0x8 (8d)  Size: 0x20 (32d)    (idManagedClassPtr < idPlayer >)
	char inhibitPlayer[32];
	// Offset: 0x28 (40d)  Size: 0x1 (1d)
	bool takesDamage;
	// Offset: 0x29 (41d)  Size: 0x1 (1d)
	bool controlTakesDamage;
	// Offset: 0x2A (42d)  Size: 0x1 (1d)
	bool disableMovementDuringCustomAnim;
}; // size: 0x30 (Size Dec: 48)
static_assert(sizeof(idHUD_playerInhibitInfo_t) == 48, "Size of idHUD_playerInhibitInfo_t is wrong !");


struct idDeclHUDElement_idHudSWFInfo_t {
	// Offset: 0x0 (0d)  Size: 0x8 (8d)	The SWF to use for this HUD Element.    (idDeclSWF)
	char swf[8];
	// Offset: 0x8 (8d)  Size: 0x1 (1d)	Do we create a custom gui model or use Global.
	bool customGUIModel;
	// Offset: 0x9 (9d) Size: 0x3 (3d)
	char pad_9[3];
	// Offset: 0xC (12d)  Size: 0x4 (4d)	The perspective plane this gui uses
	idDeclHUDElement_idHudSWFInfo_t_hudElementPerspective_t perspectiveGUI;
	// Offset: 0x10 (16d)  Size: 0x4 (4d)	The scale this GUI will use when shown the HUD perspective mode is off (HUD is fullscreen and flat)
	float nonPerspectiveScale;
	// Offset: 0x14 (20d)  Size: 0x1 (1d)	is this gui full screen?
	bool fullscreen;
	// Offset: 0x15 (21d)  Size: 0x1 (1d)	should the swf be a reference as opposed to a completely separate instance of the swf
	bool referencedGui;
	// Offset: 0x16 (22d) Size: 0x2 (2d)
	char pad_22[2];
	// Offset: 0x18 (24d)  Size: 0x8 (8d)	Tag to use from the player's helmet.
	idAtomicString helmetTag;
	// Offset: 0x20 (32d)  Size: 0x8 (8d)	Tag to use for the demon player.
	idAtomicString demonTag;
	// Offset: 0x28 (40d)  Size: 0x4 (4d)	scale of the swf.
	float swfScale;
	// Offset: 0x2C (44d)  Size: 0xC (12d)	offset of the swf. ( from origin if no tag ) {{ units = m }}
	idVec3 swfOffset;
	// Offset: 0x38 (56d)  Size: 0x1 (1d)	Set this to true if this element will pause the game.
	bool pauseGame;
	// Offset: 0x39 (57d) Size: 0x3 (3d)
	char pad_57[3];
	// Offset: 0x3C (60d)  Size: 0x4 (4d)	The hud element variant that this swf coresponds to
	int variant;
	// Offset: 0x40 (64d)  Size: 0x8 (8d)	The optional custom material to use for this hud elements render model
	idMaterial2* customMaterial;
	// Offset: 0x48 (72d)  Size: 0x1 (1d)	do we depth test this element.
	bool depthTest;
	// Offset: 0x49 (73d)  Size: 0x1 (1d)	does this unlink for hide Hud.
	bool neverUnlinkForHide;
	// Offset: 0x4A (74d)  Size: 0x1 (1d)	Does this element support fade
	bool supportsFade;
	// Offset: 0x4B (75d)  Size: 0x1 (1d)	Set this to true if this element will always run at normal speed even if gametime slows or pauses.
	bool forceRealtimeUpdates;
}; // size: 0x50 (Size Dec: 80)
static_assert(sizeof(idDeclHUDElement_idHudSWFInfo_t) == 80, "Size of idDeclHUDElement_idHudSWFInfo_t is wrong !");


// idDeclHUDElement : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclHUDElement {
	// Offset: 0x0 (0d) Size: 0x90 (144d)
	char pad_0[144];
	// Offset: 0x90 (144d)  Size: 0x50 (80d)	information on the SWF in use.
	idDeclHUDElement_idHudSWFInfo_t swfInfo;
	// Offset: 0xe0 (224d) Size: 0x10 (16d)
	char pad_224[16];
	// Offset: 0xF0 (240d)  Size: 0x18 (24d)	HUD Event IDs    (idList < hudEventID_t , TAG_IDLIST , false >)
	idList hudEventIDs;
	// Offset: 0x108 (264d) Size: 0x120 (288d)
	char pad_264[288];
	// Offset: 0x228 (552d)  Size: 0x1 (1d)	If true, images the swf uses are loaded and unloaded with the swf instead of as needed
	bool cacheImages;
	// Offset: 0x229 (553d) Size: 0x17 (23d)
	char pad_End[23];
}; // size: 0x240 (Size Dec: 576)
static_assert(sizeof(idDeclHUDElement) == 576, "Size of idDeclHUDElement is wrong !");


// idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUDElement {
	// Offset: 0x0 (0d) Size: 0xc8 (200d)
	char pad_0[200];
	// Offset: 0xC8 (200d)  Size: 0x8 (8d)	decl information for this Hud Element.
	idDeclHUDElement* decl;
	// Offset: 0xD0 (208d)  Size: 0x2 (2d)	HUD broadcast system ID
	unsigned short hudSysId;
	// Offset: 0xd2 (210d) Size: 0x2 (2d)
	char pad_210[2];
	// Offset: 0xD4 (212d)  Size: 0x20 (32d)	Tag data for the HUD element.
	tagData_t tagData;
	// Offset: 0xF4 (244d)  Size: 0x1 (1d)	Is the element faded in correctly
	bool isFaded;
	// Offset: 0xF5 (245d) Size: 0x3 (3d)
	char pad_End[3];
}; // size: 0xf8 (Size Dec: 248)
static_assert(sizeof(idHUDElement) == 248, "Size of idHUDElement is wrong !");


struct idHUD {
	// Offset: 0x0 (0d) Size: 0xc (12d)
	char pad_0[12];
	// Offset: 0xC (12d)  Size: 0x2 (2d)	system id for 'HUD' in the event system
	unsigned short broadcastSystemId;
	// Offset: 0xe (14d) Size: 0x2 (2d)
	char pad_14[2];
	// Offset: 0x10 (16d)  Size: 0xB8 (184d)	All hud elements known by idHUD    (idGrowableList < idHUDElement * , 20 , TAG_IDLIST >)
	char elements[184];
	// Offset: 0xc8 (200d) Size: 0x2d0 (720d)
	char pad_200[720];
	// Offset: 0x398 (920d)  Size: 0x18 (24d)	NEW - All of the HUD menus (that are menus)    (idList < idMenu * , TAG_IDLIST , false >)
	idList menus;
	// Offset: 0x3B0 (944d)  Size: 0x4 (4d)	Into into 'm_menus' where the pause menu resides. Cache this since it's needed specially in update and render calls.
	int pauseMenuIndex;
	// Offset: 0x3B4 (948d)  Size: 0x1 (1d)	State if the POI hidden
	bool isPOIVisible;
	// Offset: 0x3B5 (949d)  Size: 0x1 (1d)	Ready to show map start UI when HUD becomes visible
	bool readyForMapStart;
	// Offset: 0x3b6 (950d) Size: 0x2 (2d)
	char pad_950[2];
	// Offset: 0x3B8 (952d)  Size: 0x30 (48d)
	idHUD_playerInhibitInfo_t savedInhibit;
	// Offset: 0x3E8 (1000d)  Size: 0x4 (4d)	Hud Modes Mode that we are currently in.
	int currentHudMode;
	// Offset: 0x3EC (1004d)  Size: 0x1 (1d)	was the game paused last frame according to mapLocal
	bool gameWasPaused;
	// Offset: 0x3ED (1005d)  Size: 0x1 (1d)
	bool inScope;
	// Offset: 0x3EE (1006d)  Size: 0x1 (1d)
	bool prevShowMenuVisibilityMask;
	// Offset: 0x3EF (1007d) Size: 0x1 (1d)
	char pad_End[1];
}; // size: 0x3f0 (Size Dec: 1008)
static_assert(sizeof(idHUD) == 1008, "Size of idHUD is wrong !");


// idGameSystemLocal : idGameSystem
struct idGameSystemLocal {
	// Offset: 0x0 (0d) Size: 0x50 (80d)
	char pad_0[80];
	// Offset: 0x50 (80d)  Size: 0x8 (8d)	could be the server game or a client game, menu game, etc.    (idMapInstance_Interface)
	char mapInstance[8];
	// Offset: 0x58 (88d) Size: 0x9E90 (40592d)
	char pad_End[40592];
}; // size: 0x9ee8 (Size Dec: 40680)
static_assert(sizeof(idGameSystemLocal) == 40680, "Size of idGameSystemLocal is wrong !");


struct swfDisplayEntry_t {
	// Offset: 0x0 (0d)  Size: 0x2 (2d)
	unsigned short characterID;
	// Offset: 0x2 (2d) Size: 0x2e (46d)
	char pad_2[46];
	// Offset: 0x30 (48d)  Size: 0x8 (8d)	if this entry is a sprite, then this will point to the specific instance of that sprite
	idSWFSpriteInstance* spriteInstance;
	// Offset: 0x38 (56d) Size: 0x8 (8d)
	char pad_End[8];
}; // size: 0x40 (Size Dec: 64)
static_assert(sizeof(swfDisplayEntry_t) == 64, "Size of swfDisplayEntry_t is wrong !");


// idSWFWidget : idClass : idEventArgUser
struct idSWFWidget {
	// Offset: 0x0 (0d) Size: 0x18 (24d)
	char pad_0[24];
	// Offset: 0x18 (24d)  Size: 0x8 (8d)	The Sprite Instance we are using for this widget.
	idSWFSpriteInstance* boundSprite;
	// Offset: 0x20 (32d)  Size: 0x30 (48d)	Instance name of the sprite used by the widget.
	idStr spriteName;
	// Offset: 0x50 (80d) Size: 0x48 (72d)
	char pad_80[72];
	// Offset: 0x98 (152d)  Size: 0x4 (4d)	Hash of the sprite path.
	int spritePathHash;
	// Offset: 0x9c (156d) Size: 0xb8 (184d)
	char pad_156[184];
	// Offset: 0x154 (340d)  Size: 0x4 (4d)	What state the button is in.
	idSWFWidgetState_t widgetState;
	// Offset: 0x158 (344d) Size: 0x24 (36d)
	char pad_344[36];
	// Offset: 0x17C (380d)  Size: 0x4 (4d)	operations to defer until the next Think.
	int deferredOperations;
}; // size: 0x180 (Size Dec: 384)
static_assert(sizeof(idSWFWidget) == 384, "Size of idSWFWidget is wrong !");


struct idHUDEvent_ReticleDataUpdate_idReticleData_t {
	// Offset: 0x0 (0d)  Size: 0x8 (8d)
	idDeclWeaponReticle* currentReticle;
	// Offset: 0x8 (8d)  Size: 0x8 (8d)
	idDeclWeapon* currentWeaponDecl;
	// Offset: 0x10 (16d) Size: 0x2c (44d)
	char pad_16[44];
	// Offset: 0x3C (60d)  Size: 0x4 (4d)
	float chargeCooldown;
	// Offset: 0x40 (64d) Size: 0x18 (24d)
	char pad_64[24];
	// Offset: 0x58 (88d)  Size: 0x4 (4d)	Zoom
	float zoom;
	// Offset: 0x5C (92d)  Size: 0x4 (4d)
	float zoomFraction;
	// Offset: 0x60 (96d)  Size: 0x1 (1d)
	bool isZooming;
	// Offset: 0x61 (97d)  Size: 0x1 (1d)
	bool isFullyZoomedIn;
	// Offset: 0x62 (98d)  Size: 0x1 (1d)
	bool inScope;
	// Offset: 0x63 (99d) Size: 0xAD (173d)
	char pad_End[173];
}; // size: 0x110 (Size Dec: 272)
static_assert(sizeof(idHUDEvent_ReticleDataUpdate_idReticleData_t) == 272, "Size of idHUDEvent_ReticleDataUpdate_idReticleData_t is wrong !");


// idSWFWidget_Hud_Reticle : idSWFWidget : idClass : idEventArgUser
struct idSWFWidget_Hud_Reticle {
	// Offset: 0x0 (0d) Size: 0x180 (384d)
	char pad_0[384];
	// Offset: 0x180 (384d)  Size: 0x110 (272d)
	idHUDEvent_ReticleDataUpdate_idReticleData_t currentData;
	// Offset: 0x290 (656d)  Size: 0x110 (272d)
	idHUDEvent_ReticleDataUpdate_idReticleData_t previousData;
	// Offset: 0x3A0 (928d)  Size: 0x4 (4d)
	idDeclWeaponReticle_reticleStyle_t style;
	// Offset: 0x3a4 (932d) Size: 0x4 (4d)
	char pad_932[4];
	// Offset: 0x3A8 (936d)  Size: 0x8 (8d)
	idDeclWeaponReticle* declReticle;
	// Offset: 0x3B0 (944d)  Size: 0x8 (8d)
	idSWFSpriteInstance* reticleSprite;
	// Offset: 0x3B8 (952d) Size: 0x308 (776d)
	char pad_End[776];
}; // size: 0x6c0 (Size Dec: 1728)
static_assert(sizeof(idSWFWidget_Hud_Reticle) == 1728, "Size of idSWFWidget_Hud_Reticle is wrong !");


// idHUD_Reticle : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_Reticle {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x110 (272d)
	idHUDEvent_ReticleDataUpdate_idReticleData_t currentReticleData;
	// Offset: 0x208 (520d)  Size: 0x128 (296d)    (idArray < idSWFWidget_Hud_Reticle * , 37 >)
	idSWFWidget_Hud_Reticle* reticles_ptr[37];
	// Offset: 0x330 (816d)  Size: 0x4 (4d)
	int activeReticleStyle;
	// Offset: 0x334 (820d) Size: 0x4 (4d)
	char pad_820[4];
	// Offset: 0x338 (824d)  Size: 0x8 (8d)
	idDeclWeaponReticle* activeReticleDecl;
	// Offset: 0x340 (832d) Size: 0x8 (8d)
	char pad_832[8];
	// Offset: 0x348 (840d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance hitFlashSpr;
	// Offset: 0x378 (888d)  Size: 0x30 (48d)
	idSWFCachedSpriteInstance hitFlashLoopSpr;
}; // size: 0x3a8 (Size Dec: 936)
static_assert(sizeof(idHUD_Reticle) == 936, "Size of idHUD_Reticle is wrong !");


// idSWFWidget_EquipmentItem : idSWFWidget : idClass : idEventArgUser
struct idSWFWidget_EquipmentItem {
	// Offset: 0x0 (0d) Size: 0x180 (384d)
	char pad_0[384];
	// Offset: 0x180 (384d)  Size: 0x30 (48d)
	idStr dynamincIconName;
	// Offset: 0x1B0 (432d)  Size: 0x30 (48d)
	idStr staticIconName;
	// Offset: 0x1e0 (480d) Size: 0x4 (4d)
	char pad_480[4];
	// Offset: 0x1E4 (484d)  Size: 0x4 (4d)
	float cooldownValue;
	// Offset: 0x1E8 (488d)  Size: 0x4 (4d)
	swfNamedColors_t swfColor;
	// Offset: 0x1EC (492d)  Size: 0x4 (4d)
	swfNamedColors_t iconSWFColor;
	// Offset: 0x1F0 (496d)  Size: 0x8 (8d)
	idSWFSpriteInstance* ctaSpr;
	// Offset: 0x1F8 (504d)  Size: 0x8 (8d)
	idSWFSpriteInstance* cooldownSpr;
	// Offset: 0x200 (512d) Size: 0x18 (24d)
	char pad_End[24];
}; // size: 0x218 (Size Dec: 536)
static_assert(sizeof(idSWFWidget_EquipmentItem) == 536, "Size of idSWFWidget_EquipmentItem is wrong !");


// idHUD_WeaponInfo : idHUDElement : idUIElement : idClass : idEventArgUser
struct idHUD_WeaponInfo {
	// Offset: 0x0 (0d) Size: 0xf8 (248d)
	char pad_0[248];
	// Offset: 0xF8 (248d)  Size: 0x4 (4d)
	int updateFlags;
	// Offset: 0xfc (252d) Size: 0x4 (4d)
	char pad_252[4];
	// Offset: 0x100 (256d)  Size: 0x8 (8d)	Weapon
	idDeclWeapon* currentWeapon;
	// Offset: 0x108 (264d) Size: 0x54 (84d)
	char pad_264[84];
	// Offset: 0x15C (348d)  Size: 0x4 (4d)
	int chainsawAmmo;
	// Offset: 0x160 (352d)  Size: 0x4 (4d)
	int chainsawMaxAmmo;
	// Offset: 0x164 (356d) Size: 0x4 (4d)
	char pad_356[4];
	// Offset: 0x168 (360d)  Size: 0x1 (1d)	Crucible
	bool crucibleEquipped;
	// Offset: 0x169 (361d)  Size: 0x1 (1d)
	bool crucibleShown;
	// Offset: 0x16a (362d) Size: 0x2 (2d)
	char pad_362[2];
	// Offset: 0x16C (364d)  Size: 0x4 (4d)
	int crucibleCharge;
	// Offset: 0x170 (368d)  Size: 0x4 (4d)
	int crucibleMaxCharges;
	// Offset: 0x174 (372d) Size: 0x4 (4d)
	char pad_372[4];
	// Offset: 0x178 (376d)  Size: 0x8 (8d)	Equipment
	idDeclInventory* equipmentItem;
	// Offset: 0x180 (384d) Size: 0x39 (57d)
	char pad_384[57];
	// Offset: 0x1B9 (441d)  Size: 0x1 (1d)	Hammer
	bool hammerShown;
	// Offset: 0x1ba (442d) Size: 0x2 (2d)
	char pad_442[2];
	// Offset: 0x1BC (444d)  Size: 0x4 (4d)
	float hammerRecharge;
	// Offset: 0x1C0 (448d)  Size: 0x4 (4d)
	float hammerSupercharge;
	// Offset: 0x1C4 (452d)  Size: 0x1 (1d)
	bool hammerPulse;
	// Offset: 0x1c5 (453d) Size: 0xb (11d)
	char pad_453[11];
	// Offset: 0x1D0 (464d)  Size: 0x8 (8d)
	idSWFWidget_EquipmentItem* equipmentWidget;
	// Offset: 0x1d8 (472d) Size: 0x35 (53d)
	char pad_472[53];
	// Offset: 0x20D (525d)  Size: 0x1 (1d)
	bool playingLowAmmoAnim;
	// Offset: 0x20E (526d) Size: 0xA2 (162d)
	char pad_End[162];
}; // size: 0x2b0 (Size Dec: 688)
static_assert(sizeof(idHUD_WeaponInfo) == 688, "Size of idHUD_WeaponInfo is wrong !");


// idInventoryItem : idEventReceiver : idManagedClass : idClass : idEventArgUser
struct idInventoryItem {
	// Offset: 0x0 (0d) Size: 0x38 (56d)
	char pad_0[56];
	// Offset: 0x38 (56d)  Size: 0x8 (8d)	my decl
	idDeclInventory* decl;
	// Offset: 0x40 (64d) Size: 0xD0 (208d)
	char pad_End[208];
}; // size: 0x110 (Size Dec: 272)
static_assert(sizeof(idInventoryItem) == 272, "Size of idInventoryItem is wrong !");


// idEntity : idEngineEntity : idEventReceiver : idManagedClass : idClass : idEventArgUser
struct idEntity {
	// Offset: 0x0 (0d) Size: 0x40 (64d)
	char pad_0[64];
	// Offset: 0x40 (64d)  Size: 0x30 (48d)	m_name of this entity
	idStr name;
	// Offset: 0x70 (112d)  Size: 0x4 (4d)	unique prefab instance identifier
	unsigned int prefabInstanceId;
	// Offset: 0x74 (116d)  Size: 0xC (12d)	position this entity is spawned {{ units = m }}
	idVec3 spawnPosition;
	// Offset: 0x80 (128d) Size: 0x1C0 (448d)
	char pad_End[448];
}; // size: 0x240 (Size Dec: 576)
static_assert(sizeof(idEntity) == 576, "Size of idEntity is wrong !");


struct idInventoryCollection {
	// Offset: 0x0 (0d)  Size: 0x18 (24d)    (idList < idManagedClassPtr < idInventoryItem > , TAG_IDLIST , false >)
	idList inventory;
	// Offset: 0x18 (24d) Size: 0x550 (1360d)
	char pad_End[1360];
}; // size: 0x568 (Size Dec: 1384)
static_assert(sizeof(idInventoryCollection) == 1384, "Size of idInventoryCollection is wrong !");


// idActor : idAnimatedEntity : idBloatedEntity : idEntity : idEngineEntity : idEventReceiver : idManagedClass : idClass : idEventArgUser
struct idActor {
	// Offset: 0x0 (0d) Size: 0x2850 (10320d)
	char pad_0[10320];
	// Offset: 0x2850 (10320d)  Size: 0x1 (1d)	shared demon / player states
	bool pinged;
	// Offset: 0x2851 (10321d) Size: 0xdb7 (3511d)
	char pad_10321[3511];
	// Offset: 0x3608 (13832d)  Size: 0x568 (1384d)	everything the actor is holding
	idInventoryCollection inventory;
	// Offset: 0x3b70 (15216d) Size: 0x1010 (4112d)
	char pad_15216[4112];
	// Offset: 0x4B80 (19328d)  Size: 0x4 (4d)
	float overdrivePoints;
	// Offset: 0x4b84 (19332d) Size: 0x9c (156d)
	char pad_19332[156];
	// Offset: 0x4C20 (19488d)  Size: 0x8 (8d)    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long lastTeleportTime;
}; // size: 0x4c28 (Size Dec: 19496)
static_assert(sizeof(idActor) == 19496, "Size of idActor is wrong !");


// idGK_UpgradeHandler : idUpgradeHandler
struct idGK_UpgradeHandler {
	// Offset: 0x0 (0d) Size: 0x158 (344d)
	char pad_0[344];
	// Offset: 0x158 (344d)  Size: 0x4 (4d)	increases by some fractional amount for each GK -- can only be used when >= 1.0f
	float bloodPunchChargePercent;
	// Offset: 0x15c (348d) Size: 0x44 (68d)
	char pad_348[68];
	// Offset: 0x1A0 (416d)  Size: 0x4 (4d)
	fxCondition_t fxBloodPunchAOE;
	// Offset: 0x1a4 (420d) Size: 0x5 (5d)
	char pad_420[5];
	// Offset: 0x1A9 (425d)  Size: 0x1 (1d)
	bool bloodPunchSuperChargedSoundActivated;
	// Offset: 0x1AA (426d) Size: 0x6 (6d)
	char pad_End[6];
}; // size: 0x1b0 (Size Dec: 432)
static_assert(sizeof(idGK_UpgradeHandler) == 432, "Size of idGK_UpgradeHandler is wrong !");


// idPlayerDashboard : idDamageCompiler_Listener
struct idPlayerDashboard {
	// Offset: 0x0 (0d) Size: 0xf168 (61800d)
	char pad_0[61800];
	// Offset: 0xF168 (61800d)  Size: 0x1B0 (432d)	Handler for the player upgrades.
	idGK_UpgradeHandler GKUpgrades;
	// Offset: 0xF318 (62232d) Size: 0x780 (1920d)
	char pad_End[1920];
}; // size: 0xfa98 (Size Dec: 64152)
static_assert(sizeof(idPlayerDashboard) == 64152, "Size of idPlayerDashboard is wrong !");


struct idPlayer_equipmentInfo_t_itemData_t {
	// Offset: 0x0 (0d)  Size: 0x8 (8d)	track this so we can track for multiple different timeouts once equipment has multiple uses    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long equipmentRechargeStartTime;
	// Offset: 0x8 (8d)  Size: 0x8 (8d)	track total duration so that we can calculate % without having to know what equipment timeouts we're tracking    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long equipmentRechargeDuration;
	// Offset: 0x10 (16d)  Size: 0x8 (8d)	recharge timer    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long equipmentRechargeTime;
	// Offset: 0x18 (24d)  Size: 0x8 (8d)	earliest time equipment can be used again (when it has multiple uses)    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long equipmentReuseTime;
	// Offset: 0x20 (32d)  Size: 0x4 (4d)	current number of uses available
	int equipmentUsesAvailable;
	// Offset: 0x24 (36d) Size: 0x4 (4d)
	char pad_End[4];
}; // size: 0x28 (Size Dec: 40)
static_assert(sizeof(idPlayer_equipmentInfo_t_itemData_t) == 40, "Size of idPlayer_equipmentInfo_t_itemData_t is wrong !");


struct idPlayer_equipmentInfo_t {
	// Offset: 0x0 (0d)  Size: 0x4 (4d)	index into playerProps->validEquipmentList
	int currentIndex;
	// Offset: 0x4 (4d) Size: 0x24 (36d)
	char pad_4[36];
	// Offset: 0x28 (40d)  Size: 0xA0 (160d)	equipment (frag grenade, ice bomb, and flame belch)    (idArray < idPlayer::equipmentInfo_t::itemData_t , 4 >)
	idPlayer_equipmentInfo_t_itemData_t equipmentItems_ptr[4];
	// Offset: 0xC8 (200d) Size: 0x10 (16d)
	char pad_End[16];
}; // size: 0xd8 (Size Dec: 216)
static_assert(sizeof(idPlayer_equipmentInfo_t) == 216, "Size of idPlayer_equipmentInfo_t is wrong !");


struct idPlayerBodyReactionState_t {
	// Offset: 0x0 (0d)  Size: 0x8 (8d)	the name of the state
	idAtomicString name;
	// Offset: 0x8 (8d)  Size: 0x30 (48d)	the destination animweb state for the third person body    (idAnimWebPath)
	char tpBodyDestPath[48];
	// Offset: 0x38 (56d)  Size: 0x30 (48d)	the via animweb state for the third person body    (idAnimWebPath)
	char tpBodyViaPath[48];
	// Offset: 0x68 (104d)  Size: 0x4 (4d)	the first person hands anim to play (or NONE to hide the fp hands)
	idHandsCustomAnimSelect fpHandsCustomAnim;
}; // size: 0x70 (Size Dec: 112)
static_assert(sizeof(idPlayerBodyReactionState_t) == 112, "Size of idPlayerBodyReactionState_t is wrong !");


// idSoundEvent : idDeclTypeInfo : idDecl : idResource
struct alignas(8) idSoundEvent {
	// Offset: 0x0 (0d) Size: 0x88 (136d)
	char pad_0[136];
	// Offset: 0x88 (136d)  Size: 0x4 (4d)    (idSoundWwiseID)
	char eventID[4];
}; // size: 0x90 (Size Dec: 144)
static_assert(sizeof(idSoundEvent) == 144, "Size of idSoundEvent is wrong !");


struct idDeclPlayerProps_playerSounds_t {
	// Offset: 0x0 (0d)  Size: 0x8 (8d)	Sound to play when a tutorial starts.
	idSoundEvent* sndObjectiveAdded;
	// Offset: 0x8 (8d)  Size: 0x8 (8d)	Sound to play when a tutorial starts.
	idSoundEvent* sndObjectiveCompleted;
	// Offset: 0x10 (16d)  Size: 0x8 (8d)	Sound to play when a tutorial starts.
	idSoundEvent* sndMainObjectiveAdded;
	// Offset: 0x18 (24d)  Size: 0x8 (8d)	Sound to play when a tutorial starts.
	idSoundEvent* sndMainObjectiveCompleted;
	// Offset: 0x20 (32d)  Size: 0x8 (8d)	Sound to play when a tutorial starts.
	idSoundEvent* sndMapUpdated;
	// Offset: 0x28 (40d)  Size: 0x8 (8d)	Sound to play when a tutorial starts.
	idSoundEvent* sndTutorialStart;
	// Offset: 0x30 (48d)  Size: 0x8 (8d)	Sound to play when starting to use something
	idSoundEvent* sndUseStart;
	// Offset: 0x38 (56d)  Size: 0x8 (8d)	Sound to play when finished using something
	idSoundEvent* sndUseEnd;
	// Offset: 0x40 (64d)  Size: 0x8 (8d)	sound to play when down and almost dead ( formerly while waiting for d e f i b )
	idSoundEvent* sndAlmostDead;
	// Offset: 0x48 (72d)  Size: 0x8 (8d)	sound to play when health drops below 10
	idSoundEvent* sndBreatheHeavy;
	// Offset: 0x50 (80d)  Size: 0x8 (8d)	sound to play when health drops below 20
	idSoundEvent* sndBreatheMedium;
	// Offset: 0x58 (88d)  Size: 0x8 (8d)	sound to play when health drops below 20
	idSoundEvent* sndBreatheSprinting;
	// Offset: 0x60 (96d)  Size: 0x8 (8d)	sound to play when player cannot use or pickup an item
	idSoundEvent* sndCantUseItem;
	// Offset: 0x68 (104d)  Size: 0x8 (8d)	sound to play when a checkpoint is saved
	idSoundEvent* sndCheckpointSaved;
	// Offset: 0x70 (112d)  Size: 0x8 (8d)	sound to play when quick using with no items available
	idSoundEvent* sndOutOfItems;
	// Offset: 0x78 (120d)  Size: 0x8 (8d)	generic sound for picking up an item
	idSoundEvent* sndPickup;
	// Offset: 0x80 (128d)  Size: 0x8 (8d)	sound for possessing actors
	idSoundEvent* sndPossess;
	// Offset: 0x88 (136d)  Size: 0x8 (8d)	sound looped during actor possession
	idSoundEvent* sndPossessLoop;
	// Offset: 0x90 (144d)  Size: 0x8 (8d)	sound to play when player receives potential health
	idSoundEvent* sndUseBandage;
	// Offset: 0x98 (152d)  Size: 0x8 (8d)	sound when burning
	idSoundEvent* sndBurn;
	// Offset: 0xA0 (160d)  Size: 0x8 (8d)	controller sound
	idSoundEvent* sndButtonBad;
	// Offset: 0xA8 (168d)  Size: 0x8 (8d)	controller sound
	idSoundEvent* sndButtonDown;
	// Offset: 0xB0 (176d)  Size: 0x8 (8d)	When we go into Weapon select
	idSoundEvent* sndWeaponSelectIn;
	// Offset: 0xB8 (184d)  Size: 0x8 (8d)	When we go Out of Weapon select
	idSoundEvent* sndWeaponSelectOut;
	// Offset: 0xC0 (192d)  Size: 0x8 (8d)	When secondary fire is pulled but the weapon has none
	idSoundEvent* sndWeaponNoSecondary;
	// Offset: 0xC8 (200d)  Size: 0x8 (8d)	controller sound
	idSoundEvent* sndButtonUp;
	// Offset: 0xD0 (208d)  Size: 0x8 (8d)	sound when player tries dropping an item into a solid
	idSoundEvent* sndCantDropItem;
	// Offset: 0xD8 (216d)  Size: 0x8 (8d)	sound to play when the player tries to loot something but can't... maybe it's empty?
	idSoundEvent* sndCantLootEntity;
	// Offset: 0xE0 (224d)  Size: 0x8 (8d)	controller sound
	idSoundEvent* sndClickDown;
	// Offset: 0xE8 (232d)  Size: 0x8 (8d)	controller sound
	idSoundEvent* sndClickUp;
	// Offset: 0xF0 (240d)  Size: 0x8 (8d)	death sound
	idSoundEvent* sndDeath;
	// Offset: 0xF8 (248d)  Size: 0x8 (8d)	sound to play when the player disassembles something successfully
	idSoundEvent* sndDisassemble;
	// Offset: 0x100 (256d)  Size: 0x8 (8d)	sound to play when the player view enters water (ie: a bubble loop)
	idSoundEvent* sndEnterWater;
	// Offset: 0x108 (264d)  Size: 0x8 (8d)	sound to play when the player view exits water (ie: some sort of gasp)
	idSoundEvent* sndExitWater;
	// Offset: 0x110 (272d)  Size: 0x8 (8d)	sound to play when jumping
	idSoundEvent* sndJump;
	// Offset: 0x118 (280d)  Size: 0x8 (8d)	sound to play when double jumping (demon player)
	idSoundEvent* sndDoubleJump;
	// Offset: 0x120 (288d)  Size: 0x8 (8d)	sound to play when crouching
	idSoundEvent* sndCrouch;
	// Offset: 0x128 (296d)  Size: 0x8 (8d)	sound to play when standing up
	idSoundEvent* sndStandUp;
	// Offset: 0x130 (304d)  Size: 0x8 (8d)	sound to play for a landing on a surface that has NO DAMAGE
	idSoundEvent* sndLandNoDamage;
	// Offset: 0x138 (312d)  Size: 0x8 (8d)	sound to play while falling when impact will be a large landing or worse
	idSoundEvent* sndFallingLargeLandingStart;
	// Offset: 0x140 (320d)  Size: 0x8 (8d)	sound to play to stop fallingLargeLanding sound
	idSoundEvent* sndFallingLargeLandingStop;
	// Offset: 0x148 (328d)  Size: 0x8 (8d)	sound to play when falling a fatal distance
	idSoundEvent* sndFallingFatal;
	// Offset: 0x150 (336d)  Size: 0x8 (8d)	sound to play when the player successfully loots something.
	idSoundEvent* sndLootEntity;
	// Offset: 0x158 (344d)  Size: 0x8 (8d)	sound to play when a cinematic is skipped
	idSoundEvent* sndSkipCinematic;
	// Offset: 0x160 (352d)  Size: 0x8 (8d)	sound to play when the player is at low health.
	idSoundEvent* sndLowHealth;
	// Offset: 0x168 (360d)  Size: 0x8 (8d)	sound to play when the player recovers from low health.
	idSoundEvent* sndLowHealthRecovery;
	// Offset: 0x170 (368d)  Size: 0x4 (4d)	how many ms to wait before can play sndLowHealth or sndLowHealthRecovery again after playing each one (tracked separately)    (idTypesafeTime < int , millisecondUnique_t , 1000 >)
	int minLowHealthSoundsRepeatMS;
	// Offset: 0x174 (372d) Size: 0x4 (4d)
	char pad_372[4];
	// Offset: 0x178 (376d)  Size: 0x8 (8d)	foley sound for legs crossing (added from Doom4)
	idSoundEvent* sndLegsCrossing;
	// Offset: 0x180 (384d)  Size: 0x8 (8d)	foley sound for legs crossing when crouched (added from Doom4)
	idSoundEvent* sndLegsCrossingCrouched;
	// Offset: 0x188 (392d)  Size: 0x8 (8d)	sound shader to play for small amounts of damage
	idSoundEvent* sndPainSmall;
	// Offset: 0x190 (400d)  Size: 0x8 (8d)	sound shader to play for medium amounts of damage
	idSoundEvent* sndPainMedium;
	// Offset: 0x198 (408d)  Size: 0x8 (8d)	sound shader to play for large amounts of damage
	idSoundEvent* sndPainLarge;
	// Offset: 0x1A0 (416d)  Size: 0x8 (8d)	sound shader to play for small amounts of damage instead of sndPainSmall when it's self-inflicted
	idSoundEvent* sndSelfPainSmall;
	// Offset: 0x1A8 (424d)  Size: 0x8 (8d)	sound shader to play for medium amounts of damage instead of sndPainMedium when it's self-inflicted
	idSoundEvent* sndSelfPainMedium;
	// Offset: 0x1B0 (432d)  Size: 0x8 (8d)	sound shader to play for large amounts of damage instead of sndPainMedium when it's self-inflicted
	idSoundEvent* sndSelfPainLarge;
	// Offset: 0x1B8 (440d)  Size: 0x4 (4d)	health threshold to use very low pain small, medium, large
	float veryLowSoundsHealthThreshold;
	// Offset: 0x1bc (444d) Size: 0x4 (4d)
	char pad_444[4];
	// Offset: 0x1C0 (448d)  Size: 0x8 (8d)	if health is under veryLowSoundsHealthThreshold we always play this sound
	idSoundEvent* sndVeryLowPain;
	// Offset: 0x1C8 (456d)  Size: 0x8 (8d)	sound to play when the player's armor gets depleted
	idSoundEvent* sndSelfArmorDepleted;
	// Offset: 0x1D0 (464d)  Size: 0x8 (8d)	sound shader to play when the player is low health
	idSoundEvent* sndHeartBeatLub;
	// Offset: 0x1D8 (472d)  Size: 0x8 (8d)	sound shader to play when the player is low health
	idSoundEvent* sndHeartBeatDub;
	// Offset: 0x1E0 (480d)  Size: 0x8 (8d)	shader for canceling revive
	idSoundEvent* sndCancelRevive;
	// Offset: 0x1E8 (488d)  Size: 0x8 (8d)	shader for when revive goes through
	idSoundEvent* sndFinishRevive;
	// Offset: 0x1F0 (496d)  Size: 0x4 (4d)	don't play two of the same type of feedback sounds sooner than this many MS apart    (idTypesafeTime < int , millisecondUnique_t , 1000 >)
	int feedbackSoundMinRetriggerMS;
	// Offset: 0x1f4 (500d) Size: 0x4 (4d)
	char pad_500[4];
	// Offset: 0x1F8 (504d)  Size: 0x8 (8d)	damage feedback sound to play (non headshots only - headshots use sndDmgDealtHeadShotFeedback)
	idSoundEvent* sndDmgDealtFeedback;
	// Offset: 0x200 (512d)  Size: 0x8 (8d)	damage to armor feedback sound
	idSoundEvent* sndDmgDealtToArmorFeedback;
	// Offset: 0x208 (520d)  Size: 0x8 (8d)	damage feedback sound to play for melee damage
	idSoundEvent* sndMeleeDmgDealtFeedback;
	// Offset: 0x210 (528d)  Size: 0x8 (8d)	damage feedback sound to play for non melee headshots (headShot = true in damageScalarDamageFlags_t) (supersedes sndDmgDealthHeadShotFeedback)
	idSoundEvent* sndHeadShotDmgDealtFeedback;
	// Offset: 0x218 (536d)  Size: 0x8 (8d)	damage feedback on critical hits
	idSoundEvent* sndCritDmgDealtFeedback;
	// Offset: 0x220 (544d)  Size: 0x8 (8d)	attempted to teleport to a location that player will not fit and no good teleport positions were ever discovered
	idSoundEvent* sndMPTeleportFailed;
	// Offset: 0x228 (552d)  Size: 0x8 (8d)	threw a teleporter but never activated it
	idSoundEvent* sndMPTeleporterTimedOut;
	// Offset: 0x230 (560d)  Size: 0x8 (8d)	threw a teleporter but someone shot it
	idSoundEvent* sndMPTeleporterDestroyed;
	// Offset: 0x238 (568d)  Size: 0x8 (8d)	threw an exploding projectile and it didn't hit anyone
	idSoundEvent* sndMPExplosionMissed;
	// Offset: 0x240 (576d)  Size: 0x8 (8d)	my slicer got destroyed
	idSoundEvent* sndMPSlicerDestroyed;
	// Offset: 0x248 (584d)  Size: 0x8 (8d)	i got pinged by an enemy sensor
	idSoundEvent* sndMPPingVictim;
	// Offset: 0x250 (592d)  Size: 0x8 (8d)	my threat sensor got destroyed
	idSoundEvent* sndMPThreatSensorDestroyedExpired;
	// Offset: 0x258 (600d)  Size: 0x8 (8d)	my threat sensor expired or reployed
	idSoundEvent* sndMPThreatSensorExpired;
	// Offset: 0x260 (608d)  Size: 0x8 (8d)	i got pinged by an enemy sensor
	idSoundEvent* sndMPHealBySiphon;
	// Offset: 0x268 (616d)  Size: 0x8 (8d)	drone is seeking me
	idSoundEvent* sndMPDroneTarget;
	// Offset: 0x270 (624d)  Size: 0x8 (8d)	my drone is seeking a target
	idSoundEvent* sndMPDroneSeeking;
	// Offset: 0x278 (632d)  Size: 0x8 (8d)	my drone attacked its target
	idSoundEvent* sndMPDroneAttackedTarget;
	// Offset: 0x280 (640d)  Size: 0x8 (8d)	my turret was destroyed or timed out
	idSoundEvent* sndMPTurretDestroyed;
	// Offset: 0x288 (648d)  Size: 0x8 (8d)	my turret attacked somebody
	idSoundEvent* sndMPTurretAttacked;
	// Offset: 0x290 (656d)  Size: 0x8 (8d)	damaged by a siphon grenade
	idSoundEvent* sndMPDamageBySiphon;
	// Offset: 0x298 (664d)  Size: 0x8 (8d)	becoming frozen in Freeze Tag
	idSoundEvent* sndMPOnFrozen;
	// Offset: 0x2A0 (672d)  Size: 0x8 (8d)	played on a frozen player who begins being thawed
	idSoundEvent* sndMPStartThawingLoop;
	// Offset: 0x2A8 (680d)  Size: 0x8 (8d)	played when a frozen player being thawed is interrupted from thawing
	idSoundEvent* sndMPInterruptThawing;
	// Offset: 0x2B0 (688d)  Size: 0x8 (8d)	played when a frozen player is successfully thawed
	idSoundEvent* sndMPOnThawed;
	// Offset: 0x2B8 (696d)  Size: 0x8 (8d)	i entered an enemy siphon, start the loop
	idSoundEvent* sndMPStartEnterSiphonLoop;
	// Offset: 0x2C0 (704d)  Size: 0x8 (8d)	stop the siphon loop
	idSoundEvent* sndMPStopEnterSiphonLoop;
	// Offset: 0x2C8 (712d)  Size: 0x8 (8d)	i'm inside the siphon, modify all sounds
	idSoundEvent* sndMPStartSiphonDistortion;
	// Offset: 0x2D0 (720d)  Size: 0x8 (8d)	left the siphon, stop the distortion
	idSoundEvent* sndMPStopSiphonDistortion;
	// Offset: 0x2D8 (728d)  Size: 0x8 (8d)	sound shader to play when quad damage end
	idSoundEvent* sndEndQuadDamage;
	// Offset: 0x2E0 (736d)  Size: 0x8 (8d)	gieger tick which is played more rapidly as we approach danger
	idSoundEvent* sndRadiationWarning;
	// Offset: 0x2E8 (744d)  Size: 0x8 (8d)	sound when we are actually in the radiation volume
	idSoundEvent* sndRadiationDamage;
	// Offset: 0x2F0 (752d)  Size: 0x8 (8d)	sound to play when the player gets to full Radiation.
	idSoundEvent* sndRadiationVO;
	// Offset: 0x2F8 (760d)  Size: 0x8 (8d)	extreme heat tick which is played more rapidly as we approach danger
	idSoundEvent* sndFireWarning;
	// Offset: 0x300 (768d)  Size: 0x8 (8d)	sound when we are taking damage from heat
	idSoundEvent* sndFireDamage;
	// Offset: 0x308 (776d)  Size: 0x8 (8d)	sound to play when the player gets to full Heat.
	idSoundEvent* sndFireVO;
	// Offset: 0x310 (784d)  Size: 0x8 (8d)	gieger tick which is played more rapidly as we approach danger
	idSoundEvent* sndBioWarning;
	// Offset: 0x318 (792d)  Size: 0x8 (8d)	sound when we are actually in the radiation volume
	idSoundEvent* sndBioDamage;
	// Offset: 0x320 (800d)  Size: 0x8 (8d)	sound to play when the player gets to full Radiation.
	idSoundEvent* sndBioVO;
	// Offset: 0x328 (808d)  Size: 0x8 (8d)	extreme heat tick which is played more rapidly as we approach danger
	idSoundEvent* sndLavaWarning;
	// Offset: 0x330 (816d)  Size: 0x8 (8d)	sound when we are taking damage from heat
	idSoundEvent* sndLavaDamage;
	// Offset: 0x338 (824d)  Size: 0x8 (8d)	sound to play when the player gets to full Heat.
	idSoundEvent* sndLavaVO;
	// Offset: 0x340 (832d)  Size: 0x8 (8d)	sound to play when EMInterference is present
	idSoundEvent* sndEMIPresent;
	// Offset: 0x348 (840d)  Size: 0x8 (8d)	sound to play when EMInterference dissipates
	idSoundEvent* sndEMIDissipate;
	// Offset: 0x350 (848d)  Size: 0x8 (8d)	sound when the environment suit is charging
	idSoundEvent* sndEnviromentSuitCharge;
	// Offset: 0x358 (856d)  Size: 0x8 (8d)	sound when the environment suit is finished charging
	idSoundEvent* sndEnviromentSuitChargeDone;
	// Offset: 0x360 (864d)  Size: 0x8 (8d)	Sound when player initiates a dodge.
	idSoundEvent* sndDodgeInitiate;
	// Offset: 0x368 (872d)  Size: 0x8 (8d)	Sound when player ends a dodge.
	idSoundEvent* sndDodgeEnd;
	// Offset: 0x370 (880d)  Size: 0x8 (8d)	Sound when player has valid backstab.
	idSoundEvent* sndDodgeBackstab;
	// Offset: 0x378 (888d)  Size: 0x8 (8d)	Sound when enemy is glory killable.
	idSoundEvent* sndHostileGloryKillable;
	// Offset: 0x380 (896d)  Size: 0x8 (8d)	Sound when player goes up a level
	idSoundEvent* sndLevelUp;
	// Offset: 0x388 (904d)  Size: 0x8 (8d)	Sound when player goes up an echelon
	idSoundEvent* sndEchelonUp;
	// Offset: 0x390 (912d)  Size: 0x8 (8d)	Sound when player completes a challenge
	idSoundEvent* sndChallengeComplete;
	// Offset: 0x398 (920d)  Size: 0x8 (8d)	Sound when player completes a challenge
	idSoundEvent* sndChallengeUpdate;
	// Offset: 0x3A0 (928d)  Size: 0x8 (8d)	Sound when player finds secret.
	idSoundEvent* sndSecretFound;
	// Offset: 0x3A8 (936d)  Size: 0x8 (8d)	sound when player unlocks suit slot.
	idSoundEvent* sndSuitSlotUnlock;
	// Offset: 0x3B0 (944d)  Size: 0x8 (8d)	sound when player purchases an upgrade
	idSoundEvent* sndDossierPurchaseUpgrade;
	// Offset: 0x3B8 (952d)  Size: 0x8 (8d)	sound when player begins a purchase
	idSoundEvent* sndDossierBeginPurchase;
	// Offset: 0x3C0 (960d)  Size: 0x8 (8d)	sound when player cancels a purchase
	idSoundEvent* sndDossierCancelPurchase;
	// Offset: 0x3C8 (968d)  Size: 0x8 (8d)	sound when player gains a mastery
	idSoundEvent* sndDossierGetMastery;
	// Offset: 0x3D0 (976d)  Size: 0x8 (8d)	sound when player gains a mod
	idSoundEvent* sndGainWeaponMod;
	// Offset: 0x3D8 (984d)  Size: 0x8 (8d)	Sound when player is in fast Hint level.
	idSoundEvent* secretHintLevelFast;
	// Offset: 0x3E0 (992d)  Size: 0x8 (8d)	Sound when player is in medium Hint level.
	idSoundEvent* secretHintLevelMedium;
	// Offset: 0x3E8 (1000d)  Size: 0x8 (8d)	Sound when player is in slow Hint level.
	idSoundEvent* secretHintLevelSlow;
	// Offset: 0x3F0 (1008d)  Size: 0x8 (8d)	Sound when player Gains a codex.
	idSoundEvent* sndCodexGained;
	// Offset: 0x3F8 (1016d)  Size: 0x8 (8d)	Sound when player gains a point from combat score.
	idSoundEvent* sndCombatScoreStarComplete;
	// Offset: 0x400 (1024d)  Size: 0x8 (8d)	Sound when visor appears on EOL.
	idSoundEvent* sndEOLVisor;
	// Offset: 0x408 (1032d)  Size: 0x8 (8d)	Sound when combat score appears on EOL
	idSoundEvent* sndEOLCombatScore;
	// Offset: 0x410 (1040d)  Size: 0x8 (8d)	Sound when challenges appear on EOL.
	idSoundEvent* sndEOLChallenges;
	// Offset: 0x418 (1048d)  Size: 0x8 (8d)	Sound when collectibles appear on EOL.
	idSoundEvent* sndEOLCollectables;
	// Offset: 0x420 (1056d)  Size: 0x8 (8d)	Sound when player continues to the next level.
	idSoundEvent* sndEOLContinue;
	// Offset: 0x428 (1064d)  Size: 0x8 (8d)	Sound photomode pause unpause events
	idSoundEvent* sndPhotoModePause;
	// Offset: 0x430 (1072d)  Size: 0x8 (8d)	Sound photomode pause unpause events
	idSoundEvent* sndPhotoModeUnpause;
	// Offset: 0x438 (1080d)  Size: 0x8 (8d)	Sound when an equipped rune's passive ability activates
	idSoundEvent* sndRunePassiveTriggered;
	// Offset: 0x440 (1088d)  Size: 0x8 (8d)	Sound when the player tries to use an argentum ability when it's not ready to be used.
	idSoundEvent* sndArgentumAbilityUnusable;
	// Offset: 0x448 (1096d)  Size: 0x8 (8d)	sound to play when equipment is charged and ready
	idSoundEvent* sndEquipmentChargedAndReadyFrag;
	// Offset: 0x450 (1104d)  Size: 0x8 (8d)	sound to play when the ice bomb is charged and ready
	idSoundEvent* sndEquipmentChargedAndReadyIceBomb;
	// Offset: 0x458 (1112d)  Size: 0x8 (8d)	sound to play when flame belch is charged and ready
	idSoundEvent* sndEquipmentChargedAndReadyFlameBelch;
	// Offset: 0x460 (1120d)  Size: 0x8 (8d)	sound to play when chainsaw is charged and ready
	idSoundEvent* sndChainsawChargedAndReady;
	// Offset: 0x468 (1128d)  Size: 0x8 (8d)	sound to play when using chainsaw with not enough fuel
	idSoundEvent* sndOutOfChainsawFuel;
	// Offset: 0x470 (1136d)  Size: 0x8 (8d)	sound to play when using crucible with not enough fuel
	idSoundEvent* sndOutOfCrucibleFuel;
	// Offset: 0x478 (1144d)  Size: 0x8 (8d)	sound to play when demon ability is denied
	idSoundEvent* sndDemonAbilityDenied;
	// Offset: 0x480 (1152d)  Size: 0x18 (24d)	locked on sounds    (idList < idDeclPlayerProps::lockOnSoundInfo_t , TAG_IDLIST , false >)
	idList lockedOnSounds;
}; // size: 0x498 (Size Dec: 1176)
static_assert(sizeof(idDeclPlayerProps_playerSounds_t) == 1176, "Size of idDeclPlayerProps_playerSounds_t is wrong !");


struct idDeclPlayerProps_validEquipmentEntry_t {
	// Offset: 0x0 (0d)  Size: 0x8 (8d)	the equipment item
	idDeclInventory* item;
	// Offset: 0x8 (8d)  Size: 0x1 (1d)	selectable or not - generally yes but in the case of the equipment launcher
	bool selectable;
	// Offset: 0x9 (9d) Size: 0x3 (3d)
	char pad_9[3];
	// Offset: 0xC (12d)  Size: 0x4 (4d)	there are left and right equipment launcher items but only the left will be selectable and then both are used at once if present for convenience to be able to associate this decl with a type for use with Equipment_UpgradeHandler
	equipmentType_t type;
}; // size: 0x10 (Size Dec: 16)
static_assert(sizeof(idDeclPlayerProps_validEquipmentEntry_t) == 16, "Size of idDeclPlayerProps_validEquipmentEntry_t is wrong !");


// idDeclPlayerProps : idGameDeclTypeInfo : idDeclTypeInfo : idDecl : idResource
struct idDeclPlayerProps {
	// Offset: 0x0 (0d) Size: 0x90 (144d)
	char pad_0[144];
	// Offset: 0x90 (144d)  Size: 0x498 (1176d)	------------------------ sounds ------------------------ player sound effects
	idDeclPlayerProps_playerSounds_t sounds;
	// Offset: 0x528 (1320d) Size: 0x318 (792d)
	char pad_1320[792];
	// Offset: 0x840 (2112d)  Size: 0x18 (24d)	list of equipment items player can pickup, cycle through, and use    (idList < idDeclPlayerProps::validEquipmentEntry_t , TAG_IDLIST , false >)
	idList validEquipmentList;
	// Offset: 0x858 (2136d) Size: 0xE0 (224d)
	char pad_End[224];
}; // size: 0x938 (Size Dec: 2360)
static_assert(sizeof(idDeclPlayerProps) == 2360, "Size of idDeclPlayerProps is wrong !");


// idPlayer : idActor : idAnimatedEntity : idBloatedEntity : idEntity : idEngineEntity : idEventReceiver : idManagedClass : idClass : idEventArgUser
struct idPlayer {
	// Offset: 0x0 (0d) Size: 0x6f88 (28552d)
	char pad_0[28552];
	// Offset: 0x6F88 (28552d)  Size: 0x8 (8d)	the last delay that was used for mixed mode    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long lastDelay;
	// Offset: 0x6F90 (28560d)  Size: 0x4 (4d)	How long the global cooldown takes.    (idTypesafeTime < int , millisecondUnique_t , 1000 >)
	int globalCooldownTimeMS;
	// Offset: 0x6f94 (28564d) Size: 0x4 (4d)
	char pad_28564[4];
	// Offset: 0x6F98 (28568d)  Size: 0xD8 (216d)	------------------------ Equipment ------------------------
	idPlayer_equipmentInfo_t equipmentInfo;
	// Offset: 0x7070 (28784d) Size: 0x3f0 (1008d)
	char pad_28784[1008];
	// Offset: 0x7460 (29792d)  Size: 0x1 (1d)	whether the player wants zoom or not
	bool wantZoom;
	// Offset: 0x7461 (29793d) Size: 0x10b4 (4276d)
	char pad_29793[4276];
	// Offset: 0x8515 (34069d)  Size: 0x1 (1d)	TODO: replace this concept and do this through HUD state instead; this is a temporary fix for beta.
	bool hideReticle;
	// Offset: 0x8516 (34070d)  Size: 0x1 (1d)	TODO: replace this concept and do this through HUD state instead; this is a temporary fix for beta.
	bool hideHudForCinematic;
	// Offset: 0x8517 (34071d) Size: 0x209 (521d)
	char pad_34071[521];
	// Offset: 0x8720 (34592d)  Size: 0x1 (1d)
	bool contextOptionSelected;
	// Offset: 0x8721 (34593d) Size: 0xf (15d)
	char pad_34593[15];
	// Offset: 0x8730 (34608d)  Size: 0x4 (4d)	cache hud flags before we transform into demon, so we can go back to correct flags when we transform back
	int hudFlagsBeforeDemon;
	// Offset: 0x8734 (34612d) Size: 0xebec (60396d)
	char pad_34612[60396];
	// Offset: 0x17320 (95008d)  Size: 0xFA98 (64152d)	Dashboard ( Meters and timers for the player )
	idPlayerDashboard dashboard;
	// Offset: 0x26db8 (159160d) Size: 0x8850 (34896d)
	char pad_159160[34896];
	// Offset: 0x2F608 (194056d)  Size: 0x8 (8d)	------------------------ player properties ------------------------ Extra definition data about the player
	idDeclPlayerProps* playerProps;
	// Offset: 0x2f610 (194064d) Size: 0x17dd8 (97752d)
	char pad_194064[97752];
	// Offset: 0x473E8 (291816d)  Size: 0x3F0 (1008d)	DO NOT call this directly. Use GetHUD() instead. Hud for the player.
	idHUD playerHud;
	// Offset: 0x477D8 (292824d) Size: 0x5F60 (24416d)
	char pad_End[24416];
}; // size: 0x4d738 (Size Dec: 317240)
static_assert(sizeof(idPlayer) == 317240, "Size of idPlayer is wrong !");


struct idHands_idHandsAction {
	// Offset: 0x0 (0d)  Size: 0x4 (4d)	action to perform
	idHands_handsAction_t action;
	// Offset: 0x4 (4d) Size: 0x4 (4d)
	char pad_4[4];
	// Offset: 0x8 (8d)  Size: 0x20 (32d)	weapon associated with action    (idManagedClassPtr < idWeapon >)
	char weapon[32];
	// Offset: 0x28 (40d)  Size: 0x1 (1d)	specifically request the intro bringup?
	bool useIntroBringup;
	// Offset: 0x29 (41d) Size: 0x7 (7d)
	char pad_41[7];
	// Offset: 0x30 (48d)  Size: 0x8 (8d)	throwable item associated with action    (idDeclThrowable)
	char throwable[8];
	// Offset: 0x38 (56d)  Size: 0x4 (4d)	custom anim to play
	idHandsCustomAnimSelect customAnim;
	// Offset: 0x3C (60d)  Size: 0x4 (4d)	custom weapon anim to play
	idHandsCustomWeaponAnimSelect customWeaponAnim;
	// Offset: 0x40 (64d)  Size: 0x4 (4d)	chainsaw failed gk anims
	idHandsFailedChainsawSelect chainFailedAnim;
	// Offset: 0x44 (68d) Size: 0x4 (4d)
	char pad_68[4];
	// Offset: 0x48 (72d)  Size: 0x8 (8d)	time stamp when the action was queued    (idTypesafeTime < long long , gameTimeUnique_t , 999960 >)
	long long timestamp;
}; // size: 0x50 (Size Dec: 80)
static_assert(sizeof(idHands_idHandsAction) == 80, "Size of idHands_idHandsAction is wrong !");


// idPlayerBodyReaction_t : idPlayerBodyReactionDescriptor_t
struct idPlayerBodyReaction_t {
	// Offset: 0x0 (0d) Size: 0x18 (24d)
	char pad_0[24];
	// Offset: 0x18 (24d)  Size: 0x1 (1d)	on / off switch for this state
	bool enable;
	// Offset: 0x19 (25d) Size: 0x3 (3d)
	char pad_25[3];
	// Offset: 0x1C (28d)  Size: 0x4 (4d)	event position must be no closer than this distance for this reaction to apply (0 to ignore) {{ units = m }}
	float rangeMin;
	// Offset: 0x20 (32d)  Size: 0x4 (4d)	event position must be no farther than this distance for this reaction to apply (0 to ignore) {{ units = m }}
	float rangeMax;
	// Offset: 0x24 (36d) Size: 0x4 (4d)
	char pad_36[4];
	// Offset: 0x28 (40d)  Size: 0x70 (112d)	start state
	idPlayerBodyReactionState_t state_start;
	// Offset: 0x98 (152d)  Size: 0x70 (112d)	impact ground (alive)
	idPlayerBodyReactionState_t state_impactGround;
	// Offset: 0x108 (264d)  Size: 0x70 (112d)	impact ground (dead)
	idPlayerBodyReactionState_t state_impactGroundDead;
	// Offset: 0x178 (376d)  Size: 0x4 (4d)	number of directions for this reaction
	playerBodyReactionNumDirs_t reactionNumDirs;
	// Offset: 0x17C (380d)  Size: 0x4 (4d)	supports randomization within the reaction
	int reactionNumVariations;
	// Offset: 0x180 (384d)  Size: 0x1 (1d)	rotate the body so the selected direction is aligned with the reaction center
	bool reactionAlignToDir;
	// Offset: 0x181 (385d)  Size: 0x1 (1d)	whether the view is inhibited or not
	bool inhibitView;
	// Offset: 0x182 (386d) Size: 0x2 (2d)
	char pad_386[2];
	// Offset: 0x184 (388d)  Size: 0x4 (4d)	the size of the pitch constraint cone
	float pitchConstraintDegs;
	// Offset: 0x188 (392d)  Size: 0x4 (4d)	the size of the yaw constraint cone
	float yawConstraintDegs;
	// Offset: 0x18C (396d)  Size: 0x1 (1d)	either clip the camera movement on an anim with a fixed origin or, better, let the physics system clip the origin movement, but most anims in this system have fixed origin
	bool clipCameraMovement;
}; // size: 0x190 (Size Dec: 400)
static_assert(sizeof(idPlayerBodyReaction_t) == 400, "Size of idPlayerBodyReaction_t is wrong !");


// idGUIComponent : idClass : idEventArgUser
struct idGUIComponent {
	// Offset: 0x0 (0d) Size: 0x10 (16d)
	char pad_0[16];
	// Offset: 0x10 (16d)  Size: 0x8 (8d)	Which SWF file to use.    (idDeclSWF)
	char swfFile[8];
	// Offset: 0x18 (24d)  Size: 0x4 (4d)	Scale of the GUI.
	float scale;
	// Offset: 0x1C (28d)  Size: 0x24 (36d)	The axis the gui is set on.
	idMat3 axis;
	// Offset: 0x40 (64d)  Size: 0x4 (4d)	How far away the gui is visible. {{ units = m }}
	float showDistance;
	// Offset: 0x44 (68d) Size: 0x4 (4d)
	char pad_68[4];
	// Offset: 0x48 (72d)  Size: 0x18 (24d)	commands that execute after initialization.    (idList < guiComponentCommand_t , TAG_IDLIST , false >)
	idList initialCommands;
	// Offset: 0x60 (96d)  Size: 0xC (12d)	scale the clip model of the gui by this amount.
	idVec3 clipScale;
	// Offset: 0x6c (108d) Size: 0x4 (4d)
	char pad_108[4];
	// Offset: 0x70 (112d)  Size: 0x30 (48d)	What tag to attach this to.
	idStr tagName;
	// Offset: 0xA0 (160d)  Size: 0xC (12d)	offset of the position ( if no Tag, off origin ) {{ units = m }}
	idVec3 positionOffset;
	// Offset: 0xAC (172d)  Size: 0x4 (4d)	if non 0, scale based on distance to this gui.
	float minDistanceScale;
	// Offset: 0xB0 (176d)  Size: 0x4 (4d)	if non 0, scale based on distance to this gui.
	float maxDistanceScale;
	// Offset: 0xB4 (180d)  Size: 0x4 (4d)	Some lighting thing billy made Jeff put in.
	float uiMultiplier;
	// Offset: 0xB8 (184d)  Size: 0x1 (1d)	Dont show the active screen when changing next screen.
	bool noShowActiveOnNextScreen;
	// Offset: 0xB9 (185d)  Size: 0x1 (1d)	billboard the gui.
	bool billboard;
	// Offset: 0xba (186d) Size: 0x6 (6d)
	char pad_186[6];
	// Offset: 0xC0 (192d)  Size: 0x78 (120d)
	idSWF_GameObject swfObject;
	// Offset: 0x138 (312d)  Size: 0x18 (24d)    (idList < guiComponentCommand_t , TAG_IDLIST , false >)
	idList pendingCommands;
	// Offset: 0x150 (336d)  Size: 0x18 (24d)    (idList < guiComponentCommand_t , TAG_IDLIST , false >)
	idList processedCommands;
	// Offset: 0x168 (360d)  Size: 0x20 (32d)    (idManagedClassPtr < idEntity >)
	char owningEntity[32];
	// Offset: 0x188 (392d)  Size: 0x20 (32d)
	tagData_t tagData;
	// Offset: 0x1A8 (424d)  Size: 0x4 (4d)
	int initialCommandsRan;
}; // size: 0x1b0 (Size Dec: 432)
static_assert(sizeof(idGUIComponent) == 432, "Size of idGUIComponent is wrong !");


// idDeclUIColor : idDeclTypeInfo : idDecl : idResource
struct alignas(8) idDeclUIColor {
	// Offset: 0x0 (0d) Size: 0x88 (136d)
	char pad_0[136];
	// Offset: 0x88 (136d)  Size: 0x4 (4d)	The display name of this color profile.
	idStrId displayName;
	// Offset: 0x8C (140d)  Size: 0x1 (1d)	Whether or not this color profile is for color blind accessibility
	bool isColorBlindProfile;
	// Offset: 0x8d (141d) Size: 0x3 (3d)
	char pad_141[3];
	// Offset: 0x90 (144d)  Size: 0x14 (20d)	The color the hud draws in
	idDeclUIColor_uiColorDef_t hudBase;
	// Offset: 0xA4 (164d)  Size: 0x14 (20d)	The shadow color for the hud
	idDeclUIColor_uiColorDef_t hudShadow;
	// Offset: 0xB8 (184d)  Size: 0x14 (20d)	The text color for the hud
	idDeclUIColor_uiColorDef_t hudText;
	// Offset: 0xCC (204d)  Size: 0x14 (20d)	The text header color for the hud
	idDeclUIColor_uiColorDef_t hudHeader;
	// Offset: 0xE0 (224d)  Size: 0x14 (20d)	The base color for dash fills and the icon
	idDeclUIColor_uiColorDef_t dashBase;
	// Offset: 0xF4 (244d)  Size: 0x14 (20d)	The glow color for dash for the fill bar
	idDeclUIColor_uiColorDef_t dashGlow;
	// Offset: 0x108 (264d)  Size: 0x14 (20d)	The color used for "ghost" images in notifications
	idDeclUIColor_uiColorDef_t notificationGhost;
	// Offset: 0x11C (284d)  Size: 0x14 (20d)	The color used across the UI for health
	idDeclUIColor_uiColorDef_t uiHealth;
	// Offset: 0x130 (304d)  Size: 0x14 (20d)	The color used across the UI for health gradients
	idDeclUIColor_uiColorDef_t uiHealthGradient;
	// Offset: 0x144 (324d)  Size: 0x14 (20d)	The color used across the UI for low health
	idDeclUIColor_uiColorDef_t uiHealthLow;
	// Offset: 0x158 (344d)  Size: 0x14 (20d)	The color used across the UI for REALLY low health
	idDeclUIColor_uiColorDef_t uiHealthReallyLow;
	// Offset: 0x16C (364d)  Size: 0x14 (20d)	The color used across the UI for demon health
	idDeclUIColor_uiColorDef_t uiHealthDemon;
	// Offset: 0x180 (384d)  Size: 0x14 (20d)	The color used across the UI for armor
	idDeclUIColor_uiColorDef_t uiArmor;
	// Offset: 0x194 (404d)  Size: 0x14 (20d)	The color used across the UI for armor gradients
	idDeclUIColor_uiColorDef_t uiArmorGradient;
	// Offset: 0x1A8 (424d)  Size: 0x14 (20d)	The color used across the UI for radiation
	idDeclUIColor_uiColorDef_t uiRadiation;
	// Offset: 0x1BC (444d)  Size: 0x14 (20d)	The color used across the UI for radiation gradients
	idDeclUIColor_uiColorDef_t uiRadiationGradient;
	// Offset: 0x1D0 (464d)  Size: 0x14 (20d)	The color used across the UI for oxygen
	idDeclUIColor_uiColorDef_t uiOxygen;
	// Offset: 0x1E4 (484d)  Size: 0x14 (20d)	The color used across the UI for oxygen gradients
	idDeclUIColor_uiColorDef_t uiOxygenGradient;
	// Offset: 0x1F8 (504d)  Size: 0x14 (20d)	The color used across the UI for urgent warnings and alerts
	idDeclUIColor_uiColorDef_t uiWarning;
	// Offset: 0x20C (524d)  Size: 0x14 (20d)	The color used across the UI for successful actions
	idDeclUIColor_uiColorDef_t uiSuccess;
	// Offset: 0x220 (544d)  Size: 0x14 (20d)	The color used across the UI for failed actions
	idDeclUIColor_uiColorDef_t uiFailure;
	// Offset: 0x234 (564d)  Size: 0x14 (20d)	The color used across the UI for cautions
	idDeclUIColor_uiColorDef_t uiCaution;
	// Offset: 0x248 (584d)  Size: 0x14 (20d)	The color used across the UI for the fill color in progress bars
	idDeclUIColor_uiColorDef_t uiProgressBarFill;
	// Offset: 0x25C (604d)  Size: 0x14 (20d)	The color used across the UI for progress complete (bars, text, etc.)
	idDeclUIColor_uiColorDef_t uiProgressComplete;
	// Offset: 0x270 (624d)  Size: 0x14 (20d)	The color used for health background of demon players
	idDeclUIColor_uiColorDef_t uiHealthDemonBackground;
	// Offset: 0x284 (644d)  Size: 0x14 (20d)	The color used for health background of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonBackgroundLow;
	// Offset: 0x298 (664d)  Size: 0x14 (20d)	The color used for health background of demon players when health is really low
	idDeclUIColor_uiColorDef_t uiHealthDemonBackgroundReallyLow;
	// Offset: 0x2AC (684d)  Size: 0x14 (20d)	The color used for health background of demon players when dead
	idDeclUIColor_uiColorDef_t uiHealthDemonBackgroundDead;
	// Offset: 0x2C0 (704d)  Size: 0x14 (20d)	The color used for health background glow of demon players
	idDeclUIColor_uiColorDef_t uiHealthDemonBackgroundGlow;
	// Offset: 0x2D4 (724d)  Size: 0x14 (20d)	The color used for health background glow of demon players when health is really low
	idDeclUIColor_uiColorDef_t uiHealthDemonBackgroundGlowReallyLow;
	// Offset: 0x2E8 (744d)  Size: 0x14 (20d)	The color used for health background glow of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonBackgroundGlowLow;
	// Offset: 0x2FC (764d)  Size: 0x14 (20d)	The color used for health bar pip of green demon players when health is full
	idDeclUIColor_uiColorDef_t uiHealthDemonPipGreen;
	// Offset: 0x310 (784d)  Size: 0x14 (20d)	The color used for health bar pip gradient of green demon players when health is full
	idDeclUIColor_uiColorDef_t uiHealthDemonPipGreenGradient;
	// Offset: 0x324 (804d)  Size: 0x14 (20d)	The color used for health bar pip of orange demon players when health is full
	idDeclUIColor_uiColorDef_t uiHealthDemonPipOrange;
	// Offset: 0x338 (824d)  Size: 0x14 (20d)	The color used for health bar pip gradient of orange demon players when health is full
	idDeclUIColor_uiColorDef_t uiHealthDemonPipOrangeGradient;
	// Offset: 0x34C (844d)  Size: 0x14 (20d)	The color used for health bar pip of blue demon players when health is full
	idDeclUIColor_uiColorDef_t uiHealthDemonPipBlue;
	// Offset: 0x360 (864d)  Size: 0x14 (20d)	The color used for health bar pip gradient of blue demon players when health is full
	idDeclUIColor_uiColorDef_t uiHealthDemonPipBlueGradient;
	// Offset: 0x374 (884d)  Size: 0x14 (20d)	The color used for health bar pip of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonPipLow;
	// Offset: 0x388 (904d)  Size: 0x14 (20d)	The color used for health bar pip gradient of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonPipLowGradient;
	// Offset: 0x39C (924d)  Size: 0x14 (20d)	The color used for health bar pip and gradient of demon players when dead
	idDeclUIColor_uiColorDef_t uiHealthDemonPipDead;
	// Offset: 0x3B0 (944d)  Size: 0x14 (20d)	The color used for health bar icon of demon players
	idDeclUIColor_uiColorDef_t uiHealthDemonIcon;
	// Offset: 0x3C4 (964d)  Size: 0x14 (20d)	The color used for health bar icon gradient of demon players
	idDeclUIColor_uiColorDef_t uiHealthDemonIconGradient;
	// Offset: 0x3D8 (984d)  Size: 0x14 (20d)	The color used for health bar icon of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonIconLow;
	// Offset: 0x3EC (1004d)  Size: 0x14 (20d)	The color used for health bar icon gradient of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonIconGradientLow;
	// Offset: 0x400 (1024d)  Size: 0x14 (20d)	The color used for health bar icon of demon players when health is really low
	idDeclUIColor_uiColorDef_t uiHealthDemonIconReallyLow;
	// Offset: 0x414 (1044d)  Size: 0x14 (20d)	The color used for health bar icon gradient of demon players when health is really low
	idDeclUIColor_uiColorDef_t uiHealthDemonIconGradientReallyLow;
	// Offset: 0x428 (1064d)  Size: 0x14 (20d)	The color used for health bar icon of demon players when dead
	idDeclUIColor_uiColorDef_t uiHealthDemonIconDead;
	// Offset: 0x43C (1084d)  Size: 0x14 (20d)	The color used for health bar icon gradient of demon players when dead
	idDeclUIColor_uiColorDef_t uiHealthDemonIconGradientDead;
	// Offset: 0x450 (1104d)  Size: 0x14 (20d)	The color used for health bar glow bits of demon players
	idDeclUIColor_uiColorDef_t uiHealthDemonGlowBits;
	// Offset: 0x464 (1124d)  Size: 0x14 (20d)	The color used for health bar glow bits of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonGlowBitsLow;
	// Offset: 0x478 (1144d)  Size: 0x14 (20d)	The color used for health bar text of demon players
	idDeclUIColor_uiColorDef_t uiHealthDemonText;
	// Offset: 0x48C (1164d)  Size: 0x14 (20d)	The color used for health bar text of demon players when health is low
	idDeclUIColor_uiColorDef_t uiHealthDemonTextLow;
	// Offset: 0x4A0 (1184d)  Size: 0x14 (20d)	The color used for unlocked doors in the world
	idDeclUIColor_uiColorDef_t worldUnlocked;
	// Offset: 0x4B4 (1204d)  Size: 0x14 (20d)	The color used for locked doors in the world
	idDeclUIColor_uiColorDef_t worldLocked;
	// Offset: 0x4C8 (1224d)  Size: 0x14 (20d)	The color of green for slayer ui
	idDeclUIColor_uiColorDef_t slayerGreen;
	// Offset: 0x4DC (1244d)  Size: 0x14 (20d)	The shade of red for demon ui
	idDeclUIColor_uiColorDef_t demonRed;
	// Offset: 0x4F0 (1264d)  Size: 0x14 (20d)	The shade of yellow for demon ui
	idDeclUIColor_uiColorDef_t demonYellow;
	// Offset: 0x504 (1284d)  Size: 0x14 (20d)	The shade of yellow for demon ui
	idDeclUIColor_uiColorDef_t white;
	// Offset: 0x518 (1304d)  Size: 0x14 (20d)	The color representing the chainsaw in UI
	idDeclUIColor_uiColorDef_t weaponChainsaw;
	// Offset: 0x52C (1324d)  Size: 0x14 (20d)	The color representing the combat shotgun in UI
	idDeclUIColor_uiColorDef_t weaponShotgun;
	// Offset: 0x540 (1344d)  Size: 0x14 (20d)	The color representing the double barrel shotgun in UI
	idDeclUIColor_uiColorDef_t weaponDoubleBarrel;
	// Offset: 0x554 (1364d)  Size: 0x14 (20d)	The color representing the assualt rifle in UI
	idDeclUIColor_uiColorDef_t weaponAssualtRifle;
	// Offset: 0x568 (1384d)  Size: 0x14 (20d)	The color representing the chaingun in UI
	idDeclUIColor_uiColorDef_t weaponChaingun;
	// Offset: 0x57C (1404d)  Size: 0x14 (20d)	The color representing the plasma rifle in UI
	idDeclUIColor_uiColorDef_t weaponPlasmaRifle;
	// Offset: 0x590 (1424d)  Size: 0x14 (20d)	The color representing the ballista in UI
	idDeclUIColor_uiColorDef_t weaponBallista;
	// Offset: 0x5A4 (1444d)  Size: 0x14 (20d)	The color representing the rocket launcher in UI
	idDeclUIColor_uiColorDef_t weaponRocketLauncher;
	// Offset: 0x5B8 (1464d)  Size: 0x14 (20d)	The color representing the BFG in UI
	idDeclUIColor_uiColorDef_t weaponBfg;
	// Offset: 0x5CC (1484d)  Size: 0x14 (20d)	The color representing the Unmaykr in UI
	idDeclUIColor_uiColorDef_t weaponUnmaykr;
	// Offset: 0x5E0 (1504d)  Size: 0x14 (20d)	The color representing the crucible in UI
	idDeclUIColor_uiColorDef_t weaponCrucible;
	// Offset: 0x5F4 (1524d)  Size: 0x14 (20d)	The color representing the hammer in UI
	idDeclUIColor_uiColorDef_t weaponHammer;
	// Offset: 0x608 (1544d)  Size: 0x14 (20d)	The color representing the weapons lacking ammo in UI
	idDeclUIColor_uiColorDef_t weaponNoAmmo;
	// Offset: 0x61C (1564d)  Size: 0x14 (20d)	The color representing the disabled weapons in UI
	idDeclUIColor_uiColorDef_t weaponDisabled;
	// Offset: 0x630 (1584d)  Size: 0x14 (20d)	The color representing the combat shotgun when full in UI
	idDeclUIColor_uiColorDef_t weaponShotgunFull;
	// Offset: 0x644 (1604d)  Size: 0x14 (20d)	The color representing the double barrel shotgun when full in UI
	idDeclUIColor_uiColorDef_t weaponDoubleBarrelFull;
	// Offset: 0x658 (1624d)  Size: 0x14 (20d)	The color representing the assualt rifle when full in UI
	idDeclUIColor_uiColorDef_t weaponAssualtRifleFull;
	// Offset: 0x66C (1644d)  Size: 0x14 (20d)	The color representing the chaingun when full in UI
	idDeclUIColor_uiColorDef_t weaponChaingunFull;
	// Offset: 0x680 (1664d)  Size: 0x14 (20d)	The color representing the plasma rifle when full in UI
	idDeclUIColor_uiColorDef_t weaponPlasmaRifleFull;
	// Offset: 0x694 (1684d)  Size: 0x14 (20d)	The color representing the ballista when full in UI
	idDeclUIColor_uiColorDef_t weaponBallistaFull;
	// Offset: 0x6A8 (1704d)  Size: 0x14 (20d)	The color representing the rocket launcher when full in UI
	idDeclUIColor_uiColorDef_t weaponRocketLauncherFull;
	// Offset: 0x6BC (1724d)  Size: 0x14 (20d)	The color representing the BFG when full in UI
	idDeclUIColor_uiColorDef_t weaponBfgFull;
	// Offset: 0x6D0 (1744d)  Size: 0x14 (20d)	The color representing the Unmaykr when full in UI
	idDeclUIColor_uiColorDef_t weaponUnmaykrFull;
	// Offset: 0x6E4 (1764d)  Size: 0x14 (20d)	The color representing the hammer when full in UI
	idDeclUIColor_uiColorDef_t weaponHammerFull;
	// Offset: 0x6F8 (1784d)  Size: 0x14 (20d)	The color representing the reticle base
	idDeclUIColor_uiColorDef_t reticleBase;
	// Offset: 0x70C (1804d)  Size: 0x14 (20d)	The color representing the reticle glow
	idDeclUIColor_uiColorDef_t reticleGlow;
	// Offset: 0x720 (1824d)  Size: 0x14 (20d)	The color representing the reticle cooldown base
	idDeclUIColor_uiColorDef_t reticleCooldownBase;
	// Offset: 0x734 (1844d)  Size: 0x14 (20d)	The color representing the reticle cooldown glow
	idDeclUIColor_uiColorDef_t reticleCooldownGlow;
	// Offset: 0x748 (1864d)  Size: 0x14 (20d)	The color representing the reticle warning base
	idDeclUIColor_uiColorDef_t reticleWarningBase;
	// Offset: 0x75C (1884d)  Size: 0x14 (20d)	The color representing the reticle warning glow
	idDeclUIColor_uiColorDef_t reticleWarningGlow;
	// Offset: 0x770 (1904d)  Size: 0x14 (20d)	The color representing the reticle alt stroke (eg. crucible)
	idDeclUIColor_uiColorDef_t reticleAltStroke;
	// Offset: 0x784 (1924d)  Size: 0x14 (20d)	The color representing the reticle alt base (eg. crucible)
	idDeclUIColor_uiColorDef_t reticleAltBase;
	// Offset: 0x798 (1944d)  Size: 0x14 (20d)	The color representing the reticle alt glow (eg. crucible)
	idDeclUIColor_uiColorDef_t reticleAltGlow;
	// Offset: 0x7AC (1964d)  Size: 0x14 (20d)	The color representing the reticle alt 2 stroke (eg. unmakyr)
	idDeclUIColor_uiColorDef_t reticleAlt2Stroke;
	// Offset: 0x7C0 (1984d)  Size: 0x14 (20d)	The color representing the reticle alt 2 base (eg. unmakyr)
	idDeclUIColor_uiColorDef_t reticleAlt2Base;
	// Offset: 0x7D4 (2004d)  Size: 0x14 (20d)	The color representing the reticle alt 2 glow (eg. unmakyr)
	idDeclUIColor_uiColorDef_t reticleAlt2Glow;
	// Offset: 0x7E8 (2024d)  Size: 0x14 (20d)	The color representing blue keycards
	idDeclUIColor_uiColorDef_t keycardBlue;
	// Offset: 0x7FC (2044d)  Size: 0x14 (20d)	The color representing red keycards
	idDeclUIColor_uiColorDef_t keycardRed;
	// Offset: 0x810 (2064d)  Size: 0x14 (20d)	The color representing yellow keycards
	idDeclUIColor_uiColorDef_t keycardYellow;
	// Offset: 0x824 (2084d)  Size: 0x14 (20d)	The color representing the slayer key
	idDeclUIColor_uiColorDef_t keycardSlayer;
	// Offset: 0x838 (2104d)  Size: 0x14 (20d)	The color used in menus for background bases
	idDeclUIColor_uiColorDef_t menuBackBase;
	// Offset: 0x84C (2124d)  Size: 0x14 (20d)	The color used in menus for background strokes
	idDeclUIColor_uiColorDef_t menuBackStroke;
	// Offset: 0x860 (2144d)  Size: 0x14 (20d)	The color used in menus for background bases when selected
	idDeclUIColor_uiColorDef_t menuSelectionBase;
	// Offset: 0x874 (2164d)  Size: 0x14 (20d)	The color used in menus for background strokes when selected
	idDeclUIColor_uiColorDef_t menuSelectionStroke;
	// Offset: 0x888 (2184d)  Size: 0x14 (20d)	The color used in menus for background bases when pressed
	idDeclUIColor_uiColorDef_t menuBackPress;
	// Offset: 0x89C (2204d)  Size: 0x14 (20d)	The color used in menus for header text
	idDeclUIColor_uiColorDef_t menuHeaderText;
	// Offset: 0x8B0 (2224d)  Size: 0x14 (20d)	The color used in menus for items that have been collected
	idDeclUIColor_uiColorDef_t collectedItem;
	// Offset: 0x8C4 (2244d)  Size: 0x14 (20d)	The color used for the corruption meter hex background cleared element
	idDeclUIColor_uiColorDef_t corruptionHexCleared;
	// Offset: 0x8D8 (2264d)  Size: 0x14 (20d)	The color used for the corruption meter hex glow background cleared element
	idDeclUIColor_uiColorDef_t corruptionHexGlowCleared;
	// Offset: 0x8EC (2284d)  Size: 0x14 (20d)	The color used for the corruption meter hex background corrupt element
	idDeclUIColor_uiColorDef_t corruptionHexCorrupt;
	// Offset: 0x900 (2304d)  Size: 0x14 (20d)	The color used for the corruption meter hex glow background corrupt element
	idDeclUIColor_uiColorDef_t corruptionHexGlowCorrupt;
	// Offset: 0x914 (2324d)  Size: 0x14 (20d)	The color used for the corruption meter container cleared element
	idDeclUIColor_uiColorDef_t corruptionContainerCleared;
	// Offset: 0x928 (2344d)  Size: 0x14 (20d)	The color used for the corruption meter container corrupt element
	idDeclUIColor_uiColorDef_t corruptionContainerCorrupt;
	// Offset: 0x93C (2364d)  Size: 0x14 (20d)	The color used for the corruption cleared indicators
	idDeclUIColor_uiColorDef_t corruptionClear;
	// Offset: 0x950 (2384d)  Size: 0x14 (20d)	The color used for the glow of corruption cleared indicators
	idDeclUIColor_uiColorDef_t corruptionClearGlow;
	// Offset: 0x964 (2404d)  Size: 0x14 (20d)	The color used for the corruption cleared indicators when partially cleared
	idDeclUIColor_uiColorDef_t corruptionPartialClear;
	// Offset: 0x978 (2424d)  Size: 0x14 (20d)	The color used for the glow of corruption cleared indicators when partially cleared
	idDeclUIColor_uiColorDef_t corruptionPartialClearGlow;
	// Offset: 0x98C (2444d)  Size: 0x14 (20d)	The color used for the combat encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionCombat;
	// Offset: 0x9A0 (2464d)  Size: 0x14 (20d)	The color used for the glow of combat encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionCombatGlow;
	// Offset: 0x9B4 (2484d)  Size: 0x14 (20d)	The color used for the slayer gate corruption indicators
	idDeclUIColor_uiColorDef_t corruptionSlayerGate;
	// Offset: 0x9C8 (2504d)  Size: 0x14 (20d)	The color used for the glow of slayer gate corruption indicators
	idDeclUIColor_uiColorDef_t corruptionSlayerGateGlow;
	// Offset: 0x9DC (2524d)  Size: 0x14 (20d)	The color used for the secret encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionSecret;
	// Offset: 0x9F0 (2544d)  Size: 0x14 (20d)	The color used for the glow of secret encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionSecretGlow;
	// Offset: 0xA04 (2564d)  Size: 0x14 (20d)	The color used for the boss encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionBoss;
	// Offset: 0xA18 (2584d)  Size: 0x14 (20d)	The color used for the glow of boss encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionBossGlow;
	// Offset: 0xA2C (2604d)  Size: 0x14 (20d)	The color used for the default corruption indicators
	idDeclUIColor_uiColorDef_t corruptionBase;
	// Offset: 0xA40 (2624d)  Size: 0x14 (20d)	The color used for the default corruption overlays
	idDeclUIColor_uiColorDef_t corruptionOverlay;
	// Offset: 0xA54 (2644d)  Size: 0x14 (20d)	The color used for the escalation encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionEscalation;
	// Offset: 0xA68 (2664d)  Size: 0x14 (20d)	The color used for the glow of escalation encounter corruption indicators
	idDeclUIColor_uiColorDef_t corruptionEscalationGlow;
	// Offset: 0xA7C (2684d)  Size: 0x14 (20d)	The color used for the extra life icon
	idDeclUIColor_uiColorDef_t extraLifeIcon;
	// Offset: 0xA90 (2704d)  Size: 0x14 (20d)	The color used for the extra life icon glow
	idDeclUIColor_uiColorDef_t extraLifeIconGlow;
	// Offset: 0xAA4 (2724d)  Size: 0x14 (20d)	The color used for the extra life refund timer
	idDeclUIColor_uiColorDef_t extraLifeTimer;
	// Offset: 0xAB8 (2744d)  Size: 0x14 (20d)	The color used for the extra life refund timer glow
	idDeclUIColor_uiColorDef_t extraLifeTimerGlow;
	// Offset: 0xACC (2764d)  Size: 0x14 (20d)	The color used for the argent cell menu
	idDeclUIColor_uiColorDef_t argentCell;
	// Offset: 0xAE0 (2784d)  Size: 0x14 (20d)	The color used for weapon point earned notifications
	idDeclUIColor_uiColorDef_t weaponPoint;
	// Offset: 0xAF4 (2804d)  Size: 0x14 (20d)	The color used for praetor point earned notifications
	idDeclUIColor_uiColorDef_t praetorPoint;
	// Offset: 0xB08 (2824d)  Size: 0x14 (20d)	The color used for sentinel battery earned notifications
	idDeclUIColor_uiColorDef_t sentinelBattery;
	// Offset: 0xB1C (2844d)  Size: 0x14 (20d)	The color used for the demon hud's backers
	idDeclUIColor_uiColorDef_t demonHudBacker;
	// Offset: 0xB30 (2864d)  Size: 0x14 (20d)	The color used for the demon ability hud selection elements glow
	idDeclUIColor_uiColorDef_t demonHudAbilitiesSelectionGlow;
	// Offset: 0xB44 (2884d)  Size: 0x14 (20d)	The color used for the demon ability hud selection elements stroke
	idDeclUIColor_uiColorDef_t demonHudAbilitiesSelectionStroke;
	// Offset: 0xB58 (2904d)  Size: 0x14 (20d)	The color used for the demon ability hud frame
	idDeclUIColor_uiColorDef_t demonHudAbilityFrame;
	// Offset: 0xB6C (2924d)  Size: 0x14 (20d)	The color used for the demon ability hud glow that appears under the frame when unselected
	idDeclUIColor_uiColorDef_t demonHudAbilityFrameGlowUnselected;
	// Offset: 0xB80 (2944d)  Size: 0x14 (20d)	The color used for the demon ability hud glow that appears under the frame when selected
	idDeclUIColor_uiColorDef_t demonHudAbilityFrameGlowSelected;
	// Offset: 0xB94 (2964d)  Size: 0x14 (20d)	The color used for the demon cards that need a teal color base
	idDeclUIColor_uiColorDef_t demonHudTealBase;
	// Offset: 0xBA8 (2984d)  Size: 0x14 (20d)	The color used for the demon cards that need a teal color gradient
	idDeclUIColor_uiColorDef_t demonHudTealGradient;
	// Offset: 0xBBC (3004d)  Size: 0x14 (20d)	The color used for the demon cards that need a teal color overlay
	idDeclUIColor_uiColorDef_t demonHudTealOverlay;
	// Offset: 0xBD0 (3024d)  Size: 0x14 (20d)	The color used for the demon cards that need a teal color icon
	idDeclUIColor_uiColorDef_t demonHudTealIcon;
	// Offset: 0xBE4 (3044d)  Size: 0x14 (20d)	The color used for the demon cards that need a yellow color base
	idDeclUIColor_uiColorDef_t demonHudYellowBase;
	// Offset: 0xBF8 (3064d)  Size: 0x14 (20d)	The color used for the demon cards that need a yellow color gradient
	idDeclUIColor_uiColorDef_t demonHudYellowGradient;
	// Offset: 0xC0C (3084d)  Size: 0x14 (20d)	The color used for the demon cards that need a yellow color overlay
	idDeclUIColor_uiColorDef_t demonHudYellowOverlay;
	// Offset: 0xC20 (3104d)  Size: 0x14 (20d)	The color used for the demon cards that need a yellow color icon
	idDeclUIColor_uiColorDef_t demonHudYellowIcon;
	// Offset: 0xC34 (3124d)  Size: 0x14 (20d)	The color used for the demon cards that need a orange color base
	idDeclUIColor_uiColorDef_t demonHudOrangeBase;
	// Offset: 0xC48 (3144d)  Size: 0x14 (20d)	The color used for the demon cards that need a orange color gradient
	idDeclUIColor_uiColorDef_t demonHudOrangeGradient;
	// Offset: 0xC5C (3164d)  Size: 0x14 (20d)	The color used for the demon cards that need a orange color overlay
	idDeclUIColor_uiColorDef_t demonHudOrangeOverlay;
	// Offset: 0xC70 (3184d)  Size: 0x14 (20d)	The color used for the demon cards that need a orange color icon
	idDeclUIColor_uiColorDef_t demonHudOrangeIcon;
	// Offset: 0xC84 (3204d)  Size: 0x14 (20d)	The color used for the demon cards that need a blue color base
	idDeclUIColor_uiColorDef_t demonHudBlueBase;
	// Offset: 0xC98 (3224d)  Size: 0x14 (20d)	The color used for the demon cards that need a blue color gradient
	idDeclUIColor_uiColorDef_t demonHudBlueGradient;
	// Offset: 0xCAC (3244d)  Size: 0x14 (20d)	The color used for the demon cards that need a blue color overlay
	idDeclUIColor_uiColorDef_t demonHudBlueOverlay;
	// Offset: 0xCC0 (3264d)  Size: 0x14 (20d)	The color used for the demon cards that need a blue color icon
	idDeclUIColor_uiColorDef_t demonHudBlueIcon;
	// Offset: 0xCD4 (3284d)  Size: 0x14 (20d)	The color used for the demon cards that need a purple color base
	idDeclUIColor_uiColorDef_t demonHudPurpleBase;
	// Offset: 0xCE8 (3304d)  Size: 0x14 (20d)	The color used for the demon cards that need a purple color gradient
	idDeclUIColor_uiColorDef_t demonHudPurpleGradient;
	// Offset: 0xCFC (3324d)  Size: 0x14 (20d)	The color used for the demon cards that need a purple color overlay
	idDeclUIColor_uiColorDef_t demonHudPurpleOverlay;
	// Offset: 0xD10 (3344d)  Size: 0x14 (20d)	The color used for the demon cards that need a purple color icon
	idDeclUIColor_uiColorDef_t demonHudPurpleIcon;
	// Offset: 0xD24 (3364d)  Size: 0x14 (20d)	The color used for the demon cards that need a red color base
	idDeclUIColor_uiColorDef_t demonHudRedBase;
	// Offset: 0xD38 (3384d)  Size: 0x14 (20d)	The color used for the demon cards that need a red color gradient
	idDeclUIColor_uiColorDef_t demonHudRedGradient;
	// Offset: 0xD4C (3404d)  Size: 0x14 (20d)	The color used for the demon cards that need a red color overlay
	idDeclUIColor_uiColorDef_t demonHudRedOverlay;
	// Offset: 0xD60 (3424d)  Size: 0x14 (20d)	The color used for the demon cards that need a red color icon
	idDeclUIColor_uiColorDef_t demonHudRedIcon;
	// Offset: 0xD74 (3444d)  Size: 0x14 (20d)	The color used for the demon cards that need a green color base
	idDeclUIColor_uiColorDef_t demonHudGreenBase;
	// Offset: 0xD88 (3464d)  Size: 0x14 (20d)	The color used for the demon cards that need a green color gradient
	idDeclUIColor_uiColorDef_t demonHudGreenGradient;
	// Offset: 0xD9C (3484d)  Size: 0x14 (20d)	The color used for the demon cards that need a green color overlay
	idDeclUIColor_uiColorDef_t demonHudGreenOverlay;
	// Offset: 0xDB0 (3504d)  Size: 0x14 (20d)	The color used for the demon cards that need a green color icon
	idDeclUIColor_uiColorDef_t demonHudGreenIcon;
	// Offset: 0xDC4 (3524d)  Size: 0x14 (20d)	The color used for the demon card icons that are on cooldown
	idDeclUIColor_uiColorDef_t demonHudIconCooldown;
	// Offset: 0xDD8 (3544d)  Size: 0x14 (20d)	The color used for the demon card base that are on cooldown
	idDeclUIColor_uiColorDef_t demonHudBaseCooldown;
	// Offset: 0xDEC (3564d)  Size: 0x14 (20d)	The color used for the demon card gradient that are on cooldown
	idDeclUIColor_uiColorDef_t demonHudGradientCooldown;
	// Offset: 0xE00 (3584d)  Size: 0x14 (20d)	The color used for the demon card overlay that are on cooldown
	idDeclUIColor_uiColorDef_t demonHudOverlayCooldown;
	// Offset: 0xE14 (3604d)  Size: 0x14 (20d)	The color used for the cover of a demon card on cooldown
	idDeclUIColor_uiColorDef_t demonHudAbilityCooldownCover;
	// Offset: 0xE28 (3624d)  Size: 0x14 (20d)	The color used for the gamepad summons wheel stroke lines
	idDeclUIColor_uiColorDef_t demonHudWheelStroke;
	// Offset: 0xE3C (3644d)  Size: 0x14 (20d)	The color used for the gamepad summons wheel base
	idDeclUIColor_uiColorDef_t demonHudWheelBase;
	// Offset: 0xE50 (3664d)  Size: 0x14 (20d)	The color used for the gamepad summons wheel glow
	idDeclUIColor_uiColorDef_t demonHudWheelGlow;
	// Offset: 0xE64 (3684d)  Size: 0x14 (20d)	The base color for demon hud notifications
	idDeclUIColor_uiColorDef_t demonHudNotificationBase;
	// Offset: 0xE78 (3704d)  Size: 0x14 (20d)	The icon color for demon hud notifications
	idDeclUIColor_uiColorDef_t demonHudNotificationIcon;
	// Offset: 0xE8C (3724d)  Size: 0x14 (20d)	The stroke color for demon hud notifications
	idDeclUIColor_uiColorDef_t demonHudNotificationStroke;
	// Offset: 0xEA0 (3744d)  Size: 0x14 (20d)	The header color for demon hud notifications
	idDeclUIColor_uiColorDef_t demonHudNotificationHeader;
	// Offset: 0xEB4 (3764d)  Size: 0x14 (20d)	The text color for demon hud notifications
	idDeclUIColor_uiColorDef_t demonHudNotificationText;
	// Offset: 0xEC8 (3784d)  Size: 0x14 (20d)	The glow color for demon hud notifications
	idDeclUIColor_uiColorDef_t demonHudNotificationGlow;
	// Offset: 0xEDC (3804d)  Size: 0x14 (20d)	The color used for the frame of the player widget in the HUD's header when the player is a demon
	idDeclUIColor_uiColorDef_t demonHudDemonPlayerFrame;
	// Offset: 0xEF0 (3824d)  Size: 0x14 (20d)	The color used for the frame of the player widget in the HUD's header when the player is the slayer
	idDeclUIColor_uiColorDef_t demonHudSlayerPlayerFrame;
	// Offset: 0xF04 (3844d)  Size: 0x14 (20d)	The color used for the back-glow of the frame of the player widget in the HUD's header when the player is a demon
	idDeclUIColor_uiColorDef_t demonHudDemonPlayerFrameBackglow;
	// Offset: 0xF18 (3864d)  Size: 0x14 (20d)	The color used for the back-glow of the frame of the player widget in the HUD's header when the player is the slayer
	idDeclUIColor_uiColorDef_t demonHudSlayerPlayerFrameBackglow;
	// Offset: 0xF2C (3884d)  Size: 0x14 (20d)	The color used for common text in the HUD's header (player list and match summary)
	idDeclUIColor_uiColorDef_t demonHudHeaderText;
	// Offset: 0xF40 (3904d)  Size: 0x14 (20d)	The color used for number text in the HUD's match summary
	idDeclUIColor_uiColorDef_t demonHudHeaderTextNumbers;
	// Offset: 0xF54 (3924d)  Size: 0x14 (20d)	The color used for the match summary's frame elements
	idDeclUIColor_uiColorDef_t demonHudMatchSummaryFrame;
	// Offset: 0xF68 (3944d)  Size: 0x14 (20d)	The color used for the match summary's background elements
	idDeclUIColor_uiColorDef_t demonHudMatchSummaryBacking;
	// Offset: 0xF7C (3964d)  Size: 0x14 (20d)	The color used for player's status list backglow
	idDeclUIColor_uiColorDef_t hudStatusBuffBackglow;
	// Offset: 0xF90 (3984d)  Size: 0x14 (20d)	The color used for player's status list backer
	idDeclUIColor_uiColorDef_t hudStatusBuffBacker;
	// Offset: 0xFA4 (4004d)  Size: 0x14 (20d)	Seaons Menu - Default element color
	idDeclUIColor_uiColorDef_t menuSeasonBase;
	// Offset: 0xFB8 (4024d)  Size: 0x14 (20d)	Cosmetic Items - Default Rarity
	idDeclUIColor_uiColorDef_t cosmeticRarityDefault;
	// Offset: 0xFCC (4044d)  Size: 0x14 (20d)	Cosmetic Items - Tier 1 Rarity
	idDeclUIColor_uiColorDef_t cosmeticRarityTier1;
	// Offset: 0xFE0 (4064d)  Size: 0x14 (20d)	Cosmetic Items - Tier 2 Rarity
	idDeclUIColor_uiColorDef_t cosmeticRarityTier2;
	// Offset: 0xFF4 (4084d)  Size: 0x14 (20d)	Cosmetic Items - Tier 3 Rarity
	idDeclUIColor_uiColorDef_t cosmeticRarityTier3;
	// Offset: 0x1008 (4104d)  Size: 0x14 (20d)	pvp notifications ticker item stroke color
	idDeclUIColor_uiColorDef_t pvpTickerStroke;
	// Offset: 0x101C (4124d)  Size: 0x14 (20d)	pvp notifications ticker item backer color
	idDeclUIColor_uiColorDef_t pvpTickerBacker;
	// Offset: 0x1030 (4144d)  Size: 0x14 (20d)	pvp notifications ticker item color when slayer player is the actor of the notification
	idDeclUIColor_uiColorDef_t pvpTickerSlayer;
	// Offset: 0x1044 (4164d)  Size: 0x14 (20d)	base color for all demon reticles
	idDeclUIColor_uiColorDef_t demonReticle;
	// Offset: 0x1058 (4184d)  Size: 0x14 (20d)	glow color for the revenant reticle
	idDeclUIColor_uiColorDef_t revenantReticleGlow;
	// Offset: 0x106C (4204d)  Size: 0x14 (20d)	gradient color for the revenant reticle
	idDeclUIColor_uiColorDef_t revenantReticleGradient;
	// Offset: 0x1080 (4224d)  Size: 0x14 (20d)	base color for the revenant reticle
	idDeclUIColor_uiColorDef_t revenantReticleBase;
	// Offset: 0x1094 (4244d)  Size: 0x14 (20d)	glow color for the archvile reticle
	idDeclUIColor_uiColorDef_t archvileReticleGlow;
	// Offset: 0x10A8 (4264d)  Size: 0x14 (20d)	gradient color for the archvile reticle
	idDeclUIColor_uiColorDef_t archvileReticleGradient;
	// Offset: 0x10BC (4284d)  Size: 0x14 (20d)	base color for the archvile reticle
	idDeclUIColor_uiColorDef_t archvileReticleBase;
	// Offset: 0x10D0 (4304d)  Size: 0x14 (20d)	glow color for the painElemental reticle
	idDeclUIColor_uiColorDef_t painElementalReticleGlow;
	// Offset: 0x10E4 (4324d)  Size: 0x14 (20d)	gradient color for the painElemental reticle
	idDeclUIColor_uiColorDef_t painElementalReticleGradient;
	// Offset: 0x10F8 (4344d)  Size: 0x14 (20d)	base color for the painElemental reticle
	idDeclUIColor_uiColorDef_t painElementalReticleBase;
	// Offset: 0x110C (4364d)  Size: 0x14 (20d)	gradient color for the painElemental reticle in low shields
	idDeclUIColor_uiColorDef_t painElementalReticleWarningGradient;
	// Offset: 0x1120 (4384d)  Size: 0x14 (20d)	base color for the painElemental reticle in low shields
	idDeclUIColor_uiColorDef_t painElementalReticleWarningBase;
	// Offset: 0x1134 (4404d)  Size: 0x14 (20d)	base color for a completed milestone
	idDeclUIColor_uiColorDef_t milestoneCompleteBase;
	// Offset: 0x1148 (4424d)  Size: 0x14 (20d)	gradient color for a completed milestone
	idDeclUIColor_uiColorDef_t milestoneCompleteGradient;
	// Offset: 0x115C (4444d)  Size: 0x14 (20d)	icon color for a completed milestone
	idDeclUIColor_uiColorDef_t milestoneCompleteIcon;
	// Offset: 0x1170 (4464d)  Size: 0x14 (20d)	text color for a completed milestone
	idDeclUIColor_uiColorDef_t milestoneCompleteText;
	// Offset: 0x1184 (4484d)  Size: 0x14 (20d)	base color for a completed milestone
	idDeclUIColor_uiColorDef_t progressionItemCompleteBase;
	// Offset: 0x1198 (4504d)  Size: 0x14 (20d)	base color for the sentinel armor hud
	idDeclUIColor_uiColorDef_t sentinelArmorStroke;
	// Offset: 0x11AC (4524d)  Size: 0x14 (20d)	glow color for the sentinel armor hud
	idDeclUIColor_uiColorDef_t sentinelArmorGlow;
	// Offset: 0x11C0 (4544d)  Size: 0x14 (20d)	the color definition for the screen damage hud effect
	idDeclUIColor_uiColorDef_t screenDamage;
	// Offset: 0x11D4 (4564d)  Size: 0x14 (20d)	frag grenade hud color
	idDeclUIColor_uiColorDef_t hudEquipmentFrag;
	// Offset: 0x11E8 (4584d)  Size: 0x14 (20d)	frag grenade Icon hud color
	idDeclUIColor_uiColorDef_t hudEquipmentFragIcon;
	// Offset: 0x11FC (4604d)  Size: 0x14 (20d)	cyro grenade hud color
	idDeclUIColor_uiColorDef_t hudEquipmentCyro;
	// Offset: 0x1210 (4624d)  Size: 0x14 (20d)	cyro grenade Icon hud color
	idDeclUIColor_uiColorDef_t hudEquipmentCyroIcon;
	// Offset: 0x1224 (4644d)  Size: 0x14 (20d)	chainsaw hud color
	idDeclUIColor_uiColorDef_t hudEquipmentChainsaw;
	// Offset: 0x1238 (4664d)  Size: 0x14 (20d)	chainsaw Icon hud color
	idDeclUIColor_uiColorDef_t hudEquipmentChainsawIcon;
	// Offset: 0x124C (4684d)  Size: 0x14 (20d)	flame belch hud color
	idDeclUIColor_uiColorDef_t hudEquipmentFlameBelch;
	// Offset: 0x1260 (4704d)  Size: 0x14 (20d)	flame belch Icon hud color
	idDeclUIColor_uiColorDef_t hudEquipmentFlameBelchIcon;
	// Offset: 0x1274 (4724d)  Size: 0x14 (20d)	crucible hud color
	idDeclUIColor_uiColorDef_t hudEquipmentCrucible;
	// Offset: 0x1288 (4744d)  Size: 0x14 (20d)	crucible Icon hud color
	idDeclUIColor_uiColorDef_t hudEquipmentCrucibleIcon;
	// Offset: 0x129C (4764d)  Size: 0x14 (20d)	hammer hud color
	idDeclUIColor_uiColorDef_t hudEquipmentHammer;
	// Offset: 0x12B0 (4784d)  Size: 0x14 (20d)	hammer Icon hud color
	idDeclUIColor_uiColorDef_t hudEquipmentHammerIcon;
	// Offset: 0x12C4 (4804d)  Size: 0x14 (20d)	hammer Icon hud color when supercharged
	idDeclUIColor_uiColorDef_t hudEquipmentHammerSupercharge;
	// Offset: 0x12D8 (4824d)  Size: 0x14 (20d)	hammer gradient hud color
	idDeclUIColor_uiColorDef_t hudEquipmentHammerGradient;
	// Offset: 0x12EC (4844d)  Size: 0x14 (20d)	boss health color
	idDeclUIColor_uiColorDef_t hudBossHealthBase;
	// Offset: 0x1300 (4864d)  Size: 0x14 (20d)	boss health gradient color
	idDeclUIColor_uiColorDef_t hudBossHealthGradient;
	// Offset: 0x1314 (4884d)  Size: 0x14 (20d)	boss shield color
	idDeclUIColor_uiColorDef_t hudBossShieldBase;
	// Offset: 0x1328 (4904d)  Size: 0x14 (20d)	boss shield glow color
	idDeclUIColor_uiColorDef_t hudBossShieldGlow;
	// Offset: 0x133C (4924d)  Size: 0x14 (20d)	boss Stuff
	idDeclUIColor_uiColorDef_t hudBossKhanMykerBarBorder;
	// Offset: 0x1350 (4944d)  Size: 0x14 (20d)	boss Stuff
	idDeclUIColor_uiColorDef_t hudBossKhanMykerBarGradient;
	// Offset: 0x1364 (4964d)  Size: 0x14 (20d)	boss Stuff
	idDeclUIColor_uiColorDef_t hudBossKhanMykerBarBase;
	// Offset: 0x1378 (4984d)  Size: 0x14 (20d)	boss Stuff
	idDeclUIColor_uiColorDef_t hudBossDemonLordMortarPOIBase;
	// Offset: 0x138C (5004d)  Size: 0x14 (20d)	boss Stuff
	idDeclUIColor_uiColorDef_t hudBossDemonLordMortarPOIArrow;
	// Offset: 0x13A0 (5024d)  Size: 0x14 (20d)	door Stuff
	idDeclUIColor_uiColorDef_t doorLockRed;
	// Offset: 0x13B4 (5044d)  Size: 0x14 (20d)	door Stuff
	idDeclUIColor_uiColorDef_t doorLockBlue;
	// Offset: 0x13C8 (5064d)  Size: 0x14 (20d)	door Stuff
	idDeclUIColor_uiColorDef_t doorLockYellow;
	// Offset: 0x13DC (5084d)  Size: 0x14 (20d)	door Stuff
	idDeclUIColor_uiColorDef_t doorLockGreen;
	// Offset: 0x13F0 (5104d)  Size: 0x14 (20d)	invasion red color
	idDeclUIColor_uiColorDef_t invasionRed;
	// Offset: 0x1404 (5124d)  Size: 0x14 (20d)	invasion orange color
	idDeclUIColor_uiColorDef_t invasionOrange;
	// Offset: 0x1418 (5144d)  Size: 0x14 (20d)	invasion yellow color
	idDeclUIColor_uiColorDef_t invasionYellow;
	// Offset: 0x142C (5164d)  Size: 0x14 (20d)	player badge streak win color
	idDeclUIColor_uiColorDef_t playerBadgeStreakWin;
	// Offset: 0x1440 (5184d)  Size: 0x14 (20d)	player badge streak loss color
	idDeclUIColor_uiColorDef_t playerBadgeStreakLoss;
	// Offset: 0x1454 (5204d)  Size: 0x14 (20d)	color used for the button of master levels that are locked
	idDeclUIColor_uiColorDef_t masterLevelLocked;
	// Offset: 0x1468 (5224d)  Size: 0x14 (20d)	color used for the support rune elements
	idDeclUIColor_uiColorDef_t supportRuneBase;
	// Offset: 0x147C (5244d)  Size: 0x14 (20d)	glow color used for the support rune elements
	idDeclUIColor_uiColorDef_t supportRuneGlow;
	// Offset: 0x1490 (5264d)  Size: 0x14 (20d)	The color used in menus for background strokes
	idDeclUIColor_uiColorDef_t supportRuneStroke;
	// Offset: 0x14A4 (5284d)  Size: 0x14 (20d)	The color used in menus for background bases when selected
	idDeclUIColor_uiColorDef_t supportRuneSelectionBase;
	// Offset: 0x14B8 (5304d)  Size: 0x14 (20d)	color used for supercharged blood punch on HUD
	idDeclUIColor_uiColorDef_t bloodPunchSuperchargeBase;
	// Offset: 0x14CC (5324d)  Size: 0x14 (20d)	glow color used for supercharged blood punch on HUD
	idDeclUIColor_uiColorDef_t bloodPunchSuperchargeGlow;
	// Offset: 0x14E0 (5344d)  Size: 0x14 (20d)	glow color used for supercharged blood punch on HUD
	idDeclUIColor_uiColorDef_t cursedProwlerBase;
	// Offset: 0x14F4 (5364d)  Size: 0x14 (20d)	glow color used for supercharged blood punch on HUD
	idDeclUIColor_uiColorDef_t cursedProwlerGlow;
	// Offset: 0x1508 (5384d)  Size: 0x14 (20d)	color used for onslaught powerup on HUD
	idDeclUIColor_uiColorDef_t powerupOnslaught;
	// Offset: 0x151C (5404d)  Size: 0x14 (20d)	color used for overdrive powerup on HUD
	idDeclUIColor_uiColorDef_t powerupOverdrive;
	// Offset: 0x1530 (5424d)  Size: 0x14 (20d)	color used for berserk powerup on HUD
	idDeclUIColor_uiColorDef_t powerupBerserk;
	// Offset: 0x1544 (5444d)  Size: 0x14 (20d)	color used for horde progress nodes that have been beaten
	idDeclUIColor_uiColorDef_t hordeProgressSuccess;
	// Offset: 0x1558 (5464d)  Size: 0x14 (20d)	color used for the horde progress node that is active
	idDeclUIColor_uiColorDef_t hordeProgressCurrent;
	// Offset: 0x156C (5484d)  Size: 0x14 (20d)	color used for horde progress nodes that have not been beaten
	idDeclUIColor_uiColorDef_t hordeProgressLocked;
	// Offset: 0x1580 (5504d)  Size: 0x14 (20d)	color used for horde progress nodes that are bonus
	idDeclUIColor_uiColorDef_t hordeProgressBonus;
}; // size: 0x1598 (Size Dec: 5528)
static_assert(sizeof(idDeclUIColor) == 5528, "Size of idDeclUIColor is wrong !");





